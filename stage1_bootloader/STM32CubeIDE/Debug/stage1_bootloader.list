
stage1_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000648  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  00001648  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000640  08000640  00001648  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000640  08000648  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000648  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000648  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000189b  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000642  00000000  00000000  00002f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00003558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000171  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000005bd  00000000  00000000  000038d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023e8  00000000  00000000  00003e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac47b  00000000  00000000  0000627e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b26f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000668  00000000  00000000  000b273c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000b2da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000628 	.word	0x08000628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000628 	.word	0x08000628

080001c8 <jump_to_stage2>:
#include "jump_utils.h"

#define STAGE2_ADDRESS  0x08002000

void jump_to_stage2(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
    typedef void (*pFunction)(void);
    uint32_t jump_address = *(__IO uint32_t*)(STAGE2_ADDRESS + 4);
 80001ce:	4b09      	ldr	r3, [pc, #36]	@ (80001f4 <jump_to_stage2+0x2c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	60fb      	str	r3, [r7, #12]
    pFunction jump_to_app = (pFunction)jump_address;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	60bb      	str	r3, [r7, #8]

    // Set main stack pointer
    __set_MSP(*(__IO uint32_t*)STAGE2_ADDRESS);
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <jump_to_stage2+0x30>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f383 8808 	msr	MSP, r3
}
 80001e4:	bf00      	nop

    // Jump
    jump_to_app();
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	4798      	blx	r3
}
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	08002004 	.word	0x08002004
 80001f8:	08002000 	.word	0x08002000

080001fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000204:	4b08      	ldr	r3, [pc, #32]	@ (8000228 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000206:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000208:	4907      	ldr	r1, [pc, #28]	@ (8000228 <LL_APB1_GRP1_EnableClock+0x2c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4313      	orrs	r3, r2
 800020e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000210:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000212:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4013      	ands	r3, r2
 8000218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800021a:	68fb      	ldr	r3, [r7, #12]
}
 800021c:	bf00      	nop
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	40021000 	.word	0x40021000

0800022c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000230:	4b05      	ldr	r3, [pc, #20]	@ (8000248 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a04      	ldr	r2, [pc, #16]	@ (8000248 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800023a:	6013      	str	r3, [r2, #0]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40007000 	.word	0x40007000

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000250:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000254:	f7ff ffd2 	bl	80001fc <LL_APB1_GRP1_EnableClock>
    LL_PWR_EnableBkUpAccess();
 8000258:	f7ff ffe8 	bl	800022c <LL_PWR_EnableBkUpAccess>
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800025c:	4b0b      	ldr	r3, [pc, #44]	@ (800028c <main+0x40>)
 800025e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <main+0x40>)
 8000264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    if (check_update_flag()) {
 800026c:	f000 f880 	bl	8000370 <check_update_flag>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d005      	beq.n	8000282 <main+0x36>
        erase_stage2_flash();
 8000276:	f000 f8c7 	bl	8000408 <erase_stage2_flash>
        copy_stage2_from_temp_flash();
 800027a:	f000 f94f 	bl	800051c <copy_stage2_from_temp_flash>
        clear_update_flag();
 800027e:	f000 f88d 	bl	800039c <clear_update_flag>
    }

    jump_to_stage2();
 8000282:	f7ff ffa1 	bl	80001c8 <jump_to_stage2>

    while (1);
 8000286:	bf00      	nop
 8000288:	e7fd      	b.n	8000286 <main+0x3a>
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <NMI_Handler+0x4>

08000298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <HardFault_Handler+0x4>

080002a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <MemManage_Handler+0x4>

080002a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <BusFault_Handler+0x4>

080002b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <UsageFault_Handler+0x4>

080002b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr

080002c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b087      	sub	sp, #28
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3350      	adds	r3, #80	@ 0x50
 8000304:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	697a      	ldr	r2, [r7, #20]
 800030c:	4413      	add	r3, r2
 800030e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	601a      	str	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	371c      	adds	r7, #28
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000322:	b480      	push	{r7}
 8000324:	b085      	sub	sp, #20
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3350      	adds	r3, #80	@ 0x50
 8000334:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	4413      	add	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	681b      	ldr	r3, [r3, #0]
}
 8000344:	4618      	mov	r0, r3
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <LL_PWR_EnableBkUpAccess>:
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a04      	ldr	r2, [pc, #16]	@ (800036c <LL_PWR_EnableBkUpAccess+0x1c>)
 800035a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40007000 	.word	0x40007000

08000370 <check_update_flag>:
    LL_PWR_EnableBkUpAccess();
    LL_RTC_BAK_SetRegister(RTC, RTC_UPDATE_FLAG_REG, RTC_UPDATE_FLAG_VALUE);
}

bool check_update_flag(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
    LL_PWR_EnableBkUpAccess();
 8000374:	f7ff ffec 	bl	8000350 <LL_PWR_EnableBkUpAccess>
    return (LL_RTC_BAK_GetRegister(RTC, RTC_UPDATE_FLAG_REG) == RTC_UPDATE_FLAG_VALUE);
 8000378:	2100      	movs	r1, #0
 800037a:	4806      	ldr	r0, [pc, #24]	@ (8000394 <check_update_flag+0x24>)
 800037c:	f7ff ffd1 	bl	8000322 <LL_RTC_BAK_GetRegister>
 8000380:	4603      	mov	r3, r0
 8000382:	4a05      	ldr	r2, [pc, #20]	@ (8000398 <check_update_flag+0x28>)
 8000384:	4293      	cmp	r3, r2
 8000386:	bf0c      	ite	eq
 8000388:	2301      	moveq	r3, #1
 800038a:	2300      	movne	r3, #0
 800038c:	b2db      	uxtb	r3, r3
}
 800038e:	4618      	mov	r0, r3
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40002800 	.word	0x40002800
 8000398:	deadbeef 	.word	0xdeadbeef

0800039c <clear_update_flag>:

void clear_update_flag(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
    LL_PWR_EnableBkUpAccess();
 80003a0:	f7ff ffd6 	bl	8000350 <LL_PWR_EnableBkUpAccess>
    LL_RTC_BAK_SetRegister(RTC, RTC_UPDATE_FLAG_REG, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <clear_update_flag+0x18>)
 80003aa:	f7ff ffa1 	bl	80002f0 <LL_RTC_BAK_SetRegister>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40002800 	.word	0x40002800

080003b8 <flash_unlock>:

// --- Flash Low-Level Utilities ---

static void flash_unlock(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
    if ((FLASH->CR & FLASH_CR_LOCK) != 0)
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <flash_unlock+0x24>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da05      	bge.n	80003d0 <flash_unlock+0x18>
    {
        FLASH->KEYR = FLASH_KEY1;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <flash_unlock+0x24>)
 80003c6:	4a06      	ldr	r2, [pc, #24]	@ (80003e0 <flash_unlock+0x28>)
 80003c8:	609a      	str	r2, [r3, #8]
        FLASH->KEYR = FLASH_KEY2;
 80003ca:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <flash_unlock+0x24>)
 80003cc:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <flash_unlock+0x2c>)
 80003ce:	609a      	str	r2, [r3, #8]
    }
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40022000 	.word	0x40022000
 80003e0:	45670123 	.word	0x45670123
 80003e4:	cdef89ab 	.word	0xcdef89ab

080003e8 <flash_lock>:

static void flash_lock(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
    FLASH->CR |= FLASH_CR_LOCK;
 80003ec:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <flash_lock+0x1c>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a04      	ldr	r2, [pc, #16]	@ (8000404 <flash_lock+0x1c>)
 80003f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003f6:	6153      	str	r3, [r2, #20]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40022000 	.word	0x40022000

08000408 <erase_stage2_flash>:

// Erase stage2 bootloader region (16 KB)
void erase_stage2_flash(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
    flash_unlock();
 800040e:	f7ff ffd3 	bl	80003b8 <flash_unlock>

    for (uint32_t addr = STAGE2_ADDRESS; addr < (STAGE2_ADDRESS + STAGE2_SIZE); addr += FLASH_PAGE_SIZE)
 8000412:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <erase_stage2_flash+0xa4>)
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	e03f      	b.n	8000498 <erase_stage2_flash+0x90>
    {
        while (FLASH->SR & FLASH_SR_BSY);
 8000418:	bf00      	nop
 800041a:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1f9      	bne.n	800041a <erase_stage2_flash+0x12>

        // Clear error flags
        FLASH->SR |= FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_SIZERR |
 8000426:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <erase_stage2_flash+0xa8>)
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	4a21      	ldr	r2, [pc, #132]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800042c:	f443 4343 	orr.w	r3, r3, #49920	@ 0xc300
 8000430:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000434:	6113      	str	r3, [r2, #16]
                     FLASH_SR_PGSERR | FLASH_SR_MISERR | FLASH_SR_FASTERR |
                     FLASH_SR_RDERR | FLASH_SR_OPTVERR;

        FLASH->CR &= ~(FLASH_CR_PNB | FLASH_CR_PER);
 8000436:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <erase_stage2_flash+0xa8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a1d      	ldr	r2, [pc, #116]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800043c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000440:	f023 0302 	bic.w	r3, r3, #2
 8000444:	6153      	str	r3, [r2, #20]
        FLASH->CR |= FLASH_CR_PER;
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <erase_stage2_flash+0xa8>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a19      	ldr	r2, [pc, #100]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	6153      	str	r3, [r2, #20]

        uint32_t page_number = (addr - FLASH_BASE_ADDRESS) / FLASH_PAGE_SIZE;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000458:	0adb      	lsrs	r3, r3, #11
 800045a:	603b      	str	r3, [r7, #0]
        FLASH->CR |= (page_number << FLASH_CR_PNB_Pos);
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <erase_stage2_flash+0xa8>)
 8000466:	4313      	orrs	r3, r2
 8000468:	614b      	str	r3, [r1, #20]

        FLASH->CR |= FLASH_CR_START;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a10      	ldr	r2, [pc, #64]	@ (80004b0 <erase_stage2_flash+0xa8>)
 8000470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000474:	6153      	str	r3, [r2, #20]
        while (FLASH->SR & FLASH_SR_BSY);
 8000476:	bf00      	nop
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800047a:	691b      	ldr	r3, [r3, #16]
 800047c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1f9      	bne.n	8000478 <erase_stage2_flash+0x70>

        FLASH->CR &= ~FLASH_CR_PER;
 8000484:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <erase_stage2_flash+0xa8>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a09      	ldr	r2, [pc, #36]	@ (80004b0 <erase_stage2_flash+0xa8>)
 800048a:	f023 0302 	bic.w	r3, r3, #2
 800048e:	6153      	str	r3, [r2, #20]
    for (uint32_t addr = STAGE2_ADDRESS; addr < (STAGE2_ADDRESS + STAGE2_SIZE); addr += FLASH_PAGE_SIZE)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a06      	ldr	r2, [pc, #24]	@ (80004b4 <erase_stage2_flash+0xac>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d3bb      	bcc.n	8000418 <erase_stage2_flash+0x10>
    }

    flash_lock();
 80004a0:	f7ff ffa2 	bl	80003e8 <flash_lock>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	08002000 	.word	0x08002000
 80004b0:	40022000 	.word	0x40022000
 80004b4:	08006000 	.word	0x08006000

080004b8 <flash_write64>:

// Write a 64-bit double word to Flash
static void flash_write64(uint32_t addr, uint64_t data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	e9c7 2300 	strd	r2, r3, [r7]
    flash_unlock();
 80004c4:	f7ff ff78 	bl	80003b8 <flash_unlock>
    FLASH->CR |= FLASH_CR_PG;
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <flash_write64+0x60>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a12      	ldr	r2, [pc, #72]	@ (8000518 <flash_write64+0x60>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6153      	str	r3, [r2, #20]

    *(volatile uint32_t*)addr       = (uint32_t)(data & 0xFFFFFFFFU);
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	601a      	str	r2, [r3, #0]
    *(volatile uint32_t*)(addr + 4) = (uint32_t)(data >> 32U);
 80004da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80004de:	f04f 0200 	mov.w	r2, #0
 80004e2:	f04f 0300 	mov.w	r3, #0
 80004e6:	000a      	movs	r2, r1
 80004e8:	2300      	movs	r3, #0
 80004ea:	68f9      	ldr	r1, [r7, #12]
 80004ec:	3104      	adds	r1, #4
 80004ee:	4613      	mov	r3, r2
 80004f0:	600b      	str	r3, [r1, #0]

    while (FLASH->SR & FLASH_SR_BSY);
 80004f2:	bf00      	nop
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <flash_write64+0x60>)
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1f9      	bne.n	80004f4 <flash_write64+0x3c>
    FLASH->CR &= ~FLASH_CR_PG;
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <flash_write64+0x60>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <flash_write64+0x60>)
 8000506:	f023 0301 	bic.w	r3, r3, #1
 800050a:	6153      	str	r3, [r2, #20]
    flash_lock();
 800050c:	f7ff ff6c 	bl	80003e8 <flash_lock>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40022000 	.word	0x40022000

0800051c <copy_stage2_from_temp_flash>:

// Copy new stage2 image from internal temp Flash region to stage2 region
void copy_stage2_from_temp_flash(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < STAGE2_SIZE; i += 8)
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e015      	b.n	8000554 <copy_stage2_from_temp_flash+0x38>
    {
        uint64_t data = *((uint64_t*)(STAGE2_TEMP_ADDRESS + i));
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800052e:	f503 3368 	add.w	r3, r3, #237568	@ 0x3a000
 8000532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000536:	e9c7 2300 	strd	r2, r3, [r7]
        flash_write64(STAGE2_ADDRESS + i, data);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000540:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8000544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000548:	4608      	mov	r0, r1
 800054a:	f7ff ffb5 	bl	80004b8 <flash_write64>
    for (uint32_t i = 0; i < STAGE2_SIZE; i += 8)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3308      	adds	r3, #8
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800055a:	d3e5      	bcc.n	8000528 <copy_stage2_from_temp_flash+0xc>
    }
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800056c:	f000 f826 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	@ (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	@ (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	@ (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	@ (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000596:	f000 f823 	bl	80005e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059a:	f7ff fe57 	bl	800024c <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005ac:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 80005b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b4:	2000001c 	.word	0x2000001c

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__libc_init_array>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000618 <__libc_init_array+0x38>)
 80005e4:	4c0d      	ldr	r4, [pc, #52]	@ (800061c <__libc_init_array+0x3c>)
 80005e6:	1b64      	subs	r4, r4, r5
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	2600      	movs	r6, #0
 80005ec:	42a6      	cmp	r6, r4
 80005ee:	d109      	bne.n	8000604 <__libc_init_array+0x24>
 80005f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000620 <__libc_init_array+0x40>)
 80005f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <__libc_init_array+0x44>)
 80005f4:	f000 f818 	bl	8000628 <_init>
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	2600      	movs	r6, #0
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d105      	bne.n	800060e <__libc_init_array+0x2e>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f855 3b04 	ldr.w	r3, [r5], #4
 8000608:	4798      	blx	r3
 800060a:	3601      	adds	r6, #1
 800060c:	e7ee      	b.n	80005ec <__libc_init_array+0xc>
 800060e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000612:	4798      	blx	r3
 8000614:	3601      	adds	r6, #1
 8000616:	e7f2      	b.n	80005fe <__libc_init_array+0x1e>
 8000618:	08000640 	.word	0x08000640
 800061c:	08000640 	.word	0x08000640
 8000620:	08000640 	.word	0x08000640
 8000624:	08000644 	.word	0x08000644

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
