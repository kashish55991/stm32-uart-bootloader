
stage1_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001c48  08001c48  00002c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c90  08001c90  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001c90  08001c90  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001c90  08001c90  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c90  08001c90  00002c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c94  08001c94  00002c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001c98  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001c9c  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001c9c  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005079  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001139  00000000  00000000  000080ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  000091e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000057d  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c8  00000000  00000000  00009ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006885  00000000  00000000  0002959d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad67a  00000000  00000000  0002fe22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd49c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  000dd4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000df238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c30 	.word	0x08001c30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001c30 	.word	0x08001c30

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b087      	sub	sp, #28
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << POSITION_VAL((Line >> LL_EXTI_REGISTER_PINPOS_SHFT)));
 8000202:	4a18      	ldr	r2, [pc, #96]	@ (8000264 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	f003 0303 	and.w	r3, r3, #3
 800020a:	3302      	adds	r3, #2
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	0c1b      	lsrs	r3, r3, #16
 8000214:	43db      	mvns	r3, r3
 8000216:	ea02 0103 	and.w	r1, r2, r3
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	0c1b      	lsrs	r3, r3, #16
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	fa93 f3a3 	rbit	r3, r3
 8000226:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d101      	bne.n	8000236 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8000232:	2320      	movs	r3, #32
 8000234:	e003      	b.n	800023e <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	fab3 f383 	clz	r3, r3
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	fa03 f202 	lsl.w	r2, r3, r2
 8000246:	4807      	ldr	r0, [pc, #28]	@ (8000264 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	f003 0303 	and.w	r3, r3, #3
 800024e:	430a      	orrs	r2, r1
 8000250:	3302      	adds	r3, #2
 8000252:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000256:	bf00      	nop
 8000258:	371c      	adds	r7, #28
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40010000 	.word	0x40010000

08000268 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000268:	b480      	push	{r7}
 800026a:	b08b      	sub	sp, #44	@ 0x2c
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	fa93 f3a3 	rbit	r3, r3
 8000282:	613b      	str	r3, [r7, #16]
  return result;
 8000284:	693b      	ldr	r3, [r7, #16]
 8000286:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d101      	bne.n	8000292 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800028e:	2320      	movs	r3, #32
 8000290:	e003      	b.n	800029a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	fab3 f383 	clz	r3, r3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	2103      	movs	r1, #3
 800029e:	fa01 f303 	lsl.w	r3, r1, r3
 80002a2:	43db      	mvns	r3, r3
 80002a4:	401a      	ands	r2, r3
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002aa:	6a3b      	ldr	r3, [r7, #32]
 80002ac:	fa93 f3a3 	rbit	r3, r3
 80002b0:	61fb      	str	r3, [r7, #28]
  return result;
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80002b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d101      	bne.n	80002c0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80002bc:	2320      	movs	r3, #32
 80002be:	e003      	b.n	80002c8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80002c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002c2:	fab3 f383 	clz	r3, r3
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	431a      	orrs	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	372c      	adds	r7, #44	@ 0x2c
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b08b      	sub	sp, #44	@ 0x2c
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	60f8      	str	r0, [r7, #12]
 80002ea:	60b9      	str	r1, [r7, #8]
 80002ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	68da      	ldr	r2, [r3, #12]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	fa93 f3a3 	rbit	r3, r3
 80002fc:	613b      	str	r3, [r7, #16]
  return result;
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000302:	69bb      	ldr	r3, [r7, #24]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d101      	bne.n	800030c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000308:	2320      	movs	r3, #32
 800030a:	e003      	b.n	8000314 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800030c:	69bb      	ldr	r3, [r7, #24]
 800030e:	fab3 f383 	clz	r3, r3
 8000312:	b2db      	uxtb	r3, r3
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	2103      	movs	r1, #3
 8000318:	fa01 f303 	lsl.w	r3, r1, r3
 800031c:	43db      	mvns	r3, r3
 800031e:	401a      	ands	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000324:	6a3b      	ldr	r3, [r7, #32]
 8000326:	fa93 f3a3 	rbit	r3, r3
 800032a:	61fb      	str	r3, [r7, #28]
  return result;
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000332:	2b00      	cmp	r3, #0
 8000334:	d101      	bne.n	800033a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000336:	2320      	movs	r3, #32
 8000338:	e003      	b.n	8000342 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800033a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	60da      	str	r2, [r3, #12]
}
 8000350:	bf00      	nop
 8000352:	372c      	adds	r7, #44	@ 0x2c
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	@ 0x28
 800037c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800037e:	f107 031c 	add.w	r3, r7, #28
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800039a:	2004      	movs	r0, #4
 800039c:	f7ff ff14 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80003a0:	2080      	movs	r0, #128	@ 0x80
 80003a2:	f7ff ff11 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f7ff ff0e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80003ac:	2002      	movs	r0, #2
 80003ae:	f7ff ff0b 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80003b2:	2120      	movs	r1, #32
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b8:	f7ff ffd0 	bl	800035c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80003bc:	491b      	ldr	r1, [pc, #108]	@ (800042c <MX_GPIO_Init+0xb4>)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff1a 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80003c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003d4:	2300      	movs	r3, #0
 80003d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80003da:	2302      	movs	r3, #2
 80003dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80003e0:	f107 031c 	add.w	r3, r7, #28
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fc6f 	bl	8000cc8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f0:	480f      	ldr	r0, [pc, #60]	@ (8000430 <MX_GPIO_Init+0xb8>)
 80003f2:	f7ff ff76 	bl	80002e2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <MX_GPIO_Init+0xb8>)
 80003fe:	f7ff ff33 	bl	8000268 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000402:	2320      	movs	r3, #32
 8000404:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000406:	2301      	movs	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041e:	f000 fe92 	bl	8001146 <LL_GPIO_Init>

}
 8000422:	bf00      	nop
 8000424:	3728      	adds	r7, #40	@ 0x28
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	00f00003 	.word	0x00f00003
 8000430:	48000800 	.word	0x48000800

08000434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <__NVIC_SetPriorityGrouping+0x44>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800045c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000466:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <__NVIC_SetPriorityGrouping+0x44>)
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	60d3      	str	r3, [r2, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <LL_RCC_HSI_Enable+0x1c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <LL_RCC_HSI_Enable+0x1c>)
 8000486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80004a0:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <LL_RCC_HSI_IsReady+0x24>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80004ac:	d101      	bne.n	80004b2 <LL_RCC_HSI_IsReady+0x16>
 80004ae:	2301      	movs	r3, #1
 80004b0:	e000      	b.n	80004b4 <LL_RCC_HSI_IsReady+0x18>
 80004b2:	2300      	movs	r3, #0
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80004cc:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	4904      	ldr	r1, [pc, #16]	@ (80004ec <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004da:	4313      	orrs	r3, r2
 80004dc:	604b      	str	r3, [r1, #4]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <LL_RCC_SetSysClkSource+0x24>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f023 0203 	bic.w	r2, r3, #3
 8000500:	4904      	ldr	r1, [pc, #16]	@ (8000514 <LL_RCC_SetSysClkSource+0x24>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4313      	orrs	r3, r2
 8000506:	608b      	str	r3, [r1, #8]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <LL_RCC_GetSysClkSource+0x18>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f003 030c 	and.w	r3, r3, #12
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <LL_RCC_SetAHBPrescaler+0x24>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000544:	4904      	ldr	r1, [pc, #16]	@ (8000558 <LL_RCC_SetAHBPrescaler+0x24>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800056c:	4904      	ldr	r1, [pc, #16]	@ (8000580 <LL_RCC_SetAPB1Prescaler+0x24>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	608b      	str	r3, [r1, #8]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000594:	4904      	ldr	r1, [pc, #16]	@ (80005a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <LL_RCC_PLL_Enable+0x1c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <LL_RCC_PLL_Enable+0x1c>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <LL_RCC_PLL_IsReady+0x24>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80005dc:	d101      	bne.n	80005e2 <LL_RCC_PLL_IsReady+0x16>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <LL_RCC_PLL_IsReady+0x18>
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000608:	4013      	ands	r3, r2
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	4311      	orrs	r1, r2
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	0212      	lsls	r2, r2, #8
 8000614:	4311      	orrs	r1, r2
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	4904      	ldr	r1, [pc, #16]	@ (800062c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800061c:	4313      	orrs	r3, r2
 800061e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	f9ff808c 	.word	0xf9ff808c

08000634 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800063e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <LL_APB1_GRP1_EnableClock+0x2c>)
 800065e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000660:	4907      	ldr	r1, [pc, #28]	@ (8000680 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <LL_APB1_GRP1_EnableClock+0x2c>)
 800066a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000

08000684 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800068e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000690:	4907      	ldr	r1, [pc, #28]	@ (80006b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4313      	orrs	r3, r2
 8000696:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800069a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40021000 	.word	0x40021000

080006b4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <LL_FLASH_SetLatency+0x24>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 0207 	bic.w	r2, r3, #7
 80006c4:	4904      	ldr	r1, [pc, #16]	@ (80006d8 <LL_FLASH_SetLatency+0x24>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	600b      	str	r3, [r1, #0]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40022000 	.word	0x40022000

080006dc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <LL_FLASH_GetLatency+0x18>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 0307 	and.w	r3, r3, #7
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000708:	4904      	ldr	r1, [pc, #16]	@ (800071c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	600b      	str	r3, [r1, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40007000 	.word	0x40007000

08000720 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800072c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000730:	d101      	bne.n	8000736 <LL_PWR_IsActiveFlag_VOS+0x16>
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40007000 	.word	0x40007000

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff ff99 	bl	8000684 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000752:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000756:	f7ff ff7d 	bl	8000654 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075a:	2003      	movs	r0, #3
 800075c:	f7ff fe6a 	bl	8000434 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f806 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f7ff fe08 	bl	8000378 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f8ee 	bl	8000948 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x24>

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff ff9d 	bl	80006b4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800077a:	bf00      	nop
 800077c:	f7ff ffae 	bl	80006dc <LL_FLASH_GetLatency>
 8000780:	4603      	mov	r3, r0
 8000782:	2b04      	cmp	r3, #4
 8000784:	d1fa      	bne.n	800077c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000786:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078a:	f7ff ffb5 	bl	80006f8 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800078e:	bf00      	nop
 8000790:	f7ff ffc6 	bl	8000720 <LL_PWR_IsActiveFlag_VOS>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1fa      	bne.n	8000790 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 800079a:	f7ff fe6f 	bl	800047c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800079e:	bf00      	nop
 80007a0:	f7ff fe7c 	bl	800049c <LL_RCC_HSI_IsReady>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d1fa      	bne.n	80007a0 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007aa:	2010      	movs	r0, #16
 80007ac:	f7ff fe8a 	bl	80004c4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 80007b0:	2300      	movs	r3, #0
 80007b2:	220a      	movs	r2, #10
 80007b4:	2100      	movs	r1, #0
 80007b6:	2002      	movs	r0, #2
 80007b8:	f7ff ff1c 	bl	80005f4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80007bc:	f7ff ff3a 	bl	8000634 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80007c0:	f7ff fef4 	bl	80005ac <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007c4:	bf00      	nop
 80007c6:	f7ff ff01 	bl	80005cc <LL_RCC_PLL_IsReady>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d1fa      	bne.n	80007c6 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f7ff fe8d 	bl	80004f0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007d6:	bf00      	nop
 80007d8:	f7ff fe9e 	bl	8000518 <LL_RCC_GetSysClkSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b0c      	cmp	r3, #12
 80007e0:	d1fa      	bne.n	80007d8 <SystemClock_Config+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fea6 	bl	8000534 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff feb7 	bl	800055c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fec8 	bl	8000584 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <SystemClock_Config+0x94>)
 80007f6:	f001 f9d9 	bl	8001bac <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 80007fa:	4802      	ldr	r0, [pc, #8]	@ (8000804 <SystemClock_Config+0x94>)
 80007fc:	f001 f9e4 	bl	8001bc8 <LL_SetSystemCoreClock>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	04c4b400 	.word	0x04c4b400

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_RCC_SetUSARTClockSource>:
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <LL_RCC_SetUSARTClockSource+0x30>)
 8000872:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	0c1b      	lsrs	r3, r3, #16
 800087a:	43db      	mvns	r3, r3
 800087c:	401a      	ands	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	b29b      	uxth	r3, r3
 8000882:	4905      	ldr	r1, [pc, #20]	@ (8000898 <LL_RCC_SetUSARTClockSource+0x30>)
 8000884:	4313      	orrs	r3, r2
 8000886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <LL_AHB2_GRP1_EnableClock>:
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008a8:	4907      	ldr	r1, [pc, #28]	@ (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_APB1_GRP1_EnableClock>:
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008d8:	4907      	ldr	r1, [pc, #28]	@ (80008f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40021000 	.word	0x40021000

080008fc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f043 0201 	orr.w	r2, r3, #1
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	609a      	str	r2, [r3, #8]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000972:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8000976:	f7ff ff77 	bl	8000868 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800097a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800097e:	f7ff ffa5 	bl	80008cc <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff ff8a 	bl	800089c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000988:	230c      	movs	r3, #12
 800098a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800098c:	2302      	movs	r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800099c:	2307      	movs	r3, #7
 800099e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f000 fbcd 	bl	8001146 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80009ac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80009b0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009be:	230c      	movs	r3, #12
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009c6:	2300      	movs	r3, #0
 80009c8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4806      	ldr	r0, [pc, #24]	@ (80009ec <MX_USART2_UART_Init+0xa4>)
 80009d2:	f001 f855 	bl	8001a80 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_USART2_UART_Init+0xa4>)
 80009d8:	f7ff ffa0 	bl	800091c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_USART2_UART_Init+0xa4>)
 80009de:	f7ff ff8d 	bl	80008fc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	@ 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f000 f826 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f001 f8e3 	bl	8001be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fe91 	bl	8000748 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a34:	08001c98 	.word	0x08001c98
  ldr r2, =_sbss
 8000a38:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a3c:	20000020 	.word	0x20000020

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>
	...

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <LL_EXTI_EnableIT_0_31+0x20>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4904      	ldr	r1, [pc, #16]	@ (8000a88 <LL_EXTI_EnableIT_0_31+0x20>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40010400 	.word	0x40010400

08000a8c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <LL_EXTI_EnableIT_32_63+0x20>)
 8000a96:	6a1a      	ldr	r2, [r3, #32]
 8000a98:	4904      	ldr	r1, [pc, #16]	@ (8000aac <LL_EXTI_EnableIT_32_63+0x20>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	620b      	str	r3, [r1, #32]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40010400 	.word	0x40010400

08000ab0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	4904      	ldr	r1, [pc, #16]	@ (8000ad4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	600b      	str	r3, [r1, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <LL_EXTI_DisableIT_32_63+0x24>)
 8000ae2:	6a1a      	ldr	r2, [r3, #32]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4904      	ldr	r1, [pc, #16]	@ (8000afc <LL_EXTI_DisableIT_32_63+0x24>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	620b      	str	r3, [r1, #32]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40010400 	.word	0x40010400

08000b00 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	4904      	ldr	r1, [pc, #16]	@ (8000b20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	604b      	str	r3, [r1, #4]

}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b30:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40010400 	.word	0x40010400

08000b48 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4904      	ldr	r1, [pc, #16]	@ (8000b6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	604b      	str	r3, [r1, #4]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400

08000b70 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4904      	ldr	r1, [pc, #16]	@ (8000b94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40010400 	.word	0x40010400

08000b98 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	4904      	ldr	r1, [pc, #16]	@ (8000bb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]

}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40010400 	.word	0x40010400

08000bbc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bc8:	4904      	ldr	r1, [pc, #16]	@ (8000bdc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40010400 	.word	0x40010400

08000be0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4904      	ldr	r1, [pc, #16]	@ (8000c04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	608b      	str	r3, [r1, #8]

}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40010400 	.word	0x40010400

08000c08 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	4904      	ldr	r1, [pc, #16]	@ (8000c2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40010400 	.word	0x40010400

08000c30 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	4904      	ldr	r1, [pc, #16]	@ (8000c50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60cb      	str	r3, [r1, #12]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40010400 	.word	0x40010400

08000c54 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c60:	4904      	ldr	r1, [pc, #16]	@ (8000c74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40010400 	.word	0x40010400

08000c78 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4904      	ldr	r1, [pc, #16]	@ (8000c9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60cb      	str	r3, [r1, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4904      	ldr	r1, [pc, #16]	@ (8000cc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80d0 	beq.w	8000e7e <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7a5b      	ldrb	r3, [r3, #9]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d01c      	beq.n	8000d28 <LL_EXTI_Init+0x60>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	dc25      	bgt.n	8000d3e <LL_EXTI_Init+0x76>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <LL_EXTI_Init+0x34>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d00b      	beq.n	8000d12 <LL_EXTI_Init+0x4a>
 8000cfa:	e020      	b.n	8000d3e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff21 	bl	8000b48 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff feac 	bl	8000a68 <LL_EXTI_EnableIT_0_31>
          break;
 8000d10:	e018      	b.n	8000d44 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff feca 	bl	8000ab0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff feed 	bl	8000b00 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d26:	e00d      	b.n	8000d44 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe9b 	bl	8000a68 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fee2 	bl	8000b00 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d3c:	e002      	b.n	8000d44 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
          break;
 8000d42:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a9b      	ldrb	r3, [r3, #10]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d030      	beq.n	8000dae <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7a9b      	ldrb	r3, [r3, #10]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d01c      	beq.n	8000d8e <LL_EXTI_Init+0xc6>
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	dc25      	bgt.n	8000da4 <LL_EXTI_Init+0xdc>
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d002      	beq.n	8000d62 <LL_EXTI_Init+0x9a>
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d00b      	beq.n	8000d78 <LL_EXTI_Init+0xb0>
 8000d60:	e020      	b.n	8000da4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff86 	bl	8000c78 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff11 	bl	8000b98 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000d76:	e01a      	b.n	8000dae <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff2f 	bl	8000be0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff52 	bl	8000c30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000d8c:	e00f      	b.n	8000dae <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff00 	bl	8000b98 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff47 	bl	8000c30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000da2:	e004      	b.n	8000dae <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
            break;
 8000dac:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d077      	beq.n	8000ea6 <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7a5b      	ldrb	r3, [r3, #9]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d01c      	beq.n	8000df8 <LL_EXTI_Init+0x130>
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	dc25      	bgt.n	8000e0e <LL_EXTI_Init+0x146>
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <LL_EXTI_Init+0x104>
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00b      	beq.n	8000de2 <LL_EXTI_Init+0x11a>
 8000dca:	e020      	b.n	8000e0e <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fecd 	bl	8000b70 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe56 	bl	8000a8c <LL_EXTI_EnableIT_32_63>
          break;
 8000de0:	e01a      	b.n	8000e18 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe76 	bl	8000ad8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe97 	bl	8000b24 <LL_EXTI_EnableEvent_32_63>
          break;
 8000df6:	e00f      	b.n	8000e18 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe45 	bl	8000a8c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe8c 	bl	8000b24 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e0c:	e004      	b.n	8000e18 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
          break;
 8000e16:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7a9b      	ldrb	r3, [r3, #10]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d042      	beq.n	8000ea6 <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7a9b      	ldrb	r3, [r3, #10]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d01c      	beq.n	8000e62 <LL_EXTI_Init+0x19a>
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	dc25      	bgt.n	8000e78 <LL_EXTI_Init+0x1b0>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <LL_EXTI_Init+0x16e>
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d00b      	beq.n	8000e4c <LL_EXTI_Init+0x184>
 8000e34:	e020      	b.n	8000e78 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff30 	bl	8000ca0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff feb9 	bl	8000bbc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000e4a:	e02c      	b.n	8000ea6 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fed9 	bl	8000c08 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fefa 	bl	8000c54 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e60:	e021      	b.n	8000ea6 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fea8 	bl	8000bbc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff feef 	bl	8000c54 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e76:	e016      	b.n	8000ea6 <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
            break;
 8000e7c:	e013      	b.n	8000ea6 <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fe14 	bl	8000ab0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe5b 	bl	8000b48 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fe1e 	bl	8000ad8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe65 	bl	8000b70 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LL_GPIO_SetPinMode>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b08b      	sub	sp, #44	@ 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	613b      	str	r3, [r7, #16]
  return result;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	e003      	b.n	8000ee2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	fab3 f383 	clz	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	401a      	ands	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000f04:	2320      	movs	r3, #32
 8000f06:	e003      	b.n	8000f10 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	372c      	adds	r7, #44	@ 0x2c
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_GPIO_SetPinOutputType>:
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	fb01 f303 	mul.w	r3, r1, r3
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	605a      	str	r2, [r3, #4]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_GPIO_SetPinSpeed>:
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b08b      	sub	sp, #44	@ 0x2c
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	613b      	str	r3, [r7, #16]
  return result;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000f80:	2320      	movs	r3, #32
 8000f82:	e003      	b.n	8000f8c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2103      	movs	r1, #3
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	e003      	b.n	8000fba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	609a      	str	r2, [r3, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	372c      	adds	r7, #44	@ 0x2c
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_GPIO_SetPinPull>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b08b      	sub	sp, #44	@ 0x2c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	613b      	str	r3, [r7, #16]
  return result;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	e003      	b.n	8001006 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	fab3 f383 	clz	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2103      	movs	r1, #3
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	401a      	ands	r2, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	61fb      	str	r3, [r7, #28]
  return result;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001028:	2320      	movs	r3, #32
 800102a:	e003      	b.n	8001034 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	60da      	str	r2, [r3, #12]
}
 8001042:	bf00      	nop
 8001044:	372c      	adds	r7, #44	@ 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_GPIO_SetAFPin_0_7>:
{
 800104e:	b480      	push	{r7}
 8001050:	b08b      	sub	sp, #44	@ 0x2c
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	613b      	str	r3, [r7, #16]
  return result;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001074:	2320      	movs	r3, #32
 8001076:	e003      	b.n	8001080 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	210f      	movs	r1, #15
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	61fb      	str	r3, [r7, #28]
  return result;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80010a2:	2320      	movs	r3, #32
 80010a4:	e003      	b.n	80010ae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	fab3 f383 	clz	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	431a      	orrs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	621a      	str	r2, [r3, #32]
}
 80010bc:	bf00      	nop
 80010be:	372c      	adds	r7, #44	@ 0x2c
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_GPIO_SetAFPin_8_15>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b08b      	sub	sp, #44	@ 0x2c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	613b      	str	r3, [r7, #16]
  return result;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80010f0:	2320      	movs	r3, #32
 80010f2:	e003      	b.n	80010fc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	210f      	movs	r1, #15
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	61fb      	str	r3, [r7, #28]
  return result;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001120:	2320      	movs	r3, #32
 8001122:	e003      	b.n	800112c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	431a      	orrs	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800113a:	bf00      	nop
 800113c:	372c      	adds	r7, #44	@ 0x2c
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b088      	sub	sp, #32
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	60fb      	str	r3, [r7, #12]
  return result;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <LL_GPIO_Init+0x26>
    return 32U;
 8001168:	2320      	movs	r3, #32
 800116a:	e003      	b.n	8001174 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001176:	e048      	b.n	800120a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03a      	beq.n	8001204 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d003      	beq.n	800119e <LL_GPIO_Init+0x58>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d10e      	bne.n	80011bc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	461a      	mov	r2, r3
 80011a4:	69b9      	ldr	r1, [r7, #24]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fed7 	bl	8000f5a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	461a      	mov	r2, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff feb7 	bl	8000f2a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	461a      	mov	r2, r3
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff05 	bl	8000fd4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d111      	bne.n	80011f6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2bff      	cmp	r3, #255	@ 0xff
 80011d6:	d807      	bhi.n	80011e8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	461a      	mov	r2, r3
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff34 	bl	800104e <LL_GPIO_SetAFPin_0_7>
 80011e6:	e006      	b.n	80011f6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	461a      	mov	r2, r3
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff69 	bl	80010c8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	69b9      	ldr	r1, [r7, #24]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fe56 	bl	8000eb0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	3301      	adds	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1af      	bne.n	8001178 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <LL_RCC_HSI_IsReady>:
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <LL_RCC_HSI_IsReady+0x24>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001234:	d101      	bne.n	800123a <LL_RCC_HSI_IsReady+0x16>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_RCC_HSI_IsReady+0x18>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <LL_RCC_LSE_IsReady>:
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <LL_RCC_LSE_IsReady+0x24>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d101      	bne.n	8001262 <LL_RCC_LSE_IsReady+0x16>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LL_RCC_LSE_IsReady+0x18>
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b08      	cmp	r3, #8
 8001282:	d101      	bne.n	8001288 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000

08001298 <LL_RCC_MSI_GetRange>:
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <LL_RCC_MSI_GetRange+0x18>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000

080012d0 <LL_RCC_GetSysClkSource>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <LL_RCC_GetSysClkSource+0x18>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <LL_RCC_GetAHBPrescaler>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <LL_RCC_GetAHBPrescaler+0x18>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <LL_RCC_GetAPB1Prescaler>:
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <LL_RCC_GetAPB1Prescaler+0x18>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <LL_RCC_GetAPB2Prescaler>:
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <LL_RCC_GetAPB2Prescaler+0x18>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <LL_RCC_GetUSARTClockSource>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <LL_RCC_GetUSARTClockSource+0x24>)
 800134a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	4313      	orrs	r3, r2
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000

08001368 <LL_RCC_GetUARTClockSource>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <LL_RCC_GetUARTClockSource+0x24>)
 8001372:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	4313      	orrs	r3, r2
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000

08001390 <LL_RCC_PLL_GetMainSource>:
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <LL_RCC_PLL_GetMainSource+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <LL_RCC_PLL_GetN>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <LL_RCC_PLL_GetN+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000

080013c8 <LL_RCC_PLL_GetR>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <LL_RCC_PLL_GetR+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_RCC_PLL_GetDivider>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <LL_RCC_PLL_GetDivider+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d137      	bne.n	8001482 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff94 	bl	8001340 <LL_RCC_GetUSARTClockSource>
 8001418:	4603      	mov	r3, r0
 800141a:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800141e:	2b03      	cmp	r3, #3
 8001420:	f200 80b3 	bhi.w	800158a <LL_RCC_GetUSARTClockFreq+0x18a>
 8001424:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800146b 	.word	0x0800146b
 8001430:	0800143d 	.word	0x0800143d
 8001434:	08001445 	.word	0x08001445
 8001438:	08001457 	.word	0x08001457
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800143c:	f000 f956 	bl	80016ec <RCC_GetSystemClockFreq>
 8001440:	60f8      	str	r0, [r7, #12]
        break;
 8001442:	e0b3      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001444:	f7ff feee 	bl	8001224 <LL_RCC_HSI_IsReady>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 809f 	beq.w	800158e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8001450:	4b59      	ldr	r3, [pc, #356]	@ (80015b8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001452:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001454:	e09b      	b.n	800158e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001456:	f7ff fef9 	bl	800124c <LL_RCC_LSE_IsReady>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8098 	beq.w	8001592 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8001462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001466:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001468:	e093      	b.n	8001592 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800146a:	f000 f93f 	bl	80016ec <RCC_GetSystemClockFreq>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f9cb 	bl	800180c <RCC_GetHCLKClockFreq>
 8001476:	4603      	mov	r3, r0
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f9f1 	bl	8001860 <RCC_GetPCLK2ClockFreq>
 800147e:	60f8      	str	r0, [r7, #12]
        break;
 8001480:	e094      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d146      	bne.n	8001516 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff59 	bl	8001340 <LL_RCC_GetUSARTClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d87e      	bhi.n	8001596 <LL_RCC_GetUSARTClockFreq+0x196>
 8001498:	a201      	add	r2, pc, #4	@ (adr r2, 80014a0 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014ff 	.word	0x080014ff
 80014a4:	08001597 	.word	0x08001597
 80014a8:	08001597 	.word	0x08001597
 80014ac:	08001597 	.word	0x08001597
 80014b0:	080014d5 	.word	0x080014d5
 80014b4:	08001597 	.word	0x08001597
 80014b8:	08001597 	.word	0x08001597
 80014bc:	08001597 	.word	0x08001597
 80014c0:	080014dd 	.word	0x080014dd
 80014c4:	08001597 	.word	0x08001597
 80014c8:	08001597 	.word	0x08001597
 80014cc:	08001597 	.word	0x08001597
 80014d0:	080014ed 	.word	0x080014ed
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80014d4:	f000 f90a 	bl	80016ec <RCC_GetSystemClockFreq>
 80014d8:	60f8      	str	r0, [r7, #12]
        break;
 80014da:	e067      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80014dc:	f7ff fea2 	bl	8001224 <LL_RCC_HSI_IsReady>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d059      	beq.n	800159a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80014e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80014ea:	e056      	b.n	800159a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80014ec:	f7ff feae 	bl	800124c <LL_RCC_LSE_IsReady>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d053      	beq.n	800159e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80014f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80014fc:	e04f      	b.n	800159e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80014fe:	f000 f8f5 	bl	80016ec <RCC_GetSystemClockFreq>
 8001502:	4603      	mov	r3, r0
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f981 	bl	800180c <RCC_GetHCLKClockFreq>
 800150a:	4603      	mov	r3, r0
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f993 	bl	8001838 <RCC_GetPCLK1ClockFreq>
 8001512:	60f8      	str	r0, [r7, #12]
        break;
 8001514:	e04a      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b30      	cmp	r3, #48	@ 0x30
 800151a:	d147      	bne.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff0f 	bl	8001340 <LL_RCC_GetUSARTClockSource>
 8001522:	4603      	mov	r3, r0
 8001524:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001528:	d01a      	beq.n	8001560 <LL_RCC_GetUSARTClockFreq+0x160>
 800152a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800152e:	d838      	bhi.n	80015a2 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001530:	4a22      	ldr	r2, [pc, #136]	@ (80015bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00c      	beq.n	8001550 <LL_RCC_GetUSARTClockFreq+0x150>
 8001536:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d832      	bhi.n	80015a2 <LL_RCC_GetUSARTClockFreq+0x1a2>
 800153c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001540:	d017      	beq.n	8001572 <LL_RCC_GetUSARTClockFreq+0x172>
 8001542:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d12c      	bne.n	80015a2 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001548:	f000 f8d0 	bl	80016ec <RCC_GetSystemClockFreq>
 800154c:	60f8      	str	r0, [r7, #12]
          break;
 800154e:	e02d      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8001550:	f7ff fe68 	bl	8001224 <LL_RCC_HSI_IsReady>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d025      	beq.n	80015a6 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800155c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800155e:	e022      	b.n	80015a6 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8001560:	f7ff fe74 	bl	800124c <LL_RCC_LSE_IsReady>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01f      	beq.n	80015aa <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800156a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800156e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001570:	e01b      	b.n	80015aa <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001572:	f000 f8bb 	bl	80016ec <RCC_GetSystemClockFreq>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f947 	bl	800180c <RCC_GetHCLKClockFreq>
 800157e:	4603      	mov	r3, r0
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f959 	bl	8001838 <RCC_GetPCLK1ClockFreq>
 8001586:	60f8      	str	r0, [r7, #12]
          break;
 8001588:	e010      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800158a:	bf00      	nop
 800158c:	e00e      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800158e:	bf00      	nop
 8001590:	e00c      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001592:	bf00      	nop
 8001594:	e00a      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001596:	bf00      	nop
 8001598:	e008      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800159a:	bf00      	nop
 800159c:	e006      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800159e:	bf00      	nop
 80015a0:	e004      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 80015a2:	bf00      	nop
 80015a4:	e002      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80015a6:	bf00      	nop
 80015a8:	e000      	b.n	80015ac <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80015aa:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	00300020 	.word	0x00300020
 80015c0:	00300010 	.word	0x00300010

080015c4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80015d4:	d13b      	bne.n	800164e <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fec6 	bl	8001368 <LL_RCC_GetUARTClockSource>
 80015dc:	4603      	mov	r3, r0
 80015de:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80015e2:	d01a      	beq.n	800161a <LL_RCC_GetUARTClockFreq+0x56>
 80015e4:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80015e8:	d82c      	bhi.n	8001644 <LL_RCC_GetUARTClockFreq+0x80>
 80015ea:	4a3b      	ldr	r2, [pc, #236]	@ (80016d8 <LL_RCC_GetUARTClockFreq+0x114>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00c      	beq.n	800160a <LL_RCC_GetUARTClockFreq+0x46>
 80015f0:	4a39      	ldr	r2, [pc, #228]	@ (80016d8 <LL_RCC_GetUARTClockFreq+0x114>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d826      	bhi.n	8001644 <LL_RCC_GetUARTClockFreq+0x80>
 80015f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80015fa:	d017      	beq.n	800162c <LL_RCC_GetUARTClockFreq+0x68>
 80015fc:	4a37      	ldr	r2, [pc, #220]	@ (80016dc <LL_RCC_GetUARTClockFreq+0x118>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d120      	bne.n	8001644 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001602:	f000 f873 	bl	80016ec <RCC_GetSystemClockFreq>
 8001606:	60f8      	str	r0, [r7, #12]
        break;
 8001608:	e021      	b.n	800164e <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800160a:	f7ff fe0b 	bl	8001224 <LL_RCC_HSI_IsReady>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d019      	beq.n	8001648 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8001614:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <LL_RCC_GetUARTClockFreq+0x11c>)
 8001616:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001618:	e016      	b.n	8001648 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800161a:	f7ff fe17 	bl	800124c <LL_RCC_LSE_IsReady>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8001624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001628:	60fb      	str	r3, [r7, #12]
        }
        break;
 800162a:	e00f      	b.n	800164c <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800162c:	f000 f85e 	bl	80016ec <RCC_GetSystemClockFreq>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f8ea 	bl	800180c <RCC_GetHCLKClockFreq>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f8fc 	bl	8001838 <RCC_GetPCLK1ClockFreq>
 8001640:	60f8      	str	r0, [r7, #12]
        break;
 8001642:	e004      	b.n	800164e <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8001644:	bf00      	nop
 8001646:	e002      	b.n	800164e <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001648:	bf00      	nop
 800164a:	e000      	b.n	800164e <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 800164c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001654:	d13b      	bne.n	80016ce <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fe86 	bl	8001368 <LL_RCC_GetUARTClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001662:	d01a      	beq.n	800169a <LL_RCC_GetUARTClockFreq+0xd6>
 8001664:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001668:	d82c      	bhi.n	80016c4 <LL_RCC_GetUARTClockFreq+0x100>
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <LL_RCC_GetUARTClockFreq+0x120>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00c      	beq.n	800168a <LL_RCC_GetUARTClockFreq+0xc6>
 8001670:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <LL_RCC_GetUARTClockFreq+0x120>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d826      	bhi.n	80016c4 <LL_RCC_GetUARTClockFreq+0x100>
 8001676:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800167a:	d017      	beq.n	80016ac <LL_RCC_GetUARTClockFreq+0xe8>
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <LL_RCC_GetUARTClockFreq+0x124>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d120      	bne.n	80016c4 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001682:	f000 f833 	bl	80016ec <RCC_GetSystemClockFreq>
 8001686:	60f8      	str	r0, [r7, #12]
        break;
 8001688:	e021      	b.n	80016ce <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800168a:	f7ff fdcb 	bl	8001224 <LL_RCC_HSI_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d019      	beq.n	80016c8 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <LL_RCC_GetUARTClockFreq+0x11c>)
 8001696:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001698:	e016      	b.n	80016c8 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800169a:	f7ff fdd7 	bl	800124c <LL_RCC_LSE_IsReady>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 80016a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016aa:	e00f      	b.n	80016cc <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80016ac:	f000 f81e 	bl	80016ec <RCC_GetSystemClockFreq>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f8aa 	bl	800180c <RCC_GetHCLKClockFreq>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f8bc 	bl	8001838 <RCC_GetPCLK1ClockFreq>
 80016c0:	60f8      	str	r0, [r7, #12]
        break;
 80016c2:	e004      	b.n	80016ce <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 80016c4:	bf00      	nop
 80016c6:	e002      	b.n	80016ce <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80016c8:	bf00      	nop
 80016ca:	e000      	b.n	80016ce <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80016cc:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	00c00080 	.word	0x00c00080
 80016dc:	00c00040 	.word	0x00c00040
 80016e0:	00f42400 	.word	0x00f42400
 80016e4:	03000200 	.word	0x03000200
 80016e8:	03000100 	.word	0x03000100

080016ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80016f2:	f7ff fded 	bl	80012d0 <LL_RCC_GetSysClkSource>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d851      	bhi.n	80017a0 <RCC_GetSystemClockFreq+0xb4>
 80016fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <RCC_GetSystemClockFreq+0x18>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001739 	.word	0x08001739
 8001708:	080017a1 	.word	0x080017a1
 800170c:	080017a1 	.word	0x080017a1
 8001710:	080017a1 	.word	0x080017a1
 8001714:	0800178d 	.word	0x0800178d
 8001718:	080017a1 	.word	0x080017a1
 800171c:	080017a1 	.word	0x080017a1
 8001720:	080017a1 	.word	0x080017a1
 8001724:	08001793 	.word	0x08001793
 8001728:	080017a1 	.word	0x080017a1
 800172c:	080017a1 	.word	0x080017a1
 8001730:	080017a1 	.word	0x080017a1
 8001734:	08001799 	.word	0x08001799
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001738:	f7ff fd9c 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d111      	bne.n	8001766 <RCC_GetSystemClockFreq+0x7a>
 8001742:	f7ff fd97 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <RCC_GetSystemClockFreq+0x6a>
 800174c:	f7ff fda4 	bl	8001298 <LL_RCC_MSI_GetRange>
 8001750:	4603      	mov	r3, r0
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	e003      	b.n	800175e <RCC_GetSystemClockFreq+0x72>
 8001756:	f7ff fdad 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800175a:	4603      	mov	r3, r0
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	4a28      	ldr	r2, [pc, #160]	@ (8001800 <RCC_GetSystemClockFreq+0x114>)
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	e010      	b.n	8001788 <RCC_GetSystemClockFreq+0x9c>
 8001766:	f7ff fd85 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <RCC_GetSystemClockFreq+0x8e>
 8001770:	f7ff fd92 	bl	8001298 <LL_RCC_MSI_GetRange>
 8001774:	4603      	mov	r3, r0
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	e003      	b.n	8001782 <RCC_GetSystemClockFreq+0x96>
 800177a:	f7ff fd9b 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800177e:	4603      	mov	r3, r0
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <RCC_GetSystemClockFreq+0x114>)
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800178a:	e033      	b.n	80017f4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800178c:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <RCC_GetSystemClockFreq+0x118>)
 800178e:	607b      	str	r3, [r7, #4]
      break;
 8001790:	e030      	b.n	80017f4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <RCC_GetSystemClockFreq+0x11c>)
 8001794:	607b      	str	r3, [r7, #4]
      break;
 8001796:	e02d      	b.n	80017f4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001798:	f000 f876 	bl	8001888 <RCC_PLL_GetFreqDomain_SYS>
 800179c:	6078      	str	r0, [r7, #4]
      break;
 800179e:	e029      	b.n	80017f4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80017a0:	f7ff fd68 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d111      	bne.n	80017ce <RCC_GetSystemClockFreq+0xe2>
 80017aa:	f7ff fd63 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <RCC_GetSystemClockFreq+0xd2>
 80017b4:	f7ff fd70 	bl	8001298 <LL_RCC_MSI_GetRange>
 80017b8:	4603      	mov	r3, r0
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	e003      	b.n	80017c6 <RCC_GetSystemClockFreq+0xda>
 80017be:	f7ff fd79 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 80017c2:	4603      	mov	r3, r0
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <RCC_GetSystemClockFreq+0x114>)
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	e010      	b.n	80017f0 <RCC_GetSystemClockFreq+0x104>
 80017ce:	f7ff fd51 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <RCC_GetSystemClockFreq+0xf6>
 80017d8:	f7ff fd5e 	bl	8001298 <LL_RCC_MSI_GetRange>
 80017dc:	4603      	mov	r3, r0
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	e003      	b.n	80017ea <RCC_GetSystemClockFreq+0xfe>
 80017e2:	f7ff fd67 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 80017e6:	4603      	mov	r3, r0
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	4a05      	ldr	r2, [pc, #20]	@ (8001800 <RCC_GetSystemClockFreq+0x114>)
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80017f2:	bf00      	nop
  }

  return frequency;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08001c60 	.word	0x08001c60
 8001804:	00f42400 	.word	0x00f42400
 8001808:	007a1200 	.word	0x007a1200

0800180c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001814:	f7ff fd6a 	bl	80012ec <LL_RCC_GetAHBPrescaler>
 8001818:	4603      	mov	r3, r0
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <RCC_GetHCLKClockFreq+0x28>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	40d3      	lsrs	r3, r2
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	08001c48 	.word	0x08001c48

08001838 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001840:	f7ff fd62 	bl	8001308 <LL_RCC_GetAPB1Prescaler>
 8001844:	4603      	mov	r3, r0
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <RCC_GetPCLK1ClockFreq+0x24>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	40d3      	lsrs	r3, r2
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	08001c58 	.word	0x08001c58

08001860 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001868:	f7ff fd5c 	bl	8001324 <LL_RCC_GetAPB2Prescaler>
 800186c:	4603      	mov	r3, r0
 800186e:	0adb      	lsrs	r3, r3, #11
 8001870:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <RCC_GetPCLK2ClockFreq+0x24>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	40d3      	lsrs	r3, r2
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	08001c58 	.word	0x08001c58

08001888 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800188e:	f7ff fd7f 	bl	8001390 <LL_RCC_PLL_GetMainSource>
 8001892:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d036      	beq.n	8001908 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d836      	bhi.n	800190e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d003      	beq.n	80018ae <RCC_PLL_GetFreqDomain_SYS+0x26>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d02a      	beq.n	8001902 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80018ac:	e02f      	b.n	800190e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80018ae:	f7ff fce1 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d111      	bne.n	80018dc <RCC_PLL_GetFreqDomain_SYS+0x54>
 80018b8:	f7ff fcdc 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <RCC_PLL_GetFreqDomain_SYS+0x44>
 80018c2:	f7ff fce9 	bl	8001298 <LL_RCC_MSI_GetRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	e003      	b.n	80018d4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80018cc:	f7ff fcf2 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 80018d0:	4603      	mov	r3, r0
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001994 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	e010      	b.n	80018fe <RCC_PLL_GetFreqDomain_SYS+0x76>
 80018dc:	f7ff fcca 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80018e6:	f7ff fcd7 	bl	8001298 <LL_RCC_MSI_GetRange>
 80018ea:	4603      	mov	r3, r0
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	e003      	b.n	80018f8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80018f0:	f7ff fce0 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 80018f4:	4603      	mov	r3, r0
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001900:	e02f      	b.n	8001962 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8001904:	607b      	str	r3, [r7, #4]
      break;
 8001906:	e02c      	b.n	8001962 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001908:	4b24      	ldr	r3, [pc, #144]	@ (800199c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800190a:	607b      	str	r3, [r7, #4]
      break;
 800190c:	e029      	b.n	8001962 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800190e:	f7ff fcb1 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8001918:	f7ff fcac 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8001922:	f7ff fcb9 	bl	8001298 <LL_RCC_MSI_GetRange>
 8001926:	4603      	mov	r3, r0
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	e003      	b.n	8001934 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800192c:	f7ff fcc2 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001930:	4603      	mov	r3, r0
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	e010      	b.n	800195e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800193c:	f7ff fc9a 	bl	8001274 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8001946:	f7ff fca7 	bl	8001298 <LL_RCC_MSI_GetRange>
 800194a:	4603      	mov	r3, r0
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	e003      	b.n	8001958 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8001950:	f7ff fcb0 	bl	80012b4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001954:	4603      	mov	r3, r0
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001960:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001962:	f7ff fd3f 	bl	80013e4 <LL_RCC_PLL_GetDivider>
 8001966:	4603      	mov	r3, r0
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	3301      	adds	r3, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fbb2 f4f3 	udiv	r4, r2, r3
 8001972:	f7ff fd1b 	bl	80013ac <LL_RCC_PLL_GetN>
 8001976:	4603      	mov	r3, r0
 8001978:	fb03 f404 	mul.w	r4, r3, r4
 800197c:	f7ff fd24 	bl	80013c8 <LL_RCC_PLL_GetR>
 8001980:	4603      	mov	r3, r0
 8001982:	0e5b      	lsrs	r3, r3, #25
 8001984:	3301      	adds	r3, #1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	08001c60 	.word	0x08001c60
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <LL_USART_IsEnabled>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <LL_USART_IsEnabled+0x18>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <LL_USART_IsEnabled+0x1a>
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_USART_SetStopBitsLength>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	605a      	str	r2, [r3, #4]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_USART_SetHWFlowCtrl>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_USART_SetBaudRate>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	b087      	sub	sp, #28
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a26:	d11a      	bne.n	8001a5e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	005a      	lsls	r2, r3, #1
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	441a      	add	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	60da      	str	r2, [r3, #12]
}
 8001a5c:	e00a      	b.n	8001a74 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	085a      	lsrs	r2, r3, #1
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	441a      	add	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	60da      	str	r2, [r3, #12]
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff84 	bl	80019a0 <LL_USART_IsEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d15b      	bne.n	8001b56 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <LL_USART_Init+0xe0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	6851      	ldr	r1, [r2, #4]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	6912      	ldr	r2, [r2, #16]
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	6992      	ldr	r2, [r2, #24]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff7c 	bl	80019c6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff89 	bl	80019ec <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a21      	ldr	r2, [pc, #132]	@ (8001b64 <LL_USART_Init+0xe4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d104      	bne.n	8001aec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f7ff fc8c 	bl	8001400 <LL_RCC_GetUSARTClockFreq>
 8001ae8:	60b8      	str	r0, [r7, #8]
 8001aea:	e023      	b.n	8001b34 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <LL_USART_Init+0xe8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d104      	bne.n	8001afe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001af4:	200c      	movs	r0, #12
 8001af6:	f7ff fc83 	bl	8001400 <LL_RCC_GetUSARTClockFreq>
 8001afa:	60b8      	str	r0, [r7, #8]
 8001afc:	e01a      	b.n	8001b34 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	@ (8001b6c <LL_USART_Init+0xec>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d104      	bne.n	8001b10 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8001b06:	2030      	movs	r0, #48	@ 0x30
 8001b08:	f7ff fc7a 	bl	8001400 <LL_RCC_GetUSARTClockFreq>
 8001b0c:	60b8      	str	r0, [r7, #8]
 8001b0e:	e011      	b.n	8001b34 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <LL_USART_Init+0xf0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d104      	bne.n	8001b22 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8001b18:	20c0      	movs	r0, #192	@ 0xc0
 8001b1a:	f7ff fd53 	bl	80015c4 <LL_RCC_GetUARTClockFreq>
 8001b1e:	60b8      	str	r0, [r7, #8]
 8001b20:	e008      	b.n	8001b34 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a13      	ldr	r2, [pc, #76]	@ (8001b74 <LL_USART_Init+0xf4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d104      	bne.n	8001b34 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8001b2a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001b2e:	f7ff fd49 	bl	80015c4 <LL_RCC_GetUARTClockFreq>
 8001b32:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff5e 	bl	8001a12 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	efff69f3 	.word	0xefff69f3
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40004800 	.word	0x40004800
 8001b70:	40004c00 	.word	0x40004c00
 8001b74:	40005000 	.word	0x40005000

08001b78 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <LL_InitTick+0x30>)
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <LL_InitTick+0x30>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <LL_InitTick+0x30>)
 8001b98:	2205      	movs	r2, #5
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001bb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffdd 	bl	8001b78 <LL_InitTick>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <LL_SetSystemCoreClock+0x1c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000

08001be8 <__libc_init_array>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	4d0d      	ldr	r5, [pc, #52]	@ (8001c20 <__libc_init_array+0x38>)
 8001bec:	4c0d      	ldr	r4, [pc, #52]	@ (8001c24 <__libc_init_array+0x3c>)
 8001bee:	1b64      	subs	r4, r4, r5
 8001bf0:	10a4      	asrs	r4, r4, #2
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	42a6      	cmp	r6, r4
 8001bf6:	d109      	bne.n	8001c0c <__libc_init_array+0x24>
 8001bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8001c28 <__libc_init_array+0x40>)
 8001bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8001c2c <__libc_init_array+0x44>)
 8001bfc:	f000 f818 	bl	8001c30 <_init>
 8001c00:	1b64      	subs	r4, r4, r5
 8001c02:	10a4      	asrs	r4, r4, #2
 8001c04:	2600      	movs	r6, #0
 8001c06:	42a6      	cmp	r6, r4
 8001c08:	d105      	bne.n	8001c16 <__libc_init_array+0x2e>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c10:	4798      	blx	r3
 8001c12:	3601      	adds	r6, #1
 8001c14:	e7ee      	b.n	8001bf4 <__libc_init_array+0xc>
 8001c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1a:	4798      	blx	r3
 8001c1c:	3601      	adds	r6, #1
 8001c1e:	e7f2      	b.n	8001c06 <__libc_init_array+0x1e>
 8001c20:	08001c90 	.word	0x08001c90
 8001c24:	08001c90 	.word	0x08001c90
 8001c28:	08001c90 	.word	0x08001c90
 8001c2c:	08001c94 	.word	0x08001c94

08001c30 <_init>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	bf00      	nop
 8001c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c36:	bc08      	pop	{r3}
 8001c38:	469e      	mov	lr, r3
 8001c3a:	4770      	bx	lr

08001c3c <_fini>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	bf00      	nop
 8001c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c42:	bc08      	pop	{r3}
 8001c44:	469e      	mov	lr, r3
 8001c46:	4770      	bx	lr
