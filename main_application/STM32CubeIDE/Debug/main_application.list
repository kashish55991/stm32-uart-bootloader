
main_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df0  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800cf80  0800cf80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d08c  0800d08c  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d08c  0800d08c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d094  0800d094  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d094  0800d094  00006094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d098  0800d098  00006098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800d09c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000005c  0800d0f8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800d0f8  000072bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fec4  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f2  00000000  00000000  00016f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00019848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a02  00000000  00000000  0001a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275cc  00000000  00000000  0001af7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011941  00000000  00000000  00042546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eefde  00000000  00000000  00053e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  00142ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0014680c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	2000005c 	.word	0x2000005c
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800cf68 	.word	0x0800cf68

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000060 	.word	0x20000060
 80081cc:	0800cf68 	.word	0x0800cf68

080081d0 <strcmp>:
 80081d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d8:	2a01      	cmp	r2, #1
 80081da:	bf28      	it	cs
 80081dc:	429a      	cmpcs	r2, r3
 80081de:	d0f7      	beq.n	80081d0 <strcmp>
 80081e0:	1ad0      	subs	r0, r2, r3
 80081e2:	4770      	bx	lr

080081e4 <strlen>:
 80081e4:	4603      	mov	r3, r0
 80081e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d1fb      	bne.n	80081e6 <strlen+0x2>
 80081ee:	1a18      	subs	r0, r3, r0
 80081f0:	3801      	subs	r0, #1
 80081f2:	4770      	bx	lr
	...

08008200 <memchr>:
 8008200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008204:	2a10      	cmp	r2, #16
 8008206:	db2b      	blt.n	8008260 <memchr+0x60>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	d008      	beq.n	8008220 <memchr+0x20>
 800820e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008212:	3a01      	subs	r2, #1
 8008214:	428b      	cmp	r3, r1
 8008216:	d02d      	beq.n	8008274 <memchr+0x74>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	b342      	cbz	r2, 8008270 <memchr+0x70>
 800821e:	d1f6      	bne.n	800820e <memchr+0xe>
 8008220:	b4f0      	push	{r4, r5, r6, r7}
 8008222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800822a:	f022 0407 	bic.w	r4, r2, #7
 800822e:	f07f 0700 	mvns.w	r7, #0
 8008232:	2300      	movs	r3, #0
 8008234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008238:	3c08      	subs	r4, #8
 800823a:	ea85 0501 	eor.w	r5, r5, r1
 800823e:	ea86 0601 	eor.w	r6, r6, r1
 8008242:	fa85 f547 	uadd8	r5, r5, r7
 8008246:	faa3 f587 	sel	r5, r3, r7
 800824a:	fa86 f647 	uadd8	r6, r6, r7
 800824e:	faa5 f687 	sel	r6, r5, r7
 8008252:	b98e      	cbnz	r6, 8008278 <memchr+0x78>
 8008254:	d1ee      	bne.n	8008234 <memchr+0x34>
 8008256:	bcf0      	pop	{r4, r5, r6, r7}
 8008258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800825c:	f002 0207 	and.w	r2, r2, #7
 8008260:	b132      	cbz	r2, 8008270 <memchr+0x70>
 8008262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008266:	3a01      	subs	r2, #1
 8008268:	ea83 0301 	eor.w	r3, r3, r1
 800826c:	b113      	cbz	r3, 8008274 <memchr+0x74>
 800826e:	d1f8      	bne.n	8008262 <memchr+0x62>
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	3801      	subs	r0, #1
 8008276:	4770      	bx	lr
 8008278:	2d00      	cmp	r5, #0
 800827a:	bf06      	itte	eq
 800827c:	4635      	moveq	r5, r6
 800827e:	3803      	subeq	r0, #3
 8008280:	3807      	subne	r0, #7
 8008282:	f015 0f01 	tst.w	r5, #1
 8008286:	d107      	bne.n	8008298 <memchr+0x98>
 8008288:	3001      	adds	r0, #1
 800828a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800828e:	bf02      	ittt	eq
 8008290:	3001      	addeq	r0, #1
 8008292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008296:	3001      	addeq	r0, #1
 8008298:	bcf0      	pop	{r4, r5, r6, r7}
 800829a:	3801      	subs	r0, #1
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <__aeabi_uldivmod>:
 80082a0:	b953      	cbnz	r3, 80082b8 <__aeabi_uldivmod+0x18>
 80082a2:	b94a      	cbnz	r2, 80082b8 <__aeabi_uldivmod+0x18>
 80082a4:	2900      	cmp	r1, #0
 80082a6:	bf08      	it	eq
 80082a8:	2800      	cmpeq	r0, #0
 80082aa:	bf1c      	itt	ne
 80082ac:	f04f 31ff 	movne.w	r1, #4294967295
 80082b0:	f04f 30ff 	movne.w	r0, #4294967295
 80082b4:	f000 b988 	b.w	80085c8 <__aeabi_idiv0>
 80082b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082c0:	f000 f806 	bl	80082d0 <__udivmoddi4>
 80082c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr

080082d0 <__udivmoddi4>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	9d08      	ldr	r5, [sp, #32]
 80082d6:	468e      	mov	lr, r1
 80082d8:	4604      	mov	r4, r0
 80082da:	4688      	mov	r8, r1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d14a      	bne.n	8008376 <__udivmoddi4+0xa6>
 80082e0:	428a      	cmp	r2, r1
 80082e2:	4617      	mov	r7, r2
 80082e4:	d962      	bls.n	80083ac <__udivmoddi4+0xdc>
 80082e6:	fab2 f682 	clz	r6, r2
 80082ea:	b14e      	cbz	r6, 8008300 <__udivmoddi4+0x30>
 80082ec:	f1c6 0320 	rsb	r3, r6, #32
 80082f0:	fa01 f806 	lsl.w	r8, r1, r6
 80082f4:	fa20 f303 	lsr.w	r3, r0, r3
 80082f8:	40b7      	lsls	r7, r6
 80082fa:	ea43 0808 	orr.w	r8, r3, r8
 80082fe:	40b4      	lsls	r4, r6
 8008300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008304:	fa1f fc87 	uxth.w	ip, r7
 8008308:	fbb8 f1fe 	udiv	r1, r8, lr
 800830c:	0c23      	lsrs	r3, r4, #16
 800830e:	fb0e 8811 	mls	r8, lr, r1, r8
 8008312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008316:	fb01 f20c 	mul.w	r2, r1, ip
 800831a:	429a      	cmp	r2, r3
 800831c:	d909      	bls.n	8008332 <__udivmoddi4+0x62>
 800831e:	18fb      	adds	r3, r7, r3
 8008320:	f101 30ff 	add.w	r0, r1, #4294967295
 8008324:	f080 80ea 	bcs.w	80084fc <__udivmoddi4+0x22c>
 8008328:	429a      	cmp	r2, r3
 800832a:	f240 80e7 	bls.w	80084fc <__udivmoddi4+0x22c>
 800832e:	3902      	subs	r1, #2
 8008330:	443b      	add	r3, r7
 8008332:	1a9a      	subs	r2, r3, r2
 8008334:	b2a3      	uxth	r3, r4
 8008336:	fbb2 f0fe 	udiv	r0, r2, lr
 800833a:	fb0e 2210 	mls	r2, lr, r0, r2
 800833e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008342:	fb00 fc0c 	mul.w	ip, r0, ip
 8008346:	459c      	cmp	ip, r3
 8008348:	d909      	bls.n	800835e <__udivmoddi4+0x8e>
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	f100 32ff 	add.w	r2, r0, #4294967295
 8008350:	f080 80d6 	bcs.w	8008500 <__udivmoddi4+0x230>
 8008354:	459c      	cmp	ip, r3
 8008356:	f240 80d3 	bls.w	8008500 <__udivmoddi4+0x230>
 800835a:	443b      	add	r3, r7
 800835c:	3802      	subs	r0, #2
 800835e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008362:	eba3 030c 	sub.w	r3, r3, ip
 8008366:	2100      	movs	r1, #0
 8008368:	b11d      	cbz	r5, 8008372 <__udivmoddi4+0xa2>
 800836a:	40f3      	lsrs	r3, r6
 800836c:	2200      	movs	r2, #0
 800836e:	e9c5 3200 	strd	r3, r2, [r5]
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	428b      	cmp	r3, r1
 8008378:	d905      	bls.n	8008386 <__udivmoddi4+0xb6>
 800837a:	b10d      	cbz	r5, 8008380 <__udivmoddi4+0xb0>
 800837c:	e9c5 0100 	strd	r0, r1, [r5]
 8008380:	2100      	movs	r1, #0
 8008382:	4608      	mov	r0, r1
 8008384:	e7f5      	b.n	8008372 <__udivmoddi4+0xa2>
 8008386:	fab3 f183 	clz	r1, r3
 800838a:	2900      	cmp	r1, #0
 800838c:	d146      	bne.n	800841c <__udivmoddi4+0x14c>
 800838e:	4573      	cmp	r3, lr
 8008390:	d302      	bcc.n	8008398 <__udivmoddi4+0xc8>
 8008392:	4282      	cmp	r2, r0
 8008394:	f200 8105 	bhi.w	80085a2 <__udivmoddi4+0x2d2>
 8008398:	1a84      	subs	r4, r0, r2
 800839a:	eb6e 0203 	sbc.w	r2, lr, r3
 800839e:	2001      	movs	r0, #1
 80083a0:	4690      	mov	r8, r2
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	d0e5      	beq.n	8008372 <__udivmoddi4+0xa2>
 80083a6:	e9c5 4800 	strd	r4, r8, [r5]
 80083aa:	e7e2      	b.n	8008372 <__udivmoddi4+0xa2>
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	f000 8090 	beq.w	80084d2 <__udivmoddi4+0x202>
 80083b2:	fab2 f682 	clz	r6, r2
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	f040 80a4 	bne.w	8008504 <__udivmoddi4+0x234>
 80083bc:	1a8a      	subs	r2, r1, r2
 80083be:	0c03      	lsrs	r3, r0, #16
 80083c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80083c4:	b280      	uxth	r0, r0
 80083c6:	b2bc      	uxth	r4, r7
 80083c8:	2101      	movs	r1, #1
 80083ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80083ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80083d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083d6:	fb04 f20c 	mul.w	r2, r4, ip
 80083da:	429a      	cmp	r2, r3
 80083dc:	d907      	bls.n	80083ee <__udivmoddi4+0x11e>
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80083e4:	d202      	bcs.n	80083ec <__udivmoddi4+0x11c>
 80083e6:	429a      	cmp	r2, r3
 80083e8:	f200 80e0 	bhi.w	80085ac <__udivmoddi4+0x2dc>
 80083ec:	46c4      	mov	ip, r8
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80083f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80083f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80083fc:	fb02 f404 	mul.w	r4, r2, r4
 8008400:	429c      	cmp	r4, r3
 8008402:	d907      	bls.n	8008414 <__udivmoddi4+0x144>
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	f102 30ff 	add.w	r0, r2, #4294967295
 800840a:	d202      	bcs.n	8008412 <__udivmoddi4+0x142>
 800840c:	429c      	cmp	r4, r3
 800840e:	f200 80ca 	bhi.w	80085a6 <__udivmoddi4+0x2d6>
 8008412:	4602      	mov	r2, r0
 8008414:	1b1b      	subs	r3, r3, r4
 8008416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800841a:	e7a5      	b.n	8008368 <__udivmoddi4+0x98>
 800841c:	f1c1 0620 	rsb	r6, r1, #32
 8008420:	408b      	lsls	r3, r1
 8008422:	fa22 f706 	lsr.w	r7, r2, r6
 8008426:	431f      	orrs	r7, r3
 8008428:	fa0e f401 	lsl.w	r4, lr, r1
 800842c:	fa20 f306 	lsr.w	r3, r0, r6
 8008430:	fa2e fe06 	lsr.w	lr, lr, r6
 8008434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008438:	4323      	orrs	r3, r4
 800843a:	fa00 f801 	lsl.w	r8, r0, r1
 800843e:	fa1f fc87 	uxth.w	ip, r7
 8008442:	fbbe f0f9 	udiv	r0, lr, r9
 8008446:	0c1c      	lsrs	r4, r3, #16
 8008448:	fb09 ee10 	mls	lr, r9, r0, lr
 800844c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008450:	fb00 fe0c 	mul.w	lr, r0, ip
 8008454:	45a6      	cmp	lr, r4
 8008456:	fa02 f201 	lsl.w	r2, r2, r1
 800845a:	d909      	bls.n	8008470 <__udivmoddi4+0x1a0>
 800845c:	193c      	adds	r4, r7, r4
 800845e:	f100 3aff 	add.w	sl, r0, #4294967295
 8008462:	f080 809c 	bcs.w	800859e <__udivmoddi4+0x2ce>
 8008466:	45a6      	cmp	lr, r4
 8008468:	f240 8099 	bls.w	800859e <__udivmoddi4+0x2ce>
 800846c:	3802      	subs	r0, #2
 800846e:	443c      	add	r4, r7
 8008470:	eba4 040e 	sub.w	r4, r4, lr
 8008474:	fa1f fe83 	uxth.w	lr, r3
 8008478:	fbb4 f3f9 	udiv	r3, r4, r9
 800847c:	fb09 4413 	mls	r4, r9, r3, r4
 8008480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008484:	fb03 fc0c 	mul.w	ip, r3, ip
 8008488:	45a4      	cmp	ip, r4
 800848a:	d908      	bls.n	800849e <__udivmoddi4+0x1ce>
 800848c:	193c      	adds	r4, r7, r4
 800848e:	f103 3eff 	add.w	lr, r3, #4294967295
 8008492:	f080 8082 	bcs.w	800859a <__udivmoddi4+0x2ca>
 8008496:	45a4      	cmp	ip, r4
 8008498:	d97f      	bls.n	800859a <__udivmoddi4+0x2ca>
 800849a:	3b02      	subs	r3, #2
 800849c:	443c      	add	r4, r7
 800849e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80084a2:	eba4 040c 	sub.w	r4, r4, ip
 80084a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80084aa:	4564      	cmp	r4, ip
 80084ac:	4673      	mov	r3, lr
 80084ae:	46e1      	mov	r9, ip
 80084b0:	d362      	bcc.n	8008578 <__udivmoddi4+0x2a8>
 80084b2:	d05f      	beq.n	8008574 <__udivmoddi4+0x2a4>
 80084b4:	b15d      	cbz	r5, 80084ce <__udivmoddi4+0x1fe>
 80084b6:	ebb8 0203 	subs.w	r2, r8, r3
 80084ba:	eb64 0409 	sbc.w	r4, r4, r9
 80084be:	fa04 f606 	lsl.w	r6, r4, r6
 80084c2:	fa22 f301 	lsr.w	r3, r2, r1
 80084c6:	431e      	orrs	r6, r3
 80084c8:	40cc      	lsrs	r4, r1
 80084ca:	e9c5 6400 	strd	r6, r4, [r5]
 80084ce:	2100      	movs	r1, #0
 80084d0:	e74f      	b.n	8008372 <__udivmoddi4+0xa2>
 80084d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80084d6:	0c01      	lsrs	r1, r0, #16
 80084d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80084dc:	b280      	uxth	r0, r0
 80084de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80084e2:	463b      	mov	r3, r7
 80084e4:	4638      	mov	r0, r7
 80084e6:	463c      	mov	r4, r7
 80084e8:	46b8      	mov	r8, r7
 80084ea:	46be      	mov	lr, r7
 80084ec:	2620      	movs	r6, #32
 80084ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80084f2:	eba2 0208 	sub.w	r2, r2, r8
 80084f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80084fa:	e766      	b.n	80083ca <__udivmoddi4+0xfa>
 80084fc:	4601      	mov	r1, r0
 80084fe:	e718      	b.n	8008332 <__udivmoddi4+0x62>
 8008500:	4610      	mov	r0, r2
 8008502:	e72c      	b.n	800835e <__udivmoddi4+0x8e>
 8008504:	f1c6 0220 	rsb	r2, r6, #32
 8008508:	fa2e f302 	lsr.w	r3, lr, r2
 800850c:	40b7      	lsls	r7, r6
 800850e:	40b1      	lsls	r1, r6
 8008510:	fa20 f202 	lsr.w	r2, r0, r2
 8008514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008518:	430a      	orrs	r2, r1
 800851a:	fbb3 f8fe 	udiv	r8, r3, lr
 800851e:	b2bc      	uxth	r4, r7
 8008520:	fb0e 3318 	mls	r3, lr, r8, r3
 8008524:	0c11      	lsrs	r1, r2, #16
 8008526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800852a:	fb08 f904 	mul.w	r9, r8, r4
 800852e:	40b0      	lsls	r0, r6
 8008530:	4589      	cmp	r9, r1
 8008532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008536:	b280      	uxth	r0, r0
 8008538:	d93e      	bls.n	80085b8 <__udivmoddi4+0x2e8>
 800853a:	1879      	adds	r1, r7, r1
 800853c:	f108 3cff 	add.w	ip, r8, #4294967295
 8008540:	d201      	bcs.n	8008546 <__udivmoddi4+0x276>
 8008542:	4589      	cmp	r9, r1
 8008544:	d81f      	bhi.n	8008586 <__udivmoddi4+0x2b6>
 8008546:	eba1 0109 	sub.w	r1, r1, r9
 800854a:	fbb1 f9fe 	udiv	r9, r1, lr
 800854e:	fb09 f804 	mul.w	r8, r9, r4
 8008552:	fb0e 1119 	mls	r1, lr, r9, r1
 8008556:	b292      	uxth	r2, r2
 8008558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800855c:	4542      	cmp	r2, r8
 800855e:	d229      	bcs.n	80085b4 <__udivmoddi4+0x2e4>
 8008560:	18ba      	adds	r2, r7, r2
 8008562:	f109 31ff 	add.w	r1, r9, #4294967295
 8008566:	d2c4      	bcs.n	80084f2 <__udivmoddi4+0x222>
 8008568:	4542      	cmp	r2, r8
 800856a:	d2c2      	bcs.n	80084f2 <__udivmoddi4+0x222>
 800856c:	f1a9 0102 	sub.w	r1, r9, #2
 8008570:	443a      	add	r2, r7
 8008572:	e7be      	b.n	80084f2 <__udivmoddi4+0x222>
 8008574:	45f0      	cmp	r8, lr
 8008576:	d29d      	bcs.n	80084b4 <__udivmoddi4+0x1e4>
 8008578:	ebbe 0302 	subs.w	r3, lr, r2
 800857c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008580:	3801      	subs	r0, #1
 8008582:	46e1      	mov	r9, ip
 8008584:	e796      	b.n	80084b4 <__udivmoddi4+0x1e4>
 8008586:	eba7 0909 	sub.w	r9, r7, r9
 800858a:	4449      	add	r1, r9
 800858c:	f1a8 0c02 	sub.w	ip, r8, #2
 8008590:	fbb1 f9fe 	udiv	r9, r1, lr
 8008594:	fb09 f804 	mul.w	r8, r9, r4
 8008598:	e7db      	b.n	8008552 <__udivmoddi4+0x282>
 800859a:	4673      	mov	r3, lr
 800859c:	e77f      	b.n	800849e <__udivmoddi4+0x1ce>
 800859e:	4650      	mov	r0, sl
 80085a0:	e766      	b.n	8008470 <__udivmoddi4+0x1a0>
 80085a2:	4608      	mov	r0, r1
 80085a4:	e6fd      	b.n	80083a2 <__udivmoddi4+0xd2>
 80085a6:	443b      	add	r3, r7
 80085a8:	3a02      	subs	r2, #2
 80085aa:	e733      	b.n	8008414 <__udivmoddi4+0x144>
 80085ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80085b0:	443b      	add	r3, r7
 80085b2:	e71c      	b.n	80083ee <__udivmoddi4+0x11e>
 80085b4:	4649      	mov	r1, r9
 80085b6:	e79c      	b.n	80084f2 <__udivmoddi4+0x222>
 80085b8:	eba1 0109 	sub.w	r1, r1, r9
 80085bc:	46c4      	mov	ip, r8
 80085be:	fbb1 f9fe 	udiv	r9, r1, lr
 80085c2:	fb09 f804 	mul.w	r8, r9, r4
 80085c6:	e7c4      	b.n	8008552 <__udivmoddi4+0x282>

080085c8 <__aeabi_idiv0>:
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop

080085cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	@ 0x28
 80085d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d2:	f107 0314 	add.w	r3, r7, #20
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	609a      	str	r2, [r3, #8]
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008690 <MX_GPIO_Init+0xc4>)
 80085e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008690 <MX_GPIO_Init+0xc4>)
 80085e8:	f043 0304 	orr.w	r3, r3, #4
 80085ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085ee:	4b28      	ldr	r3, [pc, #160]	@ (8008690 <MX_GPIO_Init+0xc4>)
 80085f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80085fa:	4b25      	ldr	r3, [pc, #148]	@ (8008690 <MX_GPIO_Init+0xc4>)
 80085fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085fe:	4a24      	ldr	r2, [pc, #144]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008606:	4b22      	ldr	r3, [pc, #136]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800860a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008612:	4b1f      	ldr	r3, [pc, #124]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008616:	4a1e      	ldr	r2, [pc, #120]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800861e:	4b1c      	ldr	r3, [pc, #112]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800862a:	4b19      	ldr	r3, [pc, #100]	@ (8008690 <MX_GPIO_Init+0xc4>)
 800862c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800862e:	4a18      	ldr	r2, [pc, #96]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008630:	f043 0302 	orr.w	r3, r3, #2
 8008634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008636:	4b16      	ldr	r3, [pc, #88]	@ (8008690 <MX_GPIO_Init+0xc4>)
 8008638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	607b      	str	r3, [r7, #4]
 8008640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008642:	2200      	movs	r2, #0
 8008644:	2120      	movs	r1, #32
 8008646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800864a:	f000 ff71 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800864e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008654:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8008658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800865e:	f107 0314 	add.w	r3, r7, #20
 8008662:	4619      	mov	r1, r3
 8008664:	480b      	ldr	r0, [pc, #44]	@ (8008694 <MX_GPIO_Init+0xc8>)
 8008666:	f000 fdb9 	bl	80091dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800866a:	2320      	movs	r3, #32
 800866c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800866e:	2301      	movs	r3, #1
 8008670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008672:	2300      	movs	r3, #0
 8008674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008676:	2300      	movs	r3, #0
 8008678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800867a:	f107 0314 	add.w	r3, r7, #20
 800867e:	4619      	mov	r1, r3
 8008680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008684:	f000 fdaa 	bl	80091dc <HAL_GPIO_Init>

}
 8008688:	bf00      	nop
 800868a:	3728      	adds	r7, #40	@ 0x28
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40021000 	.word	0x40021000
 8008694:	48000800 	.word	0x48000800

08008698 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800869c:	f3bf 8f4f 	dsb	sy
}
 80086a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80086a2:	4b06      	ldr	r3, [pc, #24]	@ (80086bc <__NVIC_SystemReset+0x24>)
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80086aa:	4904      	ldr	r1, [pc, #16]	@ (80086bc <__NVIC_SystemReset+0x24>)
 80086ac:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <__NVIC_SystemReset+0x28>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80086b2:	f3bf 8f4f 	dsb	sy
}
 80086b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80086b8:	bf00      	nop
 80086ba:	e7fd      	b.n	80086b8 <__NVIC_SystemReset+0x20>
 80086bc:	e000ed00 	.word	0xe000ed00
 80086c0:	05fa0004 	.word	0x05fa0004

080086c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b0a0      	sub	sp, #128	@ 0x80
 80086c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80086ca:	f000 fb7b 	bl	8008dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80086ce:	f000 f825 	bl	800871c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80086d2:	f7ff ff7b 	bl	80085cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80086d6:	f000 faa5 	bl	8008c24 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80086da:	f000 f98d 	bl	80089f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80086de:	2201      	movs	r2, #1
 80086e0:	490b      	ldr	r1, [pc, #44]	@ (8008710 <main+0x4c>)
 80086e2:	480c      	ldr	r0, [pc, #48]	@ (8008714 <main+0x50>)
 80086e4:	f002 fc7a 	bl	800afdc <HAL_UART_Receive_IT>

  DBG_PRINTF("\r\n STM32 UART BOOTLADER\r\n");
 80086e8:	463b      	mov	r3, r7
 80086ea:	4a0b      	ldr	r2, [pc, #44]	@ (8008718 <main+0x54>)
 80086ec:	2180      	movs	r1, #128	@ 0x80
 80086ee:	4618      	mov	r0, r3
 80086f0:	f003 ff86 	bl	800c600 <sniprintf>
 80086f4:	463b      	mov	r3, r7
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fd74 	bl	80081e4 <strlen>
 80086fc:	4603      	mov	r3, r0
 80086fe:	b29a      	uxth	r2, r3
 8008700:	4639      	mov	r1, r7
 8008702:	f04f 33ff 	mov.w	r3, #4294967295
 8008706:	4803      	ldr	r0, [pc, #12]	@ (8008714 <main+0x50>)
 8008708:	f002 fbdf 	bl	800aeca <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800870c:	bf00      	nop
 800870e:	e7fd      	b.n	800870c <main+0x48>
 8008710:	20000078 	.word	0x20000078
 8008714:	200000e8 	.word	0x200000e8
 8008718:	0800cf80 	.word	0x0800cf80

0800871c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b096      	sub	sp, #88	@ 0x58
 8008720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008722:	f107 0314 	add.w	r3, r7, #20
 8008726:	2244      	movs	r2, #68	@ 0x44
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f003 ff9e 	bl	800c66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008730:	463b      	mov	r3, r7
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	605a      	str	r2, [r3, #4]
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	60da      	str	r2, [r3, #12]
 800873c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800873e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008742:	f000 ff2b 	bl	800959c <HAL_PWREx_ControlVoltageScaling>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800874c:	f000 f94e 	bl	80089ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008750:	230a      	movs	r3, #10
 8008752:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008758:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800875a:	2310      	movs	r3, #16
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800875e:	2301      	movs	r3, #1
 8008760:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008762:	2302      	movs	r3, #2
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008766:	2302      	movs	r3, #2
 8008768:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800876a:	2301      	movs	r3, #1
 800876c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800876e:	230a      	movs	r3, #10
 8008770:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008772:	2307      	movs	r3, #7
 8008774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008776:	2302      	movs	r3, #2
 8008778:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800877a:	2302      	movs	r3, #2
 800877c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800877e:	f107 0314 	add.w	r3, r7, #20
 8008782:	4618      	mov	r0, r3
 8008784:	f000 ff60 	bl	8009648 <HAL_RCC_OscConfig>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800878e:	f000 f92d 	bl	80089ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008792:	230f      	movs	r3, #15
 8008794:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008796:	2303      	movs	r3, #3
 8008798:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80087a2:	2300      	movs	r3, #0
 80087a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80087a6:	463b      	mov	r3, r7
 80087a8:	2104      	movs	r1, #4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fb28 	bl	8009e00 <HAL_RCC_ClockConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80087b6:	f000 f919 	bl	80089ec <Error_Handler>
  }
}
 80087ba:	bf00      	nop
 80087bc:	3758      	adds	r7, #88	@ 0x58
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// USART receive complete callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a19      	ldr	r2, [pc, #100]	@ (8008838 <HAL_UART_RxCpltCallback+0x74>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d12c      	bne.n	8008830 <HAL_UART_RxCpltCallback+0x6c>
    {
        if (rx_byte == '\r' || rx_byte == '\n') {
 80087d6:	4b19      	ldr	r3, [pc, #100]	@ (800883c <HAL_UART_RxCpltCallback+0x78>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b0d      	cmp	r3, #13
 80087dc:	d003      	beq.n	80087e6 <HAL_UART_RxCpltCallback+0x22>
 80087de:	4b17      	ldr	r3, [pc, #92]	@ (800883c <HAL_UART_RxCpltCallback+0x78>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b0a      	cmp	r3, #10
 80087e4:	d110      	bne.n	8008808 <HAL_UART_RxCpltCallback+0x44>
            if (cmd_index > 0) {  // Only handle if command isn't empty
 80087e6:	4b16      	ldr	r3, [pc, #88]	@ (8008840 <HAL_UART_RxCpltCallback+0x7c>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <HAL_UART_RxCpltCallback+0x62>
                cmd_buffer[cmd_index] = '\0';
 80087ee:	4b14      	ldr	r3, [pc, #80]	@ (8008840 <HAL_UART_RxCpltCallback+0x7c>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	4b13      	ldr	r3, [pc, #76]	@ (8008844 <HAL_UART_RxCpltCallback+0x80>)
 80087f6:	2100      	movs	r1, #0
 80087f8:	5499      	strb	r1, [r3, r2]
                handle_at_command(cmd_buffer);
 80087fa:	4812      	ldr	r0, [pc, #72]	@ (8008844 <HAL_UART_RxCpltCallback+0x80>)
 80087fc:	f000 f826 	bl	800884c <handle_at_command>
                cmd_index = 0;
 8008800:	4b0f      	ldr	r3, [pc, #60]	@ (8008840 <HAL_UART_RxCpltCallback+0x7c>)
 8008802:	2200      	movs	r2, #0
 8008804:	701a      	strb	r2, [r3, #0]
            if (cmd_index > 0) {  // Only handle if command isn't empty
 8008806:	e00e      	b.n	8008826 <HAL_UART_RxCpltCallback+0x62>
            }
        }
        else if (cmd_index < CMD_BUFFER_SIZE - 1) {
 8008808:	4b0d      	ldr	r3, [pc, #52]	@ (8008840 <HAL_UART_RxCpltCallback+0x7c>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b3e      	cmp	r3, #62	@ 0x3e
 800880e:	d80a      	bhi.n	8008826 <HAL_UART_RxCpltCallback+0x62>
            cmd_buffer[cmd_index++] = rx_byte;
 8008810:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <HAL_UART_RxCpltCallback+0x7c>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	b2d1      	uxtb	r1, r2
 8008818:	4a09      	ldr	r2, [pc, #36]	@ (8008840 <HAL_UART_RxCpltCallback+0x7c>)
 800881a:	7011      	strb	r1, [r2, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <HAL_UART_RxCpltCallback+0x78>)
 8008820:	7819      	ldrb	r1, [r3, #0]
 8008822:	4b08      	ldr	r3, [pc, #32]	@ (8008844 <HAL_UART_RxCpltCallback+0x80>)
 8008824:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);  // Restart reception
 8008826:	2201      	movs	r2, #1
 8008828:	4904      	ldr	r1, [pc, #16]	@ (800883c <HAL_UART_RxCpltCallback+0x78>)
 800882a:	4807      	ldr	r0, [pc, #28]	@ (8008848 <HAL_UART_RxCpltCallback+0x84>)
 800882c:	f002 fbd6 	bl	800afdc <HAL_UART_Receive_IT>
    }
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40004400 	.word	0x40004400
 800883c:	20000078 	.word	0x20000078
 8008840:	200000bc 	.word	0x200000bc
 8008844:	2000007c 	.word	0x2000007c
 8008848:	200000e8 	.word	0x200000e8

0800884c <handle_at_command>:

void handle_at_command(const char *cmd)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b0a2      	sub	sp, #136	@ 0x88
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
    switch (at_state)
 8008854:	4b59      	ldr	r3, [pc, #356]	@ (80089bc <handle_at_command+0x170>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <handle_at_command+0x16>
 800885c:	2b01      	cmp	r3, #1
 800885e:	d021      	beq.n	80088a4 <handle_at_command+0x58>
 8008860:	e0a9      	b.n	80089b6 <handle_at_command+0x16a>
    {
    case STATE_IDLE:
        if (strcmp(cmd, "+++") == 0)
 8008862:	4957      	ldr	r1, [pc, #348]	@ (80089c0 <handle_at_command+0x174>)
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fcb3 	bl	80081d0 <strcmp>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	f040 80a1 	bne.w	80089b4 <handle_at_command+0x168>
        {
            DBG_PRINTF("\r\n[AT MODE]\r\n");
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4a53      	ldr	r2, [pc, #332]	@ (80089c4 <handle_at_command+0x178>)
 8008878:	2180      	movs	r1, #128	@ 0x80
 800887a:	4618      	mov	r0, r3
 800887c:	f003 fec0 	bl	800c600 <sniprintf>
 8008880:	f107 0308 	add.w	r3, r7, #8
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fcad 	bl	80081e4 <strlen>
 800888a:	4603      	mov	r3, r0
 800888c:	b29a      	uxth	r2, r3
 800888e:	f107 0108 	add.w	r1, r7, #8
 8008892:	f04f 33ff 	mov.w	r3, #4294967295
 8008896:	484c      	ldr	r0, [pc, #304]	@ (80089c8 <handle_at_command+0x17c>)
 8008898:	f002 fb17 	bl	800aeca <HAL_UART_Transmit>
            at_state = STATE_AT_MODE;
 800889c:	4b47      	ldr	r3, [pc, #284]	@ (80089bc <handle_at_command+0x170>)
 800889e:	2201      	movs	r2, #1
 80088a0:	701a      	strb	r2, [r3, #0]
        }
        return;  // <---- KEY: Don't fall into default ERROR
 80088a2:	e087      	b.n	80089b4 <handle_at_command+0x168>

    case STATE_AT_MODE:
        if (strcmp(cmd, "AT") == 0)
 80088a4:	4949      	ldr	r1, [pc, #292]	@ (80089cc <handle_at_command+0x180>)
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fc92 	bl	80081d0 <strcmp>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d115      	bne.n	80088de <handle_at_command+0x92>
        {
            DBG_PRINTF("OK\r\n");
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4a46      	ldr	r2, [pc, #280]	@ (80089d0 <handle_at_command+0x184>)
 80088b8:	2180      	movs	r1, #128	@ 0x80
 80088ba:	4618      	mov	r0, r3
 80088bc:	f003 fea0 	bl	800c600 <sniprintf>
 80088c0:	f107 0308 	add.w	r3, r7, #8
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fc8d 	bl	80081e4 <strlen>
 80088ca:	4603      	mov	r3, r0
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f107 0108 	add.w	r1, r7, #8
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	483c      	ldr	r0, [pc, #240]	@ (80089c8 <handle_at_command+0x17c>)
 80088d8:	f002 faf7 	bl	800aeca <HAL_UART_Transmit>
        }
        else
        {
            DBG_PRINTF("ERROR\r\n");
        }
        break;
 80088dc:	e06b      	b.n	80089b6 <handle_at_command+0x16a>
        else if (strcmp(cmd, "AT+BOOT") == 0)
 80088de:	493d      	ldr	r1, [pc, #244]	@ (80089d4 <handle_at_command+0x188>)
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fc75 	bl	80081d0 <strcmp>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d12d      	bne.n	8008948 <handle_at_command+0xfc>
            DBG_PRINTF("Bootloader...\r\n");
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	4a39      	ldr	r2, [pc, #228]	@ (80089d8 <handle_at_command+0x18c>)
 80088f2:	2180      	movs	r1, #128	@ 0x80
 80088f4:	4618      	mov	r0, r3
 80088f6:	f003 fe83 	bl	800c600 <sniprintf>
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fc70 	bl	80081e4 <strlen>
 8008904:	4603      	mov	r3, r0
 8008906:	b29a      	uxth	r2, r3
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	f04f 33ff 	mov.w	r3, #4294967295
 8008910:	482d      	ldr	r0, [pc, #180]	@ (80089c8 <handle_at_command+0x17c>)
 8008912:	f002 fada 	bl	800aeca <HAL_UART_Transmit>
            set_update_flag();
 8008916:	f000 f95d 	bl	8008bd4 <set_update_flag>
            DBG_PRINTF("Rebooting MCU now...\r\n");
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	4a2f      	ldr	r2, [pc, #188]	@ (80089dc <handle_at_command+0x190>)
 8008920:	2180      	movs	r1, #128	@ 0x80
 8008922:	4618      	mov	r0, r3
 8008924:	f003 fe6c 	bl	800c600 <sniprintf>
 8008928:	f107 0308 	add.w	r3, r7, #8
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff fc59 	bl	80081e4 <strlen>
 8008932:	4603      	mov	r3, r0
 8008934:	b29a      	uxth	r2, r3
 8008936:	f107 0108 	add.w	r1, r7, #8
 800893a:	f04f 33ff 	mov.w	r3, #4294967295
 800893e:	4822      	ldr	r0, [pc, #136]	@ (80089c8 <handle_at_command+0x17c>)
 8008940:	f002 fac3 	bl	800aeca <HAL_UART_Transmit>
            NVIC_SystemReset();
 8008944:	f7ff fea8 	bl	8008698 <__NVIC_SystemReset>
        else if (strcmp(cmd, "AT+EXIT") == 0)
 8008948:	4925      	ldr	r1, [pc, #148]	@ (80089e0 <handle_at_command+0x194>)
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fc40 	bl	80081d0 <strcmp>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d118      	bne.n	8008988 <handle_at_command+0x13c>
            DBG_PRINTF("[EXIT AT MODE]\r\n");
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	4a22      	ldr	r2, [pc, #136]	@ (80089e4 <handle_at_command+0x198>)
 800895c:	2180      	movs	r1, #128	@ 0x80
 800895e:	4618      	mov	r0, r3
 8008960:	f003 fe4e 	bl	800c600 <sniprintf>
 8008964:	f107 0308 	add.w	r3, r7, #8
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fc3b 	bl	80081e4 <strlen>
 800896e:	4603      	mov	r3, r0
 8008970:	b29a      	uxth	r2, r3
 8008972:	f107 0108 	add.w	r1, r7, #8
 8008976:	f04f 33ff 	mov.w	r3, #4294967295
 800897a:	4813      	ldr	r0, [pc, #76]	@ (80089c8 <handle_at_command+0x17c>)
 800897c:	f002 faa5 	bl	800aeca <HAL_UART_Transmit>
            at_state = STATE_IDLE;
 8008980:	4b0e      	ldr	r3, [pc, #56]	@ (80089bc <handle_at_command+0x170>)
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
        break;
 8008986:	e016      	b.n	80089b6 <handle_at_command+0x16a>
            DBG_PRINTF("ERROR\r\n");
 8008988:	f107 0308 	add.w	r3, r7, #8
 800898c:	4a16      	ldr	r2, [pc, #88]	@ (80089e8 <handle_at_command+0x19c>)
 800898e:	2180      	movs	r1, #128	@ 0x80
 8008990:	4618      	mov	r0, r3
 8008992:	f003 fe35 	bl	800c600 <sniprintf>
 8008996:	f107 0308 	add.w	r3, r7, #8
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff fc22 	bl	80081e4 <strlen>
 80089a0:	4603      	mov	r3, r0
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ac:	4806      	ldr	r0, [pc, #24]	@ (80089c8 <handle_at_command+0x17c>)
 80089ae:	f002 fa8c 	bl	800aeca <HAL_UART_Transmit>
        break;
 80089b2:	e000      	b.n	80089b6 <handle_at_command+0x16a>
        return;  // <---- KEY: Don't fall into default ERROR
 80089b4:	bf00      	nop
    }
}
 80089b6:	3788      	adds	r7, #136	@ 0x88
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	200000bd 	.word	0x200000bd
 80089c0:	0800cf9c 	.word	0x0800cf9c
 80089c4:	0800cfa0 	.word	0x0800cfa0
 80089c8:	200000e8 	.word	0x200000e8
 80089cc:	0800cfb0 	.word	0x0800cfb0
 80089d0:	0800cfb4 	.word	0x0800cfb4
 80089d4:	0800cfbc 	.word	0x0800cfbc
 80089d8:	0800cfc4 	.word	0x0800cfc4
 80089dc:	0800cfd4 	.word	0x0800cfd4
 80089e0:	0800cfec 	.word	0x0800cfec
 80089e4:	0800cff4 	.word	0x0800cff4
 80089e8:	0800d008 	.word	0x0800d008

080089ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80089f0:	b672      	cpsid	i
}
 80089f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <Error_Handler+0x8>

080089f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80089fc:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <MX_RTC_Init+0x48>)
 80089fe:	4a11      	ldr	r2, [pc, #68]	@ (8008a44 <MX_RTC_Init+0x4c>)
 8008a00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008a02:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008a08:	4b0d      	ldr	r3, [pc, #52]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a0a:	227f      	movs	r2, #127	@ 0x7f
 8008a0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a10:	22ff      	movs	r2, #255	@ 0xff
 8008a12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008a14:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008a1a:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008a2c:	4804      	ldr	r0, [pc, #16]	@ (8008a40 <MX_RTC_Init+0x48>)
 8008a2e:	f002 f8c7 	bl	800abc0 <HAL_RTC_Init>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8008a38:	f7ff ffd8 	bl	80089ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008a3c:	bf00      	nop
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200000c0 	.word	0x200000c0
 8008a44:	40002800 	.word	0x40002800

08008a48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b0a4      	sub	sp, #144	@ 0x90
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a50:	f107 0308 	add.w	r3, r7, #8
 8008a54:	2288      	movs	r2, #136	@ 0x88
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f003 fe07 	bl	800c66c <memset>
  if(rtcHandle->Instance==RTC)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a10      	ldr	r2, [pc, #64]	@ (8008aa4 <HAL_RTC_MspInit+0x5c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d118      	bne.n	8008a9a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008a6c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 fbe4 	bl	800a248 <HAL_RCCEx_PeriphCLKConfig>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008a86:	f7ff ffb1 	bl	80089ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008a8a:	4b07      	ldr	r3, [pc, #28]	@ (8008aa8 <HAL_RTC_MspInit+0x60>)
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a90:	4a05      	ldr	r2, [pc, #20]	@ (8008aa8 <HAL_RTC_MspInit+0x60>)
 8008a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3790      	adds	r7, #144	@ 0x90
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40002800 	.word	0x40002800
 8008aa8:	40021000 	.word	0x40021000

08008aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8008af0 <HAL_MspInit+0x44>)
 8008ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8008af0 <HAL_MspInit+0x44>)
 8008ab8:	f043 0301 	orr.w	r3, r3, #1
 8008abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8008abe:	4b0c      	ldr	r3, [pc, #48]	@ (8008af0 <HAL_MspInit+0x44>)
 8008ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008aca:	4b09      	ldr	r3, [pc, #36]	@ (8008af0 <HAL_MspInit+0x44>)
 8008acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ace:	4a08      	ldr	r2, [pc, #32]	@ (8008af0 <HAL_MspInit+0x44>)
 8008ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ad6:	4b06      	ldr	r3, [pc, #24]	@ (8008af0 <HAL_MspInit+0x44>)
 8008ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40021000 	.word	0x40021000

08008af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <NMI_Handler+0x4>

08008afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b00:	bf00      	nop
 8008b02:	e7fd      	b.n	8008b00 <HardFault_Handler+0x4>

08008b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b08:	bf00      	nop
 8008b0a:	e7fd      	b.n	8008b08 <MemManage_Handler+0x4>

08008b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b10:	bf00      	nop
 8008b12:	e7fd      	b.n	8008b10 <BusFault_Handler+0x4>

08008b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <UsageFault_Handler+0x4>

08008b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b20:	bf00      	nop
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b3c:	bf00      	nop
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b4a:	f000 f997 	bl	8008e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b4e:	bf00      	nop
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008b58:	4802      	ldr	r0, [pc, #8]	@ (8008b64 <USART2_IRQHandler+0x10>)
 8008b5a:	f002 fa8b 	bl	800b074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008b5e:	bf00      	nop
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200000e8 	.word	0x200000e8

08008b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b70:	4a14      	ldr	r2, [pc, #80]	@ (8008bc4 <_sbrk+0x5c>)
 8008b72:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <_sbrk+0x60>)
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b7c:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <_sbrk+0x64>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b84:	4b11      	ldr	r3, [pc, #68]	@ (8008bcc <_sbrk+0x64>)
 8008b86:	4a12      	ldr	r2, [pc, #72]	@ (8008bd0 <_sbrk+0x68>)
 8008b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b8a:	4b10      	ldr	r3, [pc, #64]	@ (8008bcc <_sbrk+0x64>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d207      	bcs.n	8008ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b98:	f003 fd70 	bl	800c67c <__errno>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	220c      	movs	r2, #12
 8008ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba6:	e009      	b.n	8008bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008ba8:	4b08      	ldr	r3, [pc, #32]	@ (8008bcc <_sbrk+0x64>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008bae:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <_sbrk+0x64>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4a05      	ldr	r2, [pc, #20]	@ (8008bcc <_sbrk+0x64>)
 8008bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008bba:	68fb      	ldr	r3, [r7, #12]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20018000 	.word	0x20018000
 8008bc8:	00000400 	.word	0x00000400
 8008bcc:	200000e4 	.word	0x200000e4
 8008bd0:	200002c0 	.word	0x200002c0

08008bd4 <set_update_flag>:

#define RTC_UPDATE_FLAG_VALUE   0xDEADBEEF
#define RTC_UPDATE_BKP_REG      RTC_BKP_DR0

void set_update_flag(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
    // Enable access to the backup domain
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bda:	4b0f      	ldr	r3, [pc, #60]	@ (8008c18 <set_update_flag+0x44>)
 8008bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bde:	4a0e      	ldr	r2, [pc, #56]	@ (8008c18 <set_update_flag+0x44>)
 8008be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008be6:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <set_update_flag+0x44>)
 8008be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 8008bf2:	f000 fcb5 	bl	8009560 <HAL_PWR_EnableBkUpAccess>

    // Enable RTC peripheral if not already enabled
    __HAL_RCC_RTC_ENABLE();
 8008bf6:	4b08      	ldr	r3, [pc, #32]	@ (8008c18 <set_update_flag+0x44>)
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfc:	4a06      	ldr	r2, [pc, #24]	@ (8008c18 <set_update_flag+0x44>)
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    // Store update flag into Backup Register 0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_UPDATE_BKP_REG, RTC_UPDATE_FLAG_VALUE);
 8008c06:	4a05      	ldr	r2, [pc, #20]	@ (8008c1c <set_update_flag+0x48>)
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4805      	ldr	r0, [pc, #20]	@ (8008c20 <set_update_flag+0x4c>)
 8008c0c:	f002 f8f6 	bl	800adfc <HAL_RTCEx_BKUPWrite>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40021000 	.word	0x40021000
 8008c1c:	deadbeef 	.word	0xdeadbeef
 8008c20:	200000c0 	.word	0x200000c0

08008c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008c28:	4b14      	ldr	r3, [pc, #80]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c2a:	4a15      	ldr	r2, [pc, #84]	@ (8008c80 <MX_USART2_UART_Init+0x5c>)
 8008c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008c36:	4b11      	ldr	r3, [pc, #68]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c42:	4b0e      	ldr	r3, [pc, #56]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008c48:	4b0c      	ldr	r3, [pc, #48]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c4a:	220c      	movs	r2, #12
 8008c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c54:	4b09      	ldr	r3, [pc, #36]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c5a:	4b08      	ldr	r3, [pc, #32]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c60:	4b06      	ldr	r3, [pc, #24]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008c66:	4805      	ldr	r0, [pc, #20]	@ (8008c7c <MX_USART2_UART_Init+0x58>)
 8008c68:	f002 f8e1 	bl	800ae2e <HAL_UART_Init>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008c72:	f7ff febb 	bl	80089ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008c76:	bf00      	nop
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200000e8 	.word	0x200000e8
 8008c80:	40004400 	.word	0x40004400

08008c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b0ac      	sub	sp, #176	@ 0xb0
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	609a      	str	r2, [r3, #8]
 8008c98:	60da      	str	r2, [r3, #12]
 8008c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c9c:	f107 0314 	add.w	r3, r7, #20
 8008ca0:	2288      	movs	r2, #136	@ 0x88
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f003 fce1 	bl	800c66c <memset>
  if(uartHandle->Instance==USART2)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a25      	ldr	r2, [pc, #148]	@ (8008d44 <HAL_UART_MspInit+0xc0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d143      	bne.n	8008d3c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008cbc:	f107 0314 	add.w	r3, r7, #20
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 fac1 	bl	800a248 <HAL_RCCEx_PeriphCLKConfig>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008ccc:	f7ff fe8e 	bl	80089ec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d48 <HAL_UART_MspInit+0xc4>)
 8008cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d48 <HAL_UART_MspInit+0xc4>)
 8008cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008d48 <HAL_UART_MspInit+0xc4>)
 8008cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ce8:	4b17      	ldr	r3, [pc, #92]	@ (8008d48 <HAL_UART_MspInit+0xc4>)
 8008cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cec:	4a16      	ldr	r2, [pc, #88]	@ (8008d48 <HAL_UART_MspInit+0xc4>)
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cf4:	4b14      	ldr	r3, [pc, #80]	@ (8008d48 <HAL_UART_MspInit+0xc4>)
 8008cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008d00:	230c      	movs	r3, #12
 8008d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d06:	2302      	movs	r3, #2
 8008d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d12:	2303      	movs	r3, #3
 8008d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008d18:	2307      	movs	r3, #7
 8008d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008d22:	4619      	mov	r1, r3
 8008d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008d28:	f000 fa58 	bl	80091dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	2026      	movs	r0, #38	@ 0x26
 8008d32:	f000 f99e 	bl	8009072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008d36:	2026      	movs	r0, #38	@ 0x26
 8008d38:	f000 f9b7 	bl	80090aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	37b0      	adds	r7, #176	@ 0xb0
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40004400 	.word	0x40004400
 8008d48:	40021000 	.word	0x40021000

08008d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008d50:	f000 f826 	bl	8008da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d54:	480c      	ldr	r0, [pc, #48]	@ (8008d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8008d56:	490d      	ldr	r1, [pc, #52]	@ (8008d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008d58:	4a0d      	ldr	r2, [pc, #52]	@ (8008d90 <LoopForever+0xe>)
  movs r3, #0
 8008d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d5c:	e002      	b.n	8008d64 <LoopCopyDataInit>

08008d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d62:	3304      	adds	r3, #4

08008d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d68:	d3f9      	bcc.n	8008d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8008d98 <LoopForever+0x16>)
  movs r3, #0
 8008d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d70:	e001      	b.n	8008d76 <LoopFillZerobss>

08008d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d74:	3204      	adds	r2, #4

08008d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d78:	d3fb      	bcc.n	8008d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008d7a:	f003 fc85 	bl	800c688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d7e:	f7ff fca1 	bl	80086c4 <main>

08008d82 <LoopForever>:

LoopForever:
    b LoopForever
 8008d82:	e7fe      	b.n	8008d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008d84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8008d90:	0800d09c 	.word	0x0800d09c
  ldr r2, =_sbss
 8008d94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8008d98:	200002bc 	.word	0x200002bc

08008d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d9c:	e7fe      	b.n	8008d9c <ADC1_2_IRQHandler>
	...

08008da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008da4:	4b06      	ldr	r3, [pc, #24]	@ (8008dc0 <SystemInit+0x20>)
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008daa:	4a05      	ldr	r2, [pc, #20]	@ (8008dc0 <SystemInit+0x20>)
 8008dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8008db4:	bf00      	nop
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	e000ed00 	.word	0xe000ed00

08008dc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008dce:	4b0c      	ldr	r3, [pc, #48]	@ (8008e00 <HAL_Init+0x3c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8008e00 <HAL_Init+0x3c>)
 8008dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008dda:	2003      	movs	r0, #3
 8008ddc:	f000 f93e 	bl	800905c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008de0:	2000      	movs	r0, #0
 8008de2:	f000 f80f 	bl	8008e04 <HAL_InitTick>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	71fb      	strb	r3, [r7, #7]
 8008df0:	e001      	b.n	8008df6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008df2:	f7ff fe5b 	bl	8008aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008df6:	79fb      	ldrb	r3, [r7, #7]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40022000 	.word	0x40022000

08008e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008e10:	4b17      	ldr	r3, [pc, #92]	@ (8008e70 <HAL_InitTick+0x6c>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d023      	beq.n	8008e60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008e18:	4b16      	ldr	r3, [pc, #88]	@ (8008e74 <HAL_InitTick+0x70>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b14      	ldr	r3, [pc, #80]	@ (8008e70 <HAL_InitTick+0x6c>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f949 	bl	80090c6 <HAL_SYSTICK_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10f      	bne.n	8008e5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b0f      	cmp	r3, #15
 8008e3e:	d809      	bhi.n	8008e54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e40:	2200      	movs	r2, #0
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	f000 f913 	bl	8009072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008e78 <HAL_InitTick+0x74>)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	e007      	b.n	8008e64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e004      	b.n	8008e64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	e001      	b.n	8008e64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000008 	.word	0x20000008
 8008e74:	20000000 	.word	0x20000000
 8008e78:	20000004 	.word	0x20000004

08008e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <HAL_IncTick+0x20>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <HAL_IncTick+0x24>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	4a04      	ldr	r2, [pc, #16]	@ (8008ea0 <HAL_IncTick+0x24>)
 8008e8e:	6013      	str	r3, [r2, #0]
}
 8008e90:	bf00      	nop
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20000008 	.word	0x20000008
 8008ea0:	20000170 	.word	0x20000170

08008ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8008ea8:	4b03      	ldr	r3, [pc, #12]	@ (8008eb8 <HAL_GetTick+0x14>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000170 	.word	0x20000170

08008ebc <__NVIC_SetPriorityGrouping>:
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f00 <__NVIC_SetPriorityGrouping+0x44>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008ed8:	4013      	ands	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008eee:	4a04      	ldr	r2, [pc, #16]	@ (8008f00 <__NVIC_SetPriorityGrouping+0x44>)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	60d3      	str	r3, [r2, #12]
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	e000ed00 	.word	0xe000ed00

08008f04 <__NVIC_GetPriorityGrouping>:
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f08:	4b04      	ldr	r3, [pc, #16]	@ (8008f1c <__NVIC_GetPriorityGrouping+0x18>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	0a1b      	lsrs	r3, r3, #8
 8008f0e:	f003 0307 	and.w	r3, r3, #7
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	e000ed00 	.word	0xe000ed00

08008f20 <__NVIC_EnableIRQ>:
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	db0b      	blt.n	8008f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	f003 021f 	and.w	r2, r3, #31
 8008f38:	4907      	ldr	r1, [pc, #28]	@ (8008f58 <__NVIC_EnableIRQ+0x38>)
 8008f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	2001      	movs	r0, #1
 8008f42:	fa00 f202 	lsl.w	r2, r0, r2
 8008f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	e000e100 	.word	0xe000e100

08008f5c <__NVIC_SetPriority>:
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	db0a      	blt.n	8008f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	490c      	ldr	r1, [pc, #48]	@ (8008fa8 <__NVIC_SetPriority+0x4c>)
 8008f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7a:	0112      	lsls	r2, r2, #4
 8008f7c:	b2d2      	uxtb	r2, r2
 8008f7e:	440b      	add	r3, r1
 8008f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008f84:	e00a      	b.n	8008f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	4908      	ldr	r1, [pc, #32]	@ (8008fac <__NVIC_SetPriority+0x50>)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	3b04      	subs	r3, #4
 8008f94:	0112      	lsls	r2, r2, #4
 8008f96:	b2d2      	uxtb	r2, r2
 8008f98:	440b      	add	r3, r1
 8008f9a:	761a      	strb	r2, [r3, #24]
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	e000e100 	.word	0xe000e100
 8008fac:	e000ed00 	.word	0xe000ed00

08008fb0 <NVIC_EncodePriority>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b089      	sub	sp, #36	@ 0x24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f003 0307 	and.w	r3, r3, #7
 8008fc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	f1c3 0307 	rsb	r3, r3, #7
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	bf28      	it	cs
 8008fce:	2304      	movcs	r3, #4
 8008fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	2b06      	cmp	r3, #6
 8008fd8:	d902      	bls.n	8008fe0 <NVIC_EncodePriority+0x30>
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	3b03      	subs	r3, #3
 8008fde:	e000      	b.n	8008fe2 <NVIC_EncodePriority+0x32>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	43da      	mvns	r2, r3
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	401a      	ands	r2, r3
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8009002:	43d9      	mvns	r1, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009008:	4313      	orrs	r3, r2
}
 800900a:	4618      	mov	r0, r3
 800900c:	3724      	adds	r7, #36	@ 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3b01      	subs	r3, #1
 8009024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009028:	d301      	bcc.n	800902e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800902a:	2301      	movs	r3, #1
 800902c:	e00f      	b.n	800904e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800902e:	4a0a      	ldr	r2, [pc, #40]	@ (8009058 <SysTick_Config+0x40>)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3b01      	subs	r3, #1
 8009034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009036:	210f      	movs	r1, #15
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	f7ff ff8e 	bl	8008f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009040:	4b05      	ldr	r3, [pc, #20]	@ (8009058 <SysTick_Config+0x40>)
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009046:	4b04      	ldr	r3, [pc, #16]	@ (8009058 <SysTick_Config+0x40>)
 8009048:	2207      	movs	r2, #7
 800904a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	e000e010 	.word	0xe000e010

0800905c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff ff29 	bl	8008ebc <__NVIC_SetPriorityGrouping>
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	4603      	mov	r3, r0
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009084:	f7ff ff3e 	bl	8008f04 <__NVIC_GetPriorityGrouping>
 8009088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f7ff ff8e 	bl	8008fb0 <NVIC_EncodePriority>
 8009094:	4602      	mov	r2, r0
 8009096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff ff5d 	bl	8008f5c <__NVIC_SetPriority>
}
 80090a2:	bf00      	nop
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	4603      	mov	r3, r0
 80090b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff ff31 	bl	8008f20 <__NVIC_EnableIRQ>
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff ffa2 	bl	8009018 <SysTick_Config>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d008      	beq.n	8009108 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2204      	movs	r2, #4
 80090fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e022      	b.n	800914e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 020e 	bic.w	r2, r2, #14
 8009116:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800912c:	f003 021c 	and.w	r2, r3, #28
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009134:	2101      	movs	r1, #1
 8009136:	fa01 f202 	lsl.w	r2, r1, r2
 800913a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800914c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d005      	beq.n	800917e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2204      	movs	r2, #4
 8009176:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	e029      	b.n	80091d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 020e 	bic.w	r2, r2, #14
 800918c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0201 	bic.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a2:	f003 021c 	and.w	r2, r3, #28
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091aa:	2101      	movs	r1, #1
 80091ac:	fa01 f202 	lsl.w	r2, r1, r2
 80091b0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	4798      	blx	r3
    }
  }
  return status;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091ea:	e17f      	b.n	80094ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	2101      	movs	r1, #1
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	fa01 f303 	lsl.w	r3, r1, r3
 80091f8:	4013      	ands	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8171 	beq.w	80094e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	2b01      	cmp	r3, #1
 800920e:	d005      	beq.n	800921c <HAL_GPIO_Init+0x40>
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f003 0303 	and.w	r3, r3, #3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d130      	bne.n	800927e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	2203      	movs	r2, #3
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	43db      	mvns	r3, r3
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4013      	ands	r3, r2
 8009232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009252:	2201      	movs	r2, #1
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	fa02 f303 	lsl.w	r3, r2, r3
 800925a:	43db      	mvns	r3, r3
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4013      	ands	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	091b      	lsrs	r3, r3, #4
 8009268:	f003 0201 	and.w	r2, r3, #1
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4313      	orrs	r3, r2
 8009276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d118      	bne.n	80092bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009290:	2201      	movs	r2, #1
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4013      	ands	r3, r2
 800929e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	f003 0201 	and.w	r2, r3, #1
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d017      	beq.n	80092f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	2203      	movs	r2, #3
 80092d4:	fa02 f303 	lsl.w	r3, r2, r3
 80092d8:	43db      	mvns	r3, r3
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	4013      	ands	r3, r2
 80092de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d123      	bne.n	800934c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	08da      	lsrs	r2, r3, #3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3208      	adds	r2, #8
 800930c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009310:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	220f      	movs	r2, #15
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	43db      	mvns	r3, r3
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	4013      	ands	r3, r2
 8009326:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	691a      	ldr	r2, [r3, #16]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	fa02 f303 	lsl.w	r3, r2, r3
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	08da      	lsrs	r2, r3, #3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3208      	adds	r2, #8
 8009346:	6939      	ldr	r1, [r7, #16]
 8009348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	2203      	movs	r2, #3
 8009358:	fa02 f303 	lsl.w	r3, r2, r3
 800935c:	43db      	mvns	r3, r3
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4013      	ands	r3, r2
 8009362:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f003 0203 	and.w	r2, r3, #3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	005b      	lsls	r3, r3, #1
 8009370:	fa02 f303 	lsl.w	r3, r2, r3
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80ac 	beq.w	80094e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800938e:	4b5f      	ldr	r3, [pc, #380]	@ (800950c <HAL_GPIO_Init+0x330>)
 8009390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009392:	4a5e      	ldr	r2, [pc, #376]	@ (800950c <HAL_GPIO_Init+0x330>)
 8009394:	f043 0301 	orr.w	r3, r3, #1
 8009398:	6613      	str	r3, [r2, #96]	@ 0x60
 800939a:	4b5c      	ldr	r3, [pc, #368]	@ (800950c <HAL_GPIO_Init+0x330>)
 800939c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	60bb      	str	r3, [r7, #8]
 80093a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80093a6:	4a5a      	ldr	r2, [pc, #360]	@ (8009510 <HAL_GPIO_Init+0x334>)
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	089b      	lsrs	r3, r3, #2
 80093ac:	3302      	adds	r3, #2
 80093ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	220f      	movs	r2, #15
 80093be:	fa02 f303 	lsl.w	r3, r2, r3
 80093c2:	43db      	mvns	r3, r3
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4013      	ands	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80093d0:	d025      	beq.n	800941e <HAL_GPIO_Init+0x242>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a4f      	ldr	r2, [pc, #316]	@ (8009514 <HAL_GPIO_Init+0x338>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d01f      	beq.n	800941a <HAL_GPIO_Init+0x23e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a4e      	ldr	r2, [pc, #312]	@ (8009518 <HAL_GPIO_Init+0x33c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d019      	beq.n	8009416 <HAL_GPIO_Init+0x23a>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a4d      	ldr	r2, [pc, #308]	@ (800951c <HAL_GPIO_Init+0x340>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d013      	beq.n	8009412 <HAL_GPIO_Init+0x236>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a4c      	ldr	r2, [pc, #304]	@ (8009520 <HAL_GPIO_Init+0x344>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d00d      	beq.n	800940e <HAL_GPIO_Init+0x232>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a4b      	ldr	r2, [pc, #300]	@ (8009524 <HAL_GPIO_Init+0x348>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d007      	beq.n	800940a <HAL_GPIO_Init+0x22e>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a4a      	ldr	r2, [pc, #296]	@ (8009528 <HAL_GPIO_Init+0x34c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d101      	bne.n	8009406 <HAL_GPIO_Init+0x22a>
 8009402:	2306      	movs	r3, #6
 8009404:	e00c      	b.n	8009420 <HAL_GPIO_Init+0x244>
 8009406:	2307      	movs	r3, #7
 8009408:	e00a      	b.n	8009420 <HAL_GPIO_Init+0x244>
 800940a:	2305      	movs	r3, #5
 800940c:	e008      	b.n	8009420 <HAL_GPIO_Init+0x244>
 800940e:	2304      	movs	r3, #4
 8009410:	e006      	b.n	8009420 <HAL_GPIO_Init+0x244>
 8009412:	2303      	movs	r3, #3
 8009414:	e004      	b.n	8009420 <HAL_GPIO_Init+0x244>
 8009416:	2302      	movs	r3, #2
 8009418:	e002      	b.n	8009420 <HAL_GPIO_Init+0x244>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <HAL_GPIO_Init+0x244>
 800941e:	2300      	movs	r3, #0
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	f002 0203 	and.w	r2, r2, #3
 8009426:	0092      	lsls	r2, r2, #2
 8009428:	4093      	lsls	r3, r2
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009430:	4937      	ldr	r1, [pc, #220]	@ (8009510 <HAL_GPIO_Init+0x334>)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	089b      	lsrs	r3, r3, #2
 8009436:	3302      	adds	r3, #2
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800943e:	4b3b      	ldr	r3, [pc, #236]	@ (800952c <HAL_GPIO_Init+0x350>)
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	43db      	mvns	r3, r3
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4013      	ands	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009462:	4a32      	ldr	r2, [pc, #200]	@ (800952c <HAL_GPIO_Init+0x350>)
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009468:	4b30      	ldr	r3, [pc, #192]	@ (800952c <HAL_GPIO_Init+0x350>)
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	43db      	mvns	r3, r3
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4013      	ands	r3, r2
 8009476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d003      	beq.n	800948c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4313      	orrs	r3, r2
 800948a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800948c:	4a27      	ldr	r2, [pc, #156]	@ (800952c <HAL_GPIO_Init+0x350>)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009492:	4b26      	ldr	r3, [pc, #152]	@ (800952c <HAL_GPIO_Init+0x350>)
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	43db      	mvns	r3, r3
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	4013      	ands	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80094b6:	4a1d      	ldr	r2, [pc, #116]	@ (800952c <HAL_GPIO_Init+0x350>)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80094bc:	4b1b      	ldr	r3, [pc, #108]	@ (800952c <HAL_GPIO_Init+0x350>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	43db      	mvns	r3, r3
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4013      	ands	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80094e0:	4a12      	ldr	r2, [pc, #72]	@ (800952c <HAL_GPIO_Init+0x350>)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	3301      	adds	r3, #1
 80094ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	fa22 f303 	lsr.w	r3, r2, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f47f ae78 	bne.w	80091ec <HAL_GPIO_Init+0x10>
  }
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40021000 	.word	0x40021000
 8009510:	40010000 	.word	0x40010000
 8009514:	48000400 	.word	0x48000400
 8009518:	48000800 	.word	0x48000800
 800951c:	48000c00 	.word	0x48000c00
 8009520:	48001000 	.word	0x48001000
 8009524:	48001400 	.word	0x48001400
 8009528:	48001800 	.word	0x48001800
 800952c:	40010400 	.word	0x40010400

08009530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	807b      	strh	r3, [r7, #2]
 800953c:	4613      	mov	r3, r2
 800953e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009540:	787b      	ldrb	r3, [r7, #1]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009546:	887a      	ldrh	r2, [r7, #2]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800954c:	e002      	b.n	8009554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800954e:	887a      	ldrh	r2, [r7, #2]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009564:	4b05      	ldr	r3, [pc, #20]	@ (800957c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a04      	ldr	r2, [pc, #16]	@ (800957c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800956a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800956e:	6013      	str	r3, [r2, #0]
}
 8009570:	bf00      	nop
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40007000 	.word	0x40007000

08009580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009584:	4b04      	ldr	r3, [pc, #16]	@ (8009598 <HAL_PWREx_GetVoltageRange+0x18>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800958c:	4618      	mov	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40007000 	.word	0x40007000

0800959c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095aa:	d130      	bne.n	800960e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80095ac:	4b23      	ldr	r3, [pc, #140]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80095b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b8:	d038      	beq.n	800962c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80095ba:	4b20      	ldr	r3, [pc, #128]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80095c2:	4a1e      	ldr	r2, [pc, #120]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80095c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80095ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2232      	movs	r2, #50	@ 0x32
 80095d0:	fb02 f303 	mul.w	r3, r2, r3
 80095d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	0c9b      	lsrs	r3, r3, #18
 80095dc:	3301      	adds	r3, #1
 80095de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095e0:	e002      	b.n	80095e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095e8:	4b14      	ldr	r3, [pc, #80]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095f4:	d102      	bne.n	80095fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f2      	bne.n	80095e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095fc:	4b0f      	ldr	r3, [pc, #60]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009608:	d110      	bne.n	800962c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e00f      	b.n	800962e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800960e:	4b0b      	ldr	r3, [pc, #44]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800961a:	d007      	beq.n	800962c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800961c:	4b07      	ldr	r3, [pc, #28]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009624:	4a05      	ldr	r2, [pc, #20]	@ (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800962a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40007000 	.word	0x40007000
 8009640:	20000000 	.word	0x20000000
 8009644:	431bde83 	.word	0x431bde83

08009648 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e3ca      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800965a:	4b97      	ldr	r3, [pc, #604]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 030c 	and.w	r3, r3, #12
 8009662:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009664:	4b94      	ldr	r3, [pc, #592]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f003 0303 	and.w	r3, r3, #3
 800966c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 80e4 	beq.w	8009844 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <HAL_RCC_OscConfig+0x4a>
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b0c      	cmp	r3, #12
 8009686:	f040 808b 	bne.w	80097a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b01      	cmp	r3, #1
 800968e:	f040 8087 	bne.w	80097a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009692:	4b89      	ldr	r3, [pc, #548]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <HAL_RCC_OscConfig+0x62>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e3a2      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1a      	ldr	r2, [r3, #32]
 80096ae:	4b82      	ldr	r3, [pc, #520]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d004      	beq.n	80096c4 <HAL_RCC_OscConfig+0x7c>
 80096ba:	4b7f      	ldr	r3, [pc, #508]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096c2:	e005      	b.n	80096d0 <HAL_RCC_OscConfig+0x88>
 80096c4:	4b7c      	ldr	r3, [pc, #496]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096ca:	091b      	lsrs	r3, r3, #4
 80096cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d223      	bcs.n	800971c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fd55 	bl	800a188 <RCC_SetFlashLatencyFromMSIRange>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e383      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096e8:	4b73      	ldr	r3, [pc, #460]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a72      	ldr	r2, [pc, #456]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096ee:	f043 0308 	orr.w	r3, r3, #8
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	4b70      	ldr	r3, [pc, #448]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	496d      	ldr	r1, [pc, #436]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009702:	4313      	orrs	r3, r2
 8009704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009706:	4b6c      	ldr	r3, [pc, #432]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	4968      	ldr	r1, [pc, #416]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009716:	4313      	orrs	r3, r2
 8009718:	604b      	str	r3, [r1, #4]
 800971a:	e025      	b.n	8009768 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800971c:	4b66      	ldr	r3, [pc, #408]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a65      	ldr	r2, [pc, #404]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009722:	f043 0308 	orr.w	r3, r3, #8
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	4b63      	ldr	r3, [pc, #396]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	4960      	ldr	r1, [pc, #384]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009736:	4313      	orrs	r3, r2
 8009738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800973a:	4b5f      	ldr	r3, [pc, #380]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	495b      	ldr	r1, [pc, #364]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800974a:	4313      	orrs	r3, r2
 800974c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d109      	bne.n	8009768 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fd15 	bl	800a188 <RCC_SetFlashLatencyFromMSIRange>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e343      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009768:	f000 fc4a 	bl	800a000 <HAL_RCC_GetSysClockFreq>
 800976c:	4602      	mov	r2, r0
 800976e:	4b52      	ldr	r3, [pc, #328]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	091b      	lsrs	r3, r3, #4
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	4950      	ldr	r1, [pc, #320]	@ (80098bc <HAL_RCC_OscConfig+0x274>)
 800977a:	5ccb      	ldrb	r3, [r1, r3]
 800977c:	f003 031f 	and.w	r3, r3, #31
 8009780:	fa22 f303 	lsr.w	r3, r2, r3
 8009784:	4a4e      	ldr	r2, [pc, #312]	@ (80098c0 <HAL_RCC_OscConfig+0x278>)
 8009786:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009788:	4b4e      	ldr	r3, [pc, #312]	@ (80098c4 <HAL_RCC_OscConfig+0x27c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff fb39 	bl	8008e04 <HAL_InitTick>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d052      	beq.n	8009842 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	e327      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d032      	beq.n	800980e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80097a8:	4b43      	ldr	r3, [pc, #268]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a42      	ldr	r2, [pc, #264]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097ae:	f043 0301 	orr.w	r3, r3, #1
 80097b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097b4:	f7ff fb76 	bl	8008ea4 <HAL_GetTick>
 80097b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097ba:	e008      	b.n	80097ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097bc:	f7ff fb72 	bl	8008ea4 <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d901      	bls.n	80097ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e310      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097ce:	4b3a      	ldr	r3, [pc, #232]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0f0      	beq.n	80097bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097da:	4b37      	ldr	r3, [pc, #220]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a36      	ldr	r2, [pc, #216]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097e0:	f043 0308 	orr.w	r3, r3, #8
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	4b34      	ldr	r3, [pc, #208]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	4931      	ldr	r1, [pc, #196]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097f8:	4b2f      	ldr	r3, [pc, #188]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	492c      	ldr	r1, [pc, #176]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009808:	4313      	orrs	r3, r2
 800980a:	604b      	str	r3, [r1, #4]
 800980c:	e01a      	b.n	8009844 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800980e:	4b2a      	ldr	r3, [pc, #168]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a29      	ldr	r2, [pc, #164]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800981a:	f7ff fb43 	bl	8008ea4 <HAL_GetTick>
 800981e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009820:	e008      	b.n	8009834 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009822:	f7ff fb3f 	bl	8008ea4 <HAL_GetTick>
 8009826:	4602      	mov	r2, r0
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	2b02      	cmp	r3, #2
 800982e:	d901      	bls.n	8009834 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e2dd      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009834:	4b20      	ldr	r3, [pc, #128]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f0      	bne.n	8009822 <HAL_RCC_OscConfig+0x1da>
 8009840:	e000      	b.n	8009844 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d074      	beq.n	800993a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b08      	cmp	r3, #8
 8009854:	d005      	beq.n	8009862 <HAL_RCC_OscConfig+0x21a>
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	2b0c      	cmp	r3, #12
 800985a:	d10e      	bne.n	800987a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2b03      	cmp	r3, #3
 8009860:	d10b      	bne.n	800987a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009862:	4b15      	ldr	r3, [pc, #84]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d064      	beq.n	8009938 <HAL_RCC_OscConfig+0x2f0>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d160      	bne.n	8009938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e2ba      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009882:	d106      	bne.n	8009892 <HAL_RCC_OscConfig+0x24a>
 8009884:	4b0c      	ldr	r3, [pc, #48]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a0b      	ldr	r2, [pc, #44]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800988a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e026      	b.n	80098e0 <HAL_RCC_OscConfig+0x298>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800989a:	d115      	bne.n	80098c8 <HAL_RCC_OscConfig+0x280>
 800989c:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a05      	ldr	r2, [pc, #20]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a02      	ldr	r2, [pc, #8]	@ (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	e014      	b.n	80098e0 <HAL_RCC_OscConfig+0x298>
 80098b6:	bf00      	nop
 80098b8:	40021000 	.word	0x40021000
 80098bc:	0800d010 	.word	0x0800d010
 80098c0:	20000000 	.word	0x20000000
 80098c4:	20000004 	.word	0x20000004
 80098c8:	4ba0      	ldr	r3, [pc, #640]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a9f      	ldr	r2, [pc, #636]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	4b9d      	ldr	r3, [pc, #628]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a9c      	ldr	r2, [pc, #624]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d013      	beq.n	8009910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7ff fadc 	bl	8008ea4 <HAL_GetTick>
 80098ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098f0:	f7ff fad8 	bl	8008ea4 <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b64      	cmp	r3, #100	@ 0x64
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e276      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009902:	4b92      	ldr	r3, [pc, #584]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f0      	beq.n	80098f0 <HAL_RCC_OscConfig+0x2a8>
 800990e:	e014      	b.n	800993a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7ff fac8 	bl	8008ea4 <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009918:	f7ff fac4 	bl	8008ea4 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	@ 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e262      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800992a:	4b88      	ldr	r3, [pc, #544]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0x2d0>
 8009936:	e000      	b.n	800993a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d060      	beq.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2b04      	cmp	r3, #4
 800994a:	d005      	beq.n	8009958 <HAL_RCC_OscConfig+0x310>
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	2b0c      	cmp	r3, #12
 8009950:	d119      	bne.n	8009986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d116      	bne.n	8009986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009958:	4b7c      	ldr	r3, [pc, #496]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <HAL_RCC_OscConfig+0x328>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e23f      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009970:	4b76      	ldr	r3, [pc, #472]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	4973      	ldr	r1, [pc, #460]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009980:	4313      	orrs	r3, r2
 8009982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009984:	e040      	b.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d023      	beq.n	80099d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800998e:	4b6f      	ldr	r3, [pc, #444]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a6e      	ldr	r2, [pc, #440]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999a:	f7ff fa83 	bl	8008ea4 <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099a2:	f7ff fa7f 	bl	8008ea4 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e21d      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099b4:	4b65      	ldr	r3, [pc, #404]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0f0      	beq.n	80099a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c0:	4b62      	ldr	r3, [pc, #392]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	061b      	lsls	r3, r3, #24
 80099ce:	495f      	ldr	r1, [pc, #380]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	604b      	str	r3, [r1, #4]
 80099d4:	e018      	b.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099d6:	4b5d      	ldr	r3, [pc, #372]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a5c      	ldr	r2, [pc, #368]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e2:	f7ff fa5f 	bl	8008ea4 <HAL_GetTick>
 80099e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099e8:	e008      	b.n	80099fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ea:	f7ff fa5b 	bl	8008ea4 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d901      	bls.n	80099fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e1f9      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099fc:	4b53      	ldr	r3, [pc, #332]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1f0      	bne.n	80099ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03c      	beq.n	8009a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01c      	beq.n	8009a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a22:	4a4a      	ldr	r2, [pc, #296]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7ff fa3a 	bl	8008ea4 <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a34:	f7ff fa36 	bl	8008ea4 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e1d4      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a46:	4b41      	ldr	r3, [pc, #260]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0ef      	beq.n	8009a34 <HAL_RCC_OscConfig+0x3ec>
 8009a54:	e01b      	b.n	8009a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a56:	4b3d      	ldr	r3, [pc, #244]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a66:	f7ff fa1d 	bl	8008ea4 <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a6c:	e008      	b.n	8009a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6e:	f7ff fa19 	bl	8008ea4 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e1b7      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a80:	4b32      	ldr	r3, [pc, #200]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1ef      	bne.n	8009a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 80a6 	beq.w	8009be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10d      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aac:	4b27      	ldr	r3, [pc, #156]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab0:	4a26      	ldr	r2, [pc, #152]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ab8:	4b24      	ldr	r3, [pc, #144]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ac8:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d118      	bne.n	8009b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ae0:	f7ff f9e0 	bl	8008ea4 <HAL_GetTick>
 8009ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ae6:	e008      	b.n	8009afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae8:	f7ff f9dc 	bl	8008ea4 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e17a      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009afa:	4b15      	ldr	r3, [pc, #84]	@ (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0f0      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d108      	bne.n	8009b20 <HAL_RCC_OscConfig+0x4d8>
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b14:	4a0d      	ldr	r2, [pc, #52]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b1e:	e029      	b.n	8009b74 <HAL_RCC_OscConfig+0x52c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d115      	bne.n	8009b54 <HAL_RCC_OscConfig+0x50c>
 8009b28:	4b08      	ldr	r3, [pc, #32]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b2e:	4a07      	ldr	r2, [pc, #28]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b30:	f043 0304 	orr.w	r3, r3, #4
 8009b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b38:	4b04      	ldr	r3, [pc, #16]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3e:	4a03      	ldr	r2, [pc, #12]	@ (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b48:	e014      	b.n	8009b74 <HAL_RCC_OscConfig+0x52c>
 8009b4a:	bf00      	nop
 8009b4c:	40021000 	.word	0x40021000
 8009b50:	40007000 	.word	0x40007000
 8009b54:	4b9c      	ldr	r3, [pc, #624]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b5a:	4a9b      	ldr	r2, [pc, #620]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b64:	4b98      	ldr	r3, [pc, #608]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b6a:	4a97      	ldr	r2, [pc, #604]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009b6c:	f023 0304 	bic.w	r3, r3, #4
 8009b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d016      	beq.n	8009baa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b7c:	f7ff f992 	bl	8008ea4 <HAL_GetTick>
 8009b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b82:	e00a      	b.n	8009b9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b84:	f7ff f98e 	bl	8008ea4 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d901      	bls.n	8009b9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e12a      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0ed      	beq.n	8009b84 <HAL_RCC_OscConfig+0x53c>
 8009ba8:	e015      	b.n	8009bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009baa:	f7ff f97b 	bl	8008ea4 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bb0:	e00a      	b.n	8009bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb2:	f7ff f977 	bl	8008ea4 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e113      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1ed      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bd6:	7ffb      	ldrb	r3, [r7, #31]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d105      	bne.n	8009be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bdc:	4b7a      	ldr	r3, [pc, #488]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be0:	4a79      	ldr	r2, [pc, #484]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 80fe 	beq.w	8009dee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	f040 80d0 	bne.w	8009d9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009bfc:	4b72      	ldr	r3, [pc, #456]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f003 0203 	and.w	r2, r3, #3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d130      	bne.n	8009c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d127      	bne.n	8009c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d11f      	bne.n	8009c72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009c3c:	2a07      	cmp	r2, #7
 8009c3e:	bf14      	ite	ne
 8009c40:	2201      	movne	r2, #1
 8009c42:	2200      	moveq	r2, #0
 8009c44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d113      	bne.n	8009c72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	3b01      	subs	r3, #1
 8009c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d109      	bne.n	8009c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c68:	085b      	lsrs	r3, r3, #1
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d06e      	beq.n	8009d50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b0c      	cmp	r3, #12
 8009c76:	d069      	beq.n	8009d4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009c78:	4b53      	ldr	r3, [pc, #332]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009c84:	4b50      	ldr	r3, [pc, #320]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e0ad      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009c94:	4b4c      	ldr	r3, [pc, #304]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a4b      	ldr	r2, [pc, #300]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009ca0:	f7ff f900 	bl	8008ea4 <HAL_GetTick>
 8009ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca8:	f7ff f8fc 	bl	8008ea4 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e09a      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cba:	4b43      	ldr	r3, [pc, #268]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f0      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cc6:	4b40      	ldr	r3, [pc, #256]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	4b40      	ldr	r3, [pc, #256]	@ (8009dcc <HAL_RCC_OscConfig+0x784>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009cd6:	3a01      	subs	r2, #1
 8009cd8:	0112      	lsls	r2, r2, #4
 8009cda:	4311      	orrs	r1, r2
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009ce0:	0212      	lsls	r2, r2, #8
 8009ce2:	4311      	orrs	r1, r2
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ce8:	0852      	lsrs	r2, r2, #1
 8009cea:	3a01      	subs	r2, #1
 8009cec:	0552      	lsls	r2, r2, #21
 8009cee:	4311      	orrs	r1, r2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009cf4:	0852      	lsrs	r2, r2, #1
 8009cf6:	3a01      	subs	r2, #1
 8009cf8:	0652      	lsls	r2, r2, #25
 8009cfa:	4311      	orrs	r1, r2
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009d00:	0912      	lsrs	r2, r2, #4
 8009d02:	0452      	lsls	r2, r2, #17
 8009d04:	430a      	orrs	r2, r1
 8009d06:	4930      	ldr	r1, [pc, #192]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a2d      	ldr	r2, [pc, #180]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d18:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009d24:	f7ff f8be 	bl	8008ea4 <HAL_GetTick>
 8009d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d2a:	e008      	b.n	8009d3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d2c:	f7ff f8ba 	bl	8008ea4 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e058      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d3e:	4b22      	ldr	r3, [pc, #136]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0f0      	beq.n	8009d2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009d4a:	e050      	b.n	8009dee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e04f      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d50:	4b1d      	ldr	r3, [pc, #116]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d148      	bne.n	8009dee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a19      	ldr	r2, [pc, #100]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d68:	4b17      	ldr	r3, [pc, #92]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	4a16      	ldr	r2, [pc, #88]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d74:	f7ff f896 	bl	8008ea4 <HAL_GetTick>
 8009d78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d7a:	e008      	b.n	8009d8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d7c:	f7ff f892 	bl	8008ea4 <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d901      	bls.n	8009d8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e030      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0f0      	beq.n	8009d7c <HAL_RCC_OscConfig+0x734>
 8009d9a:	e028      	b.n	8009dee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b0c      	cmp	r3, #12
 8009da0:	d023      	beq.n	8009dea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009da2:	4b09      	ldr	r3, [pc, #36]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a08      	ldr	r2, [pc, #32]	@ (8009dc8 <HAL_RCC_OscConfig+0x780>)
 8009da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dae:	f7ff f879 	bl	8008ea4 <HAL_GetTick>
 8009db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009db4:	e00c      	b.n	8009dd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009db6:	f7ff f875 	bl	8008ea4 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d905      	bls.n	8009dd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e013      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
 8009dc8:	40021000 	.word	0x40021000
 8009dcc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009dd0:	4b09      	ldr	r3, [pc, #36]	@ (8009df8 <HAL_RCC_OscConfig+0x7b0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1ec      	bne.n	8009db6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009ddc:	4b06      	ldr	r3, [pc, #24]	@ (8009df8 <HAL_RCC_OscConfig+0x7b0>)
 8009dde:	68da      	ldr	r2, [r3, #12]
 8009de0:	4905      	ldr	r1, [pc, #20]	@ (8009df8 <HAL_RCC_OscConfig+0x7b0>)
 8009de2:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <HAL_RCC_OscConfig+0x7b4>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	60cb      	str	r3, [r1, #12]
 8009de8:	e001      	b.n	8009dee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3720      	adds	r7, #32
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	40021000 	.word	0x40021000
 8009dfc:	feeefffc 	.word	0xfeeefffc

08009e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e0e7      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e14:	4b75      	ldr	r3, [pc, #468]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d910      	bls.n	8009e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e22:	4b72      	ldr	r3, [pc, #456]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f023 0207 	bic.w	r2, r3, #7
 8009e2a:	4970      	ldr	r1, [pc, #448]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e32:	4b6e      	ldr	r3, [pc, #440]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d001      	beq.n	8009e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0cf      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d010      	beq.n	8009e72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	4b66      	ldr	r3, [pc, #408]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d908      	bls.n	8009e72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e60:	4b63      	ldr	r3, [pc, #396]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	4960      	ldr	r1, [pc, #384]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d04c      	beq.n	8009f18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d107      	bne.n	8009e96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e86:	4b5a      	ldr	r3, [pc, #360]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d121      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e0a6      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d107      	bne.n	8009eae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e9e:	4b54      	ldr	r3, [pc, #336]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d115      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e09a      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d107      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e08e      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e086      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ed6:	4b46      	ldr	r3, [pc, #280]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 0203 	bic.w	r2, r3, #3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4943      	ldr	r1, [pc, #268]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ee8:	f7fe ffdc 	bl	8008ea4 <HAL_GetTick>
 8009eec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eee:	e00a      	b.n	8009f06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ef0:	f7fe ffd8 	bl	8008ea4 <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e06e      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f06:	4b3a      	ldr	r3, [pc, #232]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 020c 	and.w	r2, r3, #12
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d1eb      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d010      	beq.n	8009f46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	4b31      	ldr	r3, [pc, #196]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d208      	bcs.n	8009f46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f34:	4b2e      	ldr	r3, [pc, #184]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	492b      	ldr	r1, [pc, #172]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f46:	4b29      	ldr	r3, [pc, #164]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0307 	and.w	r3, r3, #7
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d210      	bcs.n	8009f76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f54:	4b25      	ldr	r3, [pc, #148]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f023 0207 	bic.w	r2, r3, #7
 8009f5c:	4923      	ldr	r1, [pc, #140]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f64:	4b21      	ldr	r3, [pc, #132]	@ (8009fec <HAL_RCC_ClockConfig+0x1ec>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d001      	beq.n	8009f76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e036      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d008      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	4918      	ldr	r1, [pc, #96]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0308 	and.w	r3, r3, #8
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d009      	beq.n	8009fb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	4910      	ldr	r1, [pc, #64]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009fb4:	f000 f824 	bl	800a000 <HAL_RCC_GetSysClockFreq>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	091b      	lsrs	r3, r3, #4
 8009fc0:	f003 030f 	and.w	r3, r3, #15
 8009fc4:	490b      	ldr	r1, [pc, #44]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8009fc6:	5ccb      	ldrb	r3, [r1, r3]
 8009fc8:	f003 031f 	and.w	r3, r3, #31
 8009fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd0:	4a09      	ldr	r2, [pc, #36]	@ (8009ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8009fd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009fd4:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <HAL_RCC_ClockConfig+0x1fc>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe ff13 	bl	8008e04 <HAL_InitTick>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	72fb      	strb	r3, [r7, #11]

  return status;
 8009fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40022000 	.word	0x40022000
 8009ff0:	40021000 	.word	0x40021000
 8009ff4:	0800d010 	.word	0x0800d010
 8009ff8:	20000000 	.word	0x20000000
 8009ffc:	20000004 	.word	0x20000004

0800a000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a000:	b480      	push	{r7}
 800a002:	b089      	sub	sp, #36	@ 0x24
 800a004:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	2300      	movs	r3, #0
 800a00c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a00e:	4b3e      	ldr	r3, [pc, #248]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 030c 	and.w	r3, r3, #12
 800a016:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a018:	4b3b      	ldr	r3, [pc, #236]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <HAL_RCC_GetSysClockFreq+0x34>
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2b0c      	cmp	r3, #12
 800a02c:	d121      	bne.n	800a072 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d11e      	bne.n	800a072 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a034:	4b34      	ldr	r3, [pc, #208]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d107      	bne.n	800a050 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a040:	4b31      	ldr	r3, [pc, #196]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a046:	0a1b      	lsrs	r3, r3, #8
 800a048:	f003 030f 	and.w	r3, r3, #15
 800a04c:	61fb      	str	r3, [r7, #28]
 800a04e:	e005      	b.n	800a05c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a050:	4b2d      	ldr	r3, [pc, #180]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	091b      	lsrs	r3, r3, #4
 800a056:	f003 030f 	and.w	r3, r3, #15
 800a05a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a05c:	4a2b      	ldr	r2, [pc, #172]	@ (800a10c <HAL_RCC_GetSysClockFreq+0x10c>)
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a064:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10d      	bne.n	800a088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a070:	e00a      	b.n	800a088 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2b04      	cmp	r3, #4
 800a076:	d102      	bne.n	800a07e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a078:	4b25      	ldr	r3, [pc, #148]	@ (800a110 <HAL_RCC_GetSysClockFreq+0x110>)
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	e004      	b.n	800a088 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b08      	cmp	r3, #8
 800a082:	d101      	bne.n	800a088 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a084:	4b23      	ldr	r3, [pc, #140]	@ (800a114 <HAL_RCC_GetSysClockFreq+0x114>)
 800a086:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	2b0c      	cmp	r3, #12
 800a08c:	d134      	bne.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a08e:	4b1e      	ldr	r3, [pc, #120]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d003      	beq.n	800a0a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d003      	beq.n	800a0ac <HAL_RCC_GetSysClockFreq+0xac>
 800a0a4:	e005      	b.n	800a0b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a110 <HAL_RCC_GetSysClockFreq+0x110>)
 800a0a8:	617b      	str	r3, [r7, #20]
      break;
 800a0aa:	e005      	b.n	800a0b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a0ac:	4b19      	ldr	r3, [pc, #100]	@ (800a114 <HAL_RCC_GetSysClockFreq+0x114>)
 800a0ae:	617b      	str	r3, [r7, #20]
      break;
 800a0b0:	e002      	b.n	800a0b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	617b      	str	r3, [r7, #20]
      break;
 800a0b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a0b8:	4b13      	ldr	r3, [pc, #76]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	091b      	lsrs	r3, r3, #4
 800a0be:	f003 0307 	and.w	r3, r3, #7
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a0c6:	4b10      	ldr	r3, [pc, #64]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	0a1b      	lsrs	r3, r3, #8
 800a0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	fb03 f202 	mul.w	r2, r3, r2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a0de:	4b0a      	ldr	r3, [pc, #40]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	0e5b      	lsrs	r3, r3, #25
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a0f8:	69bb      	ldr	r3, [r7, #24]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3724      	adds	r7, #36	@ 0x24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	40021000 	.word	0x40021000
 800a10c:	0800d028 	.word	0x0800d028
 800a110:	00f42400 	.word	0x00f42400
 800a114:	007a1200 	.word	0x007a1200

0800a118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a118:	b480      	push	{r7}
 800a11a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a11c:	4b03      	ldr	r3, [pc, #12]	@ (800a12c <HAL_RCC_GetHCLKFreq+0x14>)
 800a11e:	681b      	ldr	r3, [r3, #0]
}
 800a120:	4618      	mov	r0, r3
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	20000000 	.word	0x20000000

0800a130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a134:	f7ff fff0 	bl	800a118 <HAL_RCC_GetHCLKFreq>
 800a138:	4602      	mov	r2, r0
 800a13a:	4b06      	ldr	r3, [pc, #24]	@ (800a154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	0a1b      	lsrs	r3, r3, #8
 800a140:	f003 0307 	and.w	r3, r3, #7
 800a144:	4904      	ldr	r1, [pc, #16]	@ (800a158 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a146:	5ccb      	ldrb	r3, [r1, r3]
 800a148:	f003 031f 	and.w	r3, r3, #31
 800a14c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a150:	4618      	mov	r0, r3
 800a152:	bd80      	pop	{r7, pc}
 800a154:	40021000 	.word	0x40021000
 800a158:	0800d020 	.word	0x0800d020

0800a15c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a160:	f7ff ffda 	bl	800a118 <HAL_RCC_GetHCLKFreq>
 800a164:	4602      	mov	r2, r0
 800a166:	4b06      	ldr	r3, [pc, #24]	@ (800a180 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	0adb      	lsrs	r3, r3, #11
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	4904      	ldr	r1, [pc, #16]	@ (800a184 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a172:	5ccb      	ldrb	r3, [r1, r3]
 800a174:	f003 031f 	and.w	r3, r3, #31
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	40021000 	.word	0x40021000
 800a184:	0800d020 	.word	0x0800d020

0800a188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a190:	2300      	movs	r3, #0
 800a192:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a194:	4b2a      	ldr	r3, [pc, #168]	@ (800a240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a1a0:	f7ff f9ee 	bl	8009580 <HAL_PWREx_GetVoltageRange>
 800a1a4:	6178      	str	r0, [r7, #20]
 800a1a6:	e014      	b.n	800a1d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a1a8:	4b25      	ldr	r3, [pc, #148]	@ (800a240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ac:	4a24      	ldr	r2, [pc, #144]	@ (800a240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1b4:	4b22      	ldr	r3, [pc, #136]	@ (800a240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a1c0:	f7ff f9de 	bl	8009580 <HAL_PWREx_GetVoltageRange>
 800a1c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800a240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d8:	d10b      	bne.n	800a1f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b80      	cmp	r3, #128	@ 0x80
 800a1de:	d919      	bls.n	800a214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2ba0      	cmp	r3, #160	@ 0xa0
 800a1e4:	d902      	bls.n	800a1ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	613b      	str	r3, [r7, #16]
 800a1ea:	e013      	b.n	800a214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
 800a1f0:	e010      	b.n	800a214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b80      	cmp	r3, #128	@ 0x80
 800a1f6:	d902      	bls.n	800a1fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	e00a      	b.n	800a214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2b80      	cmp	r3, #128	@ 0x80
 800a202:	d102      	bne.n	800a20a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a204:	2302      	movs	r3, #2
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	e004      	b.n	800a214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b70      	cmp	r3, #112	@ 0x70
 800a20e:	d101      	bne.n	800a214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a210:	2301      	movs	r3, #1
 800a212:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a214:	4b0b      	ldr	r3, [pc, #44]	@ (800a244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f023 0207 	bic.w	r2, r3, #7
 800a21c:	4909      	ldr	r1, [pc, #36]	@ (800a244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a224:	4b07      	ldr	r3, [pc, #28]	@ (800a244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d001      	beq.n	800a236 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40021000 	.word	0x40021000
 800a244:	40022000 	.word	0x40022000

0800a248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a250:	2300      	movs	r3, #0
 800a252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a254:	2300      	movs	r3, #0
 800a256:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a260:	2b00      	cmp	r3, #0
 800a262:	d041      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a268:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a26c:	d02a      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a26e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a272:	d824      	bhi.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a278:	d008      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a27a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a27e:	d81e      	bhi.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a288:	d010      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a28a:	e018      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a28c:	4b86      	ldr	r3, [pc, #536]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	4a85      	ldr	r2, [pc, #532]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a296:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a298:	e015      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3304      	adds	r3, #4
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fabb 	bl	800a81c <RCCEx_PLLSAI1_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a2aa:	e00c      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3320      	adds	r3, #32
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fba6 	bl	800aa04 <RCCEx_PLLSAI2_Config>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a2bc:	e003      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	74fb      	strb	r3, [r7, #19]
      break;
 800a2c2:	e000      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a2c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c6:	7cfb      	ldrb	r3, [r7, #19]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10b      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2cc:	4b76      	ldr	r3, [pc, #472]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2da:	4973      	ldr	r1, [pc, #460]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a2e2:	e001      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e4:	7cfb      	ldrb	r3, [r7, #19]
 800a2e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d041      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2fc:	d02a      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a2fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a302:	d824      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a308:	d008      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a30a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a30e:	d81e      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00a      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a318:	d010      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a31a:	e018      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a31c:	4b62      	ldr	r3, [pc, #392]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4a61      	ldr	r2, [pc, #388]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a326:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a328:	e015      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3304      	adds	r3, #4
 800a32e:	2100      	movs	r1, #0
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fa73 	bl	800a81c <RCCEx_PLLSAI1_Config>
 800a336:	4603      	mov	r3, r0
 800a338:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a33a:	e00c      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3320      	adds	r3, #32
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fb5e 	bl	800aa04 <RCCEx_PLLSAI2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a34c:	e003      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	74fb      	strb	r3, [r7, #19]
      break;
 800a352:	e000      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a354:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a356:	7cfb      	ldrb	r3, [r7, #19]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a35c:	4b52      	ldr	r3, [pc, #328]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a362:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a36a:	494f      	ldr	r1, [pc, #316]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a372:	e001      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a374:	7cfb      	ldrb	r3, [r7, #19]
 800a376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 80a0 	beq.w	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a386:	2300      	movs	r3, #0
 800a388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a38a:	4b47      	ldr	r3, [pc, #284]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a39a:	2300      	movs	r3, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00d      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3a0:	4b41      	ldr	r3, [pc, #260]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3a4:	4a40      	ldr	r2, [pc, #256]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3aa:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3ac:	4b3e      	ldr	r3, [pc, #248]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3b4:	60bb      	str	r3, [r7, #8]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a3a      	ldr	r2, [pc, #232]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a3c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3c8:	f7fe fd6c 	bl	8008ea4 <HAL_GetTick>
 800a3cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a3ce:	e009      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3d0:	f7fe fd68 	bl	8008ea4 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d902      	bls.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	74fb      	strb	r3, [r7, #19]
        break;
 800a3e2:	e005      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a3e4:	4b31      	ldr	r3, [pc, #196]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0ef      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a3f0:	7cfb      	ldrb	r3, [r7, #19]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d15c      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a3f6:	4b2c      	ldr	r3, [pc, #176]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01f      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	429a      	cmp	r2, r3
 800a412:	d019      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a414:	4b24      	ldr	r3, [pc, #144]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a41a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a41e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a420:	4b21      	ldr	r3, [pc, #132]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a426:	4a20      	ldr	r2, [pc, #128]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a42c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a430:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a436:	4a1c      	ldr	r2, [pc, #112]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a43c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a440:	4a19      	ldr	r2, [pc, #100]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d016      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a452:	f7fe fd27 	bl	8008ea4 <HAL_GetTick>
 800a456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a458:	e00b      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a45a:	f7fe fd23 	bl	8008ea4 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a468:	4293      	cmp	r3, r2
 800a46a:	d902      	bls.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	74fb      	strb	r3, [r7, #19]
            break;
 800a470:	e006      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0ec      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a480:	7cfb      	ldrb	r3, [r7, #19]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10c      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a486:	4b08      	ldr	r3, [pc, #32]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a48c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a496:	4904      	ldr	r1, [pc, #16]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a49e:	e009      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4a0:	7cfb      	ldrb	r3, [r7, #19]
 800a4a2:	74bb      	strb	r3, [r7, #18]
 800a4a4:	e006      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a4a6:	bf00      	nop
 800a4a8:	40021000 	.word	0x40021000
 800a4ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b0:	7cfb      	ldrb	r3, [r7, #19]
 800a4b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a4b4:	7c7b      	ldrb	r3, [r7, #17]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d105      	bne.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4ba:	4b9e      	ldr	r3, [pc, #632]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4be:	4a9d      	ldr	r2, [pc, #628]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00a      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4d2:	4b98      	ldr	r3, [pc, #608]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4d8:	f023 0203 	bic.w	r2, r3, #3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e0:	4994      	ldr	r1, [pc, #592]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00a      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a4f4:	4b8f      	ldr	r3, [pc, #572]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4fa:	f023 020c 	bic.w	r2, r3, #12
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a502:	498c      	ldr	r1, [pc, #560]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a504:	4313      	orrs	r3, r2
 800a506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a516:	4b87      	ldr	r3, [pc, #540]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a524:	4983      	ldr	r1, [pc, #524]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a526:	4313      	orrs	r3, r2
 800a528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0308 	and.w	r3, r3, #8
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a538:	4b7e      	ldr	r3, [pc, #504]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a53e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a546:	497b      	ldr	r1, [pc, #492]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0310 	and.w	r3, r3, #16
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a55a:	4b76      	ldr	r3, [pc, #472]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a568:	4972      	ldr	r1, [pc, #456]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a57c:	4b6d      	ldr	r3, [pc, #436]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a582:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58a:	496a      	ldr	r1, [pc, #424]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a59e:	4b65      	ldr	r3, [pc, #404]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5ac:	4961      	ldr	r1, [pc, #388]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5c0:	4b5c      	ldr	r3, [pc, #368]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5ce:	4959      	ldr	r1, [pc, #356]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5e2:	4b54      	ldr	r3, [pc, #336]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f0:	4950      	ldr	r1, [pc, #320]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a604:	4b4b      	ldr	r3, [pc, #300]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a60a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a612:	4948      	ldr	r1, [pc, #288]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a614:	4313      	orrs	r3, r2
 800a616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a626:	4b43      	ldr	r3, [pc, #268]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a62c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a634:	493f      	ldr	r1, [pc, #252]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a636:	4313      	orrs	r3, r2
 800a638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d028      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a648:	4b3a      	ldr	r3, [pc, #232]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a64e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a656:	4937      	ldr	r1, [pc, #220]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a658:	4313      	orrs	r3, r2
 800a65a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a666:	d106      	bne.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a668:	4b32      	ldr	r3, [pc, #200]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	4a31      	ldr	r2, [pc, #196]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a66e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a672:	60d3      	str	r3, [r2, #12]
 800a674:	e011      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a67e:	d10c      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3304      	adds	r3, #4
 800a684:	2101      	movs	r1, #1
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f8c8 	bl	800a81c <RCCEx_PLLSAI1_Config>
 800a68c:	4603      	mov	r3, r0
 800a68e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a690:	7cfb      	ldrb	r3, [r7, #19]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a696:	7cfb      	ldrb	r3, [r7, #19]
 800a698:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d028      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a6a6:	4b23      	ldr	r3, [pc, #140]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b4:	491f      	ldr	r1, [pc, #124]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6c4:	d106      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6c6:	4b1b      	ldr	r3, [pc, #108]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	4a1a      	ldr	r2, [pc, #104]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6d0:	60d3      	str	r3, [r2, #12]
 800a6d2:	e011      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6dc:	d10c      	bne.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f899 	bl	800a81c <RCCEx_PLLSAI1_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a6ee:	7cfb      	ldrb	r3, [r7, #19]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a6f4:	7cfb      	ldrb	r3, [r7, #19]
 800a6f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d02b      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a704:	4b0b      	ldr	r3, [pc, #44]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a70a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a712:	4908      	ldr	r1, [pc, #32]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a714:	4313      	orrs	r3, r2
 800a716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a71e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a722:	d109      	bne.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a724:	4b03      	ldr	r3, [pc, #12]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4a02      	ldr	r2, [pc, #8]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a72a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a72e:	60d3      	str	r3, [r2, #12]
 800a730:	e014      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a732:	bf00      	nop
 800a734:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a73c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a740:	d10c      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3304      	adds	r3, #4
 800a746:	2101      	movs	r1, #1
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f867 	bl	800a81c <RCCEx_PLLSAI1_Config>
 800a74e:	4603      	mov	r3, r0
 800a750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a752:	7cfb      	ldrb	r3, [r7, #19]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a758:	7cfb      	ldrb	r3, [r7, #19]
 800a75a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d02f      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a768:	4b2b      	ldr	r3, [pc, #172]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a76e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a776:	4928      	ldr	r1, [pc, #160]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a786:	d10d      	bne.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3304      	adds	r3, #4
 800a78c:	2102      	movs	r1, #2
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 f844 	bl	800a81c <RCCEx_PLLSAI1_Config>
 800a794:	4603      	mov	r3, r0
 800a796:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a798:	7cfb      	ldrb	r3, [r7, #19]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d014      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a79e:	7cfb      	ldrb	r3, [r7, #19]
 800a7a0:	74bb      	strb	r3, [r7, #18]
 800a7a2:	e011      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ac:	d10c      	bne.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3320      	adds	r3, #32
 800a7b2:	2102      	movs	r1, #2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 f925 	bl	800aa04 <RCCEx_PLLSAI2_Config>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a7be:	7cfb      	ldrb	r3, [r7, #19]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a7c4:	7cfb      	ldrb	r3, [r7, #19]
 800a7c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00a      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a7d4:	4b10      	ldr	r3, [pc, #64]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7e2:	490d      	ldr	r1, [pc, #52]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00b      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7f6:	4b08      	ldr	r3, [pc, #32]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a806:	4904      	ldr	r1, [pc, #16]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a80e:	7cbb      	ldrb	r3, [r7, #18]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	40021000 	.word	0x40021000

0800a81c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a82a:	4b75      	ldr	r3, [pc, #468]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d018      	beq.n	800a868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a836:	4b72      	ldr	r3, [pc, #456]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f003 0203 	and.w	r2, r3, #3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d10d      	bne.n	800a862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
       ||
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d009      	beq.n	800a862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a84e:	4b6c      	ldr	r3, [pc, #432]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	091b      	lsrs	r3, r3, #4
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	1c5a      	adds	r2, r3, #1
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
       ||
 800a85e:	429a      	cmp	r2, r3
 800a860:	d047      	beq.n	800a8f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	73fb      	strb	r3, [r7, #15]
 800a866:	e044      	b.n	800a8f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d018      	beq.n	800a8a2 <RCCEx_PLLSAI1_Config+0x86>
 800a870:	2b03      	cmp	r3, #3
 800a872:	d825      	bhi.n	800a8c0 <RCCEx_PLLSAI1_Config+0xa4>
 800a874:	2b01      	cmp	r3, #1
 800a876:	d002      	beq.n	800a87e <RCCEx_PLLSAI1_Config+0x62>
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d009      	beq.n	800a890 <RCCEx_PLLSAI1_Config+0x74>
 800a87c:	e020      	b.n	800a8c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a87e:	4b60      	ldr	r3, [pc, #384]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d11d      	bne.n	800a8c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a88e:	e01a      	b.n	800a8c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a890:	4b5b      	ldr	r3, [pc, #364]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d116      	bne.n	800a8ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8a0:	e013      	b.n	800a8ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a8a2:	4b57      	ldr	r3, [pc, #348]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10f      	bne.n	800a8ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a8ae:	4b54      	ldr	r3, [pc, #336]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d109      	bne.n	800a8ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a8be:	e006      	b.n	800a8ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c4:	e004      	b.n	800a8d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a8c6:	bf00      	nop
 800a8c8:	e002      	b.n	800a8d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a8ca:	bf00      	nop
 800a8cc:	e000      	b.n	800a8d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a8ce:	bf00      	nop
    }

    if(status == HAL_OK)
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10d      	bne.n	800a8f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a8d6:	4b4a      	ldr	r3, [pc, #296]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6819      	ldr	r1, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	011b      	lsls	r3, r3, #4
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	4944      	ldr	r1, [pc, #272]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d17d      	bne.n	800a9f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a8f8:	4b41      	ldr	r3, [pc, #260]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a40      	ldr	r2, [pc, #256]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a904:	f7fe face 	bl	8008ea4 <HAL_GetTick>
 800a908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a90a:	e009      	b.n	800a920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a90c:	f7fe faca 	bl	8008ea4 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b02      	cmp	r3, #2
 800a918:	d902      	bls.n	800a920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	73fb      	strb	r3, [r7, #15]
        break;
 800a91e:	e005      	b.n	800a92c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a920:	4b37      	ldr	r3, [pc, #220]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1ef      	bne.n	800a90c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d160      	bne.n	800a9f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d111      	bne.n	800a95c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a938:	4b31      	ldr	r3, [pc, #196]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6892      	ldr	r2, [r2, #8]
 800a948:	0211      	lsls	r1, r2, #8
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	68d2      	ldr	r2, [r2, #12]
 800a94e:	0912      	lsrs	r2, r2, #4
 800a950:	0452      	lsls	r2, r2, #17
 800a952:	430a      	orrs	r2, r1
 800a954:	492a      	ldr	r1, [pc, #168]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a956:	4313      	orrs	r3, r2
 800a958:	610b      	str	r3, [r1, #16]
 800a95a:	e027      	b.n	800a9ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d112      	bne.n	800a988 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a962:	4b27      	ldr	r3, [pc, #156]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a96a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	6892      	ldr	r2, [r2, #8]
 800a972:	0211      	lsls	r1, r2, #8
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6912      	ldr	r2, [r2, #16]
 800a978:	0852      	lsrs	r2, r2, #1
 800a97a:	3a01      	subs	r2, #1
 800a97c:	0552      	lsls	r2, r2, #21
 800a97e:	430a      	orrs	r2, r1
 800a980:	491f      	ldr	r1, [pc, #124]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a982:	4313      	orrs	r3, r2
 800a984:	610b      	str	r3, [r1, #16]
 800a986:	e011      	b.n	800a9ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a988:	4b1d      	ldr	r3, [pc, #116]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a990:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	6892      	ldr	r2, [r2, #8]
 800a998:	0211      	lsls	r1, r2, #8
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	6952      	ldr	r2, [r2, #20]
 800a99e:	0852      	lsrs	r2, r2, #1
 800a9a0:	3a01      	subs	r2, #1
 800a9a2:	0652      	lsls	r2, r2, #25
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	4916      	ldr	r1, [pc, #88]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a9ac:	4b14      	ldr	r3, [pc, #80]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a13      	ldr	r2, [pc, #76]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b8:	f7fe fa74 	bl	8008ea4 <HAL_GetTick>
 800a9bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a9be:	e009      	b.n	800a9d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9c0:	f7fe fa70 	bl	8008ea4 <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d902      	bls.n	800a9d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	73fb      	strb	r3, [r7, #15]
          break;
 800a9d2:	e005      	b.n	800a9e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0ef      	beq.n	800a9c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d106      	bne.n	800a9f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a9e6:	4b06      	ldr	r3, [pc, #24]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	4904      	ldr	r1, [pc, #16]	@ (800aa00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	40021000 	.word	0x40021000

0800aa04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aa12:	4b6a      	ldr	r3, [pc, #424]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d018      	beq.n	800aa50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800aa1e:	4b67      	ldr	r3, [pc, #412]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f003 0203 	and.w	r2, r3, #3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d10d      	bne.n	800aa4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
       ||
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800aa36:	4b61      	ldr	r3, [pc, #388]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	091b      	lsrs	r3, r3, #4
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
       ||
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d047      	beq.n	800aada <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]
 800aa4e:	e044      	b.n	800aada <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d018      	beq.n	800aa8a <RCCEx_PLLSAI2_Config+0x86>
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d825      	bhi.n	800aaa8 <RCCEx_PLLSAI2_Config+0xa4>
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d002      	beq.n	800aa66 <RCCEx_PLLSAI2_Config+0x62>
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d009      	beq.n	800aa78 <RCCEx_PLLSAI2_Config+0x74>
 800aa64:	e020      	b.n	800aaa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aa66:	4b55      	ldr	r3, [pc, #340]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d11d      	bne.n	800aaae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa76:	e01a      	b.n	800aaae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aa78:	4b50      	ldr	r3, [pc, #320]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d116      	bne.n	800aab2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa88:	e013      	b.n	800aab2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aa8a:	4b4c      	ldr	r3, [pc, #304]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10f      	bne.n	800aab6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aa96:	4b49      	ldr	r3, [pc, #292]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aaa6:	e006      	b.n	800aab6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aaac:	e004      	b.n	800aab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aaae:	bf00      	nop
 800aab0:	e002      	b.n	800aab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aab2:	bf00      	nop
 800aab4:	e000      	b.n	800aab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aab6:	bf00      	nop
    }

    if(status == HAL_OK)
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10d      	bne.n	800aada <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aabe:	4b3f      	ldr	r3, [pc, #252]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6819      	ldr	r1, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	3b01      	subs	r3, #1
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	430b      	orrs	r3, r1
 800aad4:	4939      	ldr	r1, [pc, #228]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d167      	bne.n	800abb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800aae0:	4b36      	ldr	r3, [pc, #216]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a35      	ldr	r2, [pc, #212]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaec:	f7fe f9da 	bl	8008ea4 <HAL_GetTick>
 800aaf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aaf2:	e009      	b.n	800ab08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aaf4:	f7fe f9d6 	bl	8008ea4 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d902      	bls.n	800ab08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	73fb      	strb	r3, [r7, #15]
        break;
 800ab06:	e005      	b.n	800ab14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ab08:	4b2c      	ldr	r3, [pc, #176]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1ef      	bne.n	800aaf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d14a      	bne.n	800abb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d111      	bne.n	800ab44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ab20:	4b26      	ldr	r3, [pc, #152]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab22:	695b      	ldr	r3, [r3, #20]
 800ab24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800ab28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6892      	ldr	r2, [r2, #8]
 800ab30:	0211      	lsls	r1, r2, #8
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	68d2      	ldr	r2, [r2, #12]
 800ab36:	0912      	lsrs	r2, r2, #4
 800ab38:	0452      	lsls	r2, r2, #17
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	491f      	ldr	r1, [pc, #124]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	614b      	str	r3, [r1, #20]
 800ab42:	e011      	b.n	800ab68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ab44:	4b1d      	ldr	r3, [pc, #116]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800ab4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6892      	ldr	r2, [r2, #8]
 800ab54:	0211      	lsls	r1, r2, #8
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6912      	ldr	r2, [r2, #16]
 800ab5a:	0852      	lsrs	r2, r2, #1
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	0652      	lsls	r2, r2, #25
 800ab60:	430a      	orrs	r2, r1
 800ab62:	4916      	ldr	r1, [pc, #88]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ab68:	4b14      	ldr	r3, [pc, #80]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a13      	ldr	r2, [pc, #76]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab74:	f7fe f996 	bl	8008ea4 <HAL_GetTick>
 800ab78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ab7a:	e009      	b.n	800ab90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ab7c:	f7fe f992 	bl	8008ea4 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d902      	bls.n	800ab90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
          break;
 800ab8e:	e005      	b.n	800ab9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ab90:	4b0a      	ldr	r3, [pc, #40]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0ef      	beq.n	800ab7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d106      	bne.n	800abb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800aba2:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800aba4:	695a      	ldr	r2, [r3, #20]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	4904      	ldr	r1, [pc, #16]	@ (800abbc <RCCEx_PLLSAI2_Config+0x1b8>)
 800abac:	4313      	orrs	r3, r2
 800abae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	40021000 	.word	0x40021000

0800abc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d079      	beq.n	800acc6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d106      	bne.n	800abec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7fd ff2e 	bl	8008a48 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f003 0310 	and.w	r3, r3, #16
 800abfe:	2b10      	cmp	r3, #16
 800ac00:	d058      	beq.n	800acb4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	22ca      	movs	r2, #202	@ 0xca
 800ac08:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2253      	movs	r2, #83	@ 0x53
 800ac10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f880 	bl	800ad18 <RTC_EnterInitMode>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d127      	bne.n	800ac72 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6812      	ldr	r2, [r2, #0]
 800ac2c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ac30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac34:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6899      	ldr	r1, [r3, #8]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	431a      	orrs	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	68d2      	ldr	r2, [r2, #12]
 800ac5c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6919      	ldr	r1, [r3, #16]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	041a      	lsls	r2, r3, #16
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f884 	bl	800ad80 <RTC_ExitInitMode>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d113      	bne.n	800acaa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 0203 	bic.w	r2, r2, #3
 800ac90:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69da      	ldr	r2, [r3, #28]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	22ff      	movs	r2, #255	@ 0xff
 800acb0:	625a      	str	r2, [r3, #36]	@ 0x24
 800acb2:	e001      	b.n	800acb8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d103      	bne.n	800acc6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a0d      	ldr	r2, [pc, #52]	@ (800ad14 <HAL_RTC_WaitForSynchro+0x44>)
 800acde:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ace0:	f7fe f8e0 	bl	8008ea4 <HAL_GetTick>
 800ace4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ace6:	e009      	b.n	800acfc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ace8:	f7fe f8dc 	bl	8008ea4 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800acf6:	d901      	bls.n	800acfc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e007      	b.n	800ad0c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f003 0320 	and.w	r3, r3, #32
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0ee      	beq.n	800ace8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	0003ff5f 	.word	0x0003ff5f

0800ad18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d120      	bne.n	800ad74 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ad3c:	f7fe f8b2 	bl	8008ea4 <HAL_GetTick>
 800ad40:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ad42:	e00d      	b.n	800ad60 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ad44:	f7fe f8ae 	bl	8008ea4 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad52:	d905      	bls.n	800ad60 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d102      	bne.n	800ad74 <RTC_EnterInitMode+0x5c>
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d1e7      	bne.n	800ad44 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800ad8c:	4b1a      	ldr	r3, [pc, #104]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	4a19      	ldr	r2, [pc, #100]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800ad92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad96:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ad98:	4b17      	ldr	r3, [pc, #92]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10c      	bne.n	800adbe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7ff ff93 	bl	800acd0 <HAL_RTC_WaitForSynchro>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01e      	beq.n	800adee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2203      	movs	r2, #3
 800adb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	73fb      	strb	r3, [r7, #15]
 800adbc:	e017      	b.n	800adee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800adbe:	4b0e      	ldr	r3, [pc, #56]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	4a0d      	ldr	r2, [pc, #52]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800adc4:	f023 0320 	bic.w	r3, r3, #32
 800adc8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff ff80 	bl	800acd0 <HAL_RTC_WaitForSynchro>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d005      	beq.n	800ade2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2203      	movs	r2, #3
 800adda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ade2:	4b05      	ldr	r3, [pc, #20]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	4a04      	ldr	r2, [pc, #16]	@ (800adf8 <RTC_ExitInitMode+0x78>)
 800ade8:	f043 0320 	orr.w	r3, r3, #32
 800adec:	6093      	str	r3, [r2, #8]
  }

  return status;
 800adee:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	40002800 	.word	0x40002800

0800adfc <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3350      	adds	r3, #80	@ 0x50
 800ae0e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	009a      	lsls	r2, r3, #2
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4413      	add	r3, r2
 800ae18:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6013      	str	r3, [r2, #0]
}
 800ae22:	bf00      	nop
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e040      	b.n	800aec2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d106      	bne.n	800ae56 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7fd ff17 	bl	8008c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2224      	movs	r2, #36	@ 0x24
 800ae5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 0201 	bic.w	r2, r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fedb 	bl	800bc30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fc20 	bl	800b6c0 <UART_SetConfig>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d101      	bne.n	800ae8a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e01b      	b.n	800aec2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aea8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f042 0201 	orr.w	r2, r2, #1
 800aeb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 ff5a 	bl	800bd74 <UART_CheckIdleState>
 800aec0:	4603      	mov	r3, r0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b08a      	sub	sp, #40	@ 0x28
 800aece:	af02      	add	r7, sp, #8
 800aed0:	60f8      	str	r0, [r7, #12]
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	603b      	str	r3, [r7, #0]
 800aed6:	4613      	mov	r3, r2
 800aed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aede:	2b20      	cmp	r3, #32
 800aee0:	d177      	bne.n	800afd2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <HAL_UART_Transmit+0x24>
 800aee8:	88fb      	ldrh	r3, [r7, #6]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e070      	b.n	800afd4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2221      	movs	r2, #33	@ 0x21
 800aefe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af00:	f7fd ffd0 	bl	8008ea4 <HAL_GetTick>
 800af04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	88fa      	ldrh	r2, [r7, #6]
 800af0a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	88fa      	ldrh	r2, [r7, #6]
 800af12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af1e:	d108      	bne.n	800af32 <HAL_UART_Transmit+0x68>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d104      	bne.n	800af32 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800af28:	2300      	movs	r3, #0
 800af2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	61bb      	str	r3, [r7, #24]
 800af30:	e003      	b.n	800af3a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af3a:	e02f      	b.n	800af9c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2200      	movs	r2, #0
 800af44:	2180      	movs	r1, #128	@ 0x80
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 ffbc 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d004      	beq.n	800af5c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2220      	movs	r2, #32
 800af56:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e03b      	b.n	800afd4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10b      	bne.n	800af7a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	881a      	ldrh	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af6e:	b292      	uxth	r2, r2
 800af70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	3302      	adds	r3, #2
 800af76:	61bb      	str	r3, [r7, #24]
 800af78:	e007      	b.n	800af8a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	3301      	adds	r3, #1
 800af88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800af90:	b29b      	uxth	r3, r3
 800af92:	3b01      	subs	r3, #1
 800af94:	b29a      	uxth	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1c9      	bne.n	800af3c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2200      	movs	r2, #0
 800afb0:	2140      	movs	r1, #64	@ 0x40
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f000 ff86 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d004      	beq.n	800afc8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2220      	movs	r2, #32
 800afc2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e005      	b.n	800afd4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2220      	movs	r2, #32
 800afcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	e000      	b.n	800afd4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800afd2:	2302      	movs	r3, #2
  }
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08a      	sub	sp, #40	@ 0x28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	4613      	mov	r3, r2
 800afe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d137      	bne.n	800b064 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <HAL_UART_Receive_IT+0x24>
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e030      	b.n	800b066 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a18      	ldr	r2, [pc, #96]	@ (800b070 <HAL_UART_Receive_IT+0x94>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d01f      	beq.n	800b054 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d018      	beq.n	800b054 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	e853 3f00 	ldrex	r3, [r3]
 800b02e:	613b      	str	r3, [r7, #16]
   return(result);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b036:	627b      	str	r3, [r7, #36]	@ 0x24
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	461a      	mov	r2, r3
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	623b      	str	r3, [r7, #32]
 800b042:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b044:	69f9      	ldr	r1, [r7, #28]
 800b046:	6a3a      	ldr	r2, [r7, #32]
 800b048:	e841 2300 	strex	r3, r2, [r1]
 800b04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e6      	bne.n	800b022 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b054:	88fb      	ldrh	r3, [r7, #6]
 800b056:	461a      	mov	r2, r3
 800b058:	68b9      	ldr	r1, [r7, #8]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 ffa0 	bl	800bfa0 <UART_Start_Receive_IT>
 800b060:	4603      	mov	r3, r0
 800b062:	e000      	b.n	800b066 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b064:	2302      	movs	r3, #2
  }
}
 800b066:	4618      	mov	r0, r3
 800b068:	3728      	adds	r7, #40	@ 0x28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	40008000 	.word	0x40008000

0800b074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b0ba      	sub	sp, #232	@ 0xe8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b09a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b09e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b0a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d115      	bne.n	800b0dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b4:	f003 0320 	and.w	r3, r3, #32
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00f      	beq.n	800b0dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d009      	beq.n	800b0dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 82ca 	beq.w	800b666 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	4798      	blx	r3
      }
      return;
 800b0da:	e2c4      	b.n	800b666 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b0dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 8117 	beq.w	800b314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d106      	bne.n	800b100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b0f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b0f6:	4b85      	ldr	r3, [pc, #532]	@ (800b30c <HAL_UART_IRQHandler+0x298>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 810a 	beq.w	800b314 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d011      	beq.n	800b130 <HAL_UART_IRQHandler+0xbc>
 800b10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2201      	movs	r2, #1
 800b11e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b126:	f043 0201 	orr.w	r2, r3, #1
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b134:	f003 0302 	and.w	r3, r3, #2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d011      	beq.n	800b160 <HAL_UART_IRQHandler+0xec>
 800b13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00b      	beq.n	800b160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2202      	movs	r2, #2
 800b14e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b156:	f043 0204 	orr.w	r2, r3, #4
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d011      	beq.n	800b190 <HAL_UART_IRQHandler+0x11c>
 800b16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2204      	movs	r2, #4
 800b17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b186:	f043 0202 	orr.w	r2, r3, #2
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b194:	f003 0308 	and.w	r3, r3, #8
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d017      	beq.n	800b1cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1c2:	f043 0208 	orr.w	r2, r3, #8
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d012      	beq.n	800b1fe <HAL_UART_IRQHandler+0x18a>
 800b1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00c      	beq.n	800b1fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1f4:	f043 0220 	orr.w	r2, r3, #32
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 8230 	beq.w	800b66a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b20e:	f003 0320 	and.w	r3, r3, #32
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00d      	beq.n	800b232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b21a:	f003 0320 	and.w	r3, r3, #32
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d007      	beq.n	800b232 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b238:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b246:	2b40      	cmp	r3, #64	@ 0x40
 800b248:	d005      	beq.n	800b256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b24a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b24e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b252:	2b00      	cmp	r3, #0
 800b254:	d04f      	beq.n	800b2f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 ff68 	bl	800c12c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b266:	2b40      	cmp	r3, #64	@ 0x40
 800b268:	d141      	bne.n	800b2ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3308      	adds	r3, #8
 800b270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b29a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b2a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b2ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1d9      	bne.n	800b26a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d013      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2c2:	4a13      	ldr	r2, [pc, #76]	@ (800b310 <HAL_UART_IRQHandler+0x29c>)
 800b2c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fd ff45 	bl	800915a <HAL_DMA_Abort_IT>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d017      	beq.n	800b306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2e4:	e00f      	b.n	800b306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f9d4 	bl	800b694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ec:	e00b      	b.n	800b306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f9d0 	bl	800b694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2f4:	e007      	b.n	800b306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f9cc 	bl	800b694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b304:	e1b1      	b.n	800b66a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b306:	bf00      	nop
    return;
 800b308:	e1af      	b.n	800b66a <HAL_UART_IRQHandler+0x5f6>
 800b30a:	bf00      	nop
 800b30c:	04000120 	.word	0x04000120
 800b310:	0800c1f5 	.word	0x0800c1f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b318:	2b01      	cmp	r3, #1
 800b31a:	f040 816a 	bne.w	800b5f2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b322:	f003 0310 	and.w	r3, r3, #16
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 8163 	beq.w	800b5f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b330:	f003 0310 	and.w	r3, r3, #16
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 815c 	beq.w	800b5f2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2210      	movs	r2, #16
 800b340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b34c:	2b40      	cmp	r3, #64	@ 0x40
 800b34e:	f040 80d4 	bne.w	800b4fa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b35e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b362:	2b00      	cmp	r3, #0
 800b364:	f000 80ad 	beq.w	800b4c2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b36e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b372:	429a      	cmp	r2, r3
 800b374:	f080 80a5 	bcs.w	800b4c2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b37e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0320 	and.w	r3, r3, #32
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 8086 	bne.w	800b4a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b3a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b3ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b3ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b3ce:	e841 2300 	strex	r3, r2, [r1]
 800b3d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1da      	bne.n	800b394 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3f0:	f023 0301 	bic.w	r3, r3, #1
 800b3f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b402:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b406:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b40a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b40e:	e841 2300 	strex	r3, r2, [r1]
 800b412:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1e1      	bne.n	800b3de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3308      	adds	r3, #8
 800b420:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b424:	e853 3f00 	ldrex	r3, [r3]
 800b428:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b42a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3308      	adds	r3, #8
 800b43a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b43e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b440:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b444:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b44c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e3      	bne.n	800b41a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2220      	movs	r2, #32
 800b456:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b46e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b470:	f023 0310 	bic.w	r3, r3, #16
 800b474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b482:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b484:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b48a:	e841 2300 	strex	r3, r2, [r1]
 800b48e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1e4      	bne.n	800b460 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fd fe1f 	bl	80090de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f8f4 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b4c0:	e0d5      	b.n	800b66e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b4c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	f040 80ce 	bne.w	800b66e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	f040 80c5 	bne.w	800b66e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f8d8 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
      return;
 800b4f8:	e0b9      	b.n	800b66e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b506:	b29b      	uxth	r3, r3
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b514:	b29b      	uxth	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 80ab 	beq.w	800b672 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800b51c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 80a6 	beq.w	800b672 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b53a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b548:	647b      	str	r3, [r7, #68]	@ 0x44
 800b54a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e4      	bne.n	800b526 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3308      	adds	r3, #8
 800b562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	623b      	str	r3, [r7, #32]
   return(result);
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	f023 0301 	bic.w	r3, r3, #1
 800b572:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3308      	adds	r3, #8
 800b57c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b580:	633a      	str	r2, [r7, #48]	@ 0x30
 800b582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e3      	bne.n	800b55c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2220      	movs	r2, #32
 800b598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	e853 3f00 	ldrex	r3, [r3]
 800b5b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f023 0310 	bic.w	r3, r3, #16
 800b5bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b5ca:	61fb      	str	r3, [r7, #28]
 800b5cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ce:	69b9      	ldr	r1, [r7, #24]
 800b5d0:	69fa      	ldr	r2, [r7, #28]
 800b5d2:	e841 2300 	strex	r3, r2, [r1]
 800b5d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1e4      	bne.n	800b5a8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f85c 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5f0:	e03f      	b.n	800b672 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00e      	beq.n	800b61c <HAL_UART_IRQHandler+0x5a8>
 800b5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d008      	beq.n	800b61c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 ffe9 	bl	800c5ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b61a:	e02d      	b.n	800b678 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00e      	beq.n	800b646 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b62c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b630:	2b00      	cmp	r3, #0
 800b632:	d008      	beq.n	800b646 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d01c      	beq.n	800b676 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
    }
    return;
 800b644:	e017      	b.n	800b676 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d012      	beq.n	800b678 <HAL_UART_IRQHandler+0x604>
 800b652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00c      	beq.n	800b678 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fdde 	bl	800c220 <UART_EndTransmit_IT>
    return;
 800b664:	e008      	b.n	800b678 <HAL_UART_IRQHandler+0x604>
      return;
 800b666:	bf00      	nop
 800b668:	e006      	b.n	800b678 <HAL_UART_IRQHandler+0x604>
    return;
 800b66a:	bf00      	nop
 800b66c:	e004      	b.n	800b678 <HAL_UART_IRQHandler+0x604>
      return;
 800b66e:	bf00      	nop
 800b670:	e002      	b.n	800b678 <HAL_UART_IRQHandler+0x604>
      return;
 800b672:	bf00      	nop
 800b674:	e000      	b.n	800b678 <HAL_UART_IRQHandler+0x604>
    return;
 800b676:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b678:	37e8      	adds	r7, #232	@ 0xe8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop

0800b680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6c4:	b08a      	sub	sp, #40	@ 0x28
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	431a      	orrs	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	69db      	ldr	r3, [r3, #28]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	4ba4      	ldr	r3, [pc, #656]	@ (800b980 <UART_SetConfig+0x2c0>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	6812      	ldr	r2, [r2, #0]
 800b6f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a99      	ldr	r2, [pc, #612]	@ (800b984 <UART_SetConfig+0x2c4>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d004      	beq.n	800b72c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b728:	4313      	orrs	r3, r2
 800b72a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b73c:	430a      	orrs	r2, r1
 800b73e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a90      	ldr	r2, [pc, #576]	@ (800b988 <UART_SetConfig+0x2c8>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d126      	bne.n	800b798 <UART_SetConfig+0xd8>
 800b74a:	4b90      	ldr	r3, [pc, #576]	@ (800b98c <UART_SetConfig+0x2cc>)
 800b74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b750:	f003 0303 	and.w	r3, r3, #3
 800b754:	2b03      	cmp	r3, #3
 800b756:	d81b      	bhi.n	800b790 <UART_SetConfig+0xd0>
 800b758:	a201      	add	r2, pc, #4	@ (adr r2, 800b760 <UART_SetConfig+0xa0>)
 800b75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75e:	bf00      	nop
 800b760:	0800b771 	.word	0x0800b771
 800b764:	0800b781 	.word	0x0800b781
 800b768:	0800b779 	.word	0x0800b779
 800b76c:	0800b789 	.word	0x0800b789
 800b770:	2301      	movs	r3, #1
 800b772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b776:	e116      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b778:	2302      	movs	r3, #2
 800b77a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b77e:	e112      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b780:	2304      	movs	r3, #4
 800b782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b786:	e10e      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b788:	2308      	movs	r3, #8
 800b78a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b78e:	e10a      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b790:	2310      	movs	r3, #16
 800b792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b796:	e106      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a7c      	ldr	r2, [pc, #496]	@ (800b990 <UART_SetConfig+0x2d0>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d138      	bne.n	800b814 <UART_SetConfig+0x154>
 800b7a2:	4b7a      	ldr	r3, [pc, #488]	@ (800b98c <UART_SetConfig+0x2cc>)
 800b7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7a8:	f003 030c 	and.w	r3, r3, #12
 800b7ac:	2b0c      	cmp	r3, #12
 800b7ae:	d82d      	bhi.n	800b80c <UART_SetConfig+0x14c>
 800b7b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b8 <UART_SetConfig+0xf8>)
 800b7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b6:	bf00      	nop
 800b7b8:	0800b7ed 	.word	0x0800b7ed
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800b80d 	.word	0x0800b80d
 800b7c4:	0800b80d 	.word	0x0800b80d
 800b7c8:	0800b7fd 	.word	0x0800b7fd
 800b7cc:	0800b80d 	.word	0x0800b80d
 800b7d0:	0800b80d 	.word	0x0800b80d
 800b7d4:	0800b80d 	.word	0x0800b80d
 800b7d8:	0800b7f5 	.word	0x0800b7f5
 800b7dc:	0800b80d 	.word	0x0800b80d
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	0800b80d 	.word	0x0800b80d
 800b7e8:	0800b805 	.word	0x0800b805
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b7f2:	e0d8      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b7fa:	e0d4      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b802:	e0d0      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b804:	2308      	movs	r3, #8
 800b806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b80a:	e0cc      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b80c:	2310      	movs	r3, #16
 800b80e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b812:	e0c8      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a5e      	ldr	r2, [pc, #376]	@ (800b994 <UART_SetConfig+0x2d4>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d125      	bne.n	800b86a <UART_SetConfig+0x1aa>
 800b81e:	4b5b      	ldr	r3, [pc, #364]	@ (800b98c <UART_SetConfig+0x2cc>)
 800b820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b824:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b828:	2b30      	cmp	r3, #48	@ 0x30
 800b82a:	d016      	beq.n	800b85a <UART_SetConfig+0x19a>
 800b82c:	2b30      	cmp	r3, #48	@ 0x30
 800b82e:	d818      	bhi.n	800b862 <UART_SetConfig+0x1a2>
 800b830:	2b20      	cmp	r3, #32
 800b832:	d00a      	beq.n	800b84a <UART_SetConfig+0x18a>
 800b834:	2b20      	cmp	r3, #32
 800b836:	d814      	bhi.n	800b862 <UART_SetConfig+0x1a2>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <UART_SetConfig+0x182>
 800b83c:	2b10      	cmp	r3, #16
 800b83e:	d008      	beq.n	800b852 <UART_SetConfig+0x192>
 800b840:	e00f      	b.n	800b862 <UART_SetConfig+0x1a2>
 800b842:	2300      	movs	r3, #0
 800b844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b848:	e0ad      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b84a:	2302      	movs	r3, #2
 800b84c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b850:	e0a9      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b852:	2304      	movs	r3, #4
 800b854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b858:	e0a5      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b85a:	2308      	movs	r3, #8
 800b85c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b860:	e0a1      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b862:	2310      	movs	r3, #16
 800b864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b868:	e09d      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a4a      	ldr	r2, [pc, #296]	@ (800b998 <UART_SetConfig+0x2d8>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d125      	bne.n	800b8c0 <UART_SetConfig+0x200>
 800b874:	4b45      	ldr	r3, [pc, #276]	@ (800b98c <UART_SetConfig+0x2cc>)
 800b876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b87a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b87e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b880:	d016      	beq.n	800b8b0 <UART_SetConfig+0x1f0>
 800b882:	2bc0      	cmp	r3, #192	@ 0xc0
 800b884:	d818      	bhi.n	800b8b8 <UART_SetConfig+0x1f8>
 800b886:	2b80      	cmp	r3, #128	@ 0x80
 800b888:	d00a      	beq.n	800b8a0 <UART_SetConfig+0x1e0>
 800b88a:	2b80      	cmp	r3, #128	@ 0x80
 800b88c:	d814      	bhi.n	800b8b8 <UART_SetConfig+0x1f8>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <UART_SetConfig+0x1d8>
 800b892:	2b40      	cmp	r3, #64	@ 0x40
 800b894:	d008      	beq.n	800b8a8 <UART_SetConfig+0x1e8>
 800b896:	e00f      	b.n	800b8b8 <UART_SetConfig+0x1f8>
 800b898:	2300      	movs	r3, #0
 800b89a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b89e:	e082      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b8a6:	e07e      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b8a8:	2304      	movs	r3, #4
 800b8aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b8ae:	e07a      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b8b0:	2308      	movs	r3, #8
 800b8b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b8b6:	e076      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b8b8:	2310      	movs	r3, #16
 800b8ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b8be:	e072      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a35      	ldr	r2, [pc, #212]	@ (800b99c <UART_SetConfig+0x2dc>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d12a      	bne.n	800b920 <UART_SetConfig+0x260>
 800b8ca:	4b30      	ldr	r3, [pc, #192]	@ (800b98c <UART_SetConfig+0x2cc>)
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8d8:	d01a      	beq.n	800b910 <UART_SetConfig+0x250>
 800b8da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8de:	d81b      	bhi.n	800b918 <UART_SetConfig+0x258>
 800b8e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8e4:	d00c      	beq.n	800b900 <UART_SetConfig+0x240>
 800b8e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8ea:	d815      	bhi.n	800b918 <UART_SetConfig+0x258>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d003      	beq.n	800b8f8 <UART_SetConfig+0x238>
 800b8f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8f4:	d008      	beq.n	800b908 <UART_SetConfig+0x248>
 800b8f6:	e00f      	b.n	800b918 <UART_SetConfig+0x258>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b8fe:	e052      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b900:	2302      	movs	r3, #2
 800b902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b906:	e04e      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b908:	2304      	movs	r3, #4
 800b90a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b90e:	e04a      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b910:	2308      	movs	r3, #8
 800b912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b916:	e046      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b918:	2310      	movs	r3, #16
 800b91a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b91e:	e042      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a17      	ldr	r2, [pc, #92]	@ (800b984 <UART_SetConfig+0x2c4>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d13a      	bne.n	800b9a0 <UART_SetConfig+0x2e0>
 800b92a:	4b18      	ldr	r3, [pc, #96]	@ (800b98c <UART_SetConfig+0x2cc>)
 800b92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b930:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b934:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b938:	d01a      	beq.n	800b970 <UART_SetConfig+0x2b0>
 800b93a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b93e:	d81b      	bhi.n	800b978 <UART_SetConfig+0x2b8>
 800b940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b944:	d00c      	beq.n	800b960 <UART_SetConfig+0x2a0>
 800b946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b94a:	d815      	bhi.n	800b978 <UART_SetConfig+0x2b8>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <UART_SetConfig+0x298>
 800b950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b954:	d008      	beq.n	800b968 <UART_SetConfig+0x2a8>
 800b956:	e00f      	b.n	800b978 <UART_SetConfig+0x2b8>
 800b958:	2300      	movs	r3, #0
 800b95a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b95e:	e022      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b960:	2302      	movs	r3, #2
 800b962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b966:	e01e      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b968:	2304      	movs	r3, #4
 800b96a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b96e:	e01a      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b976:	e016      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b978:	2310      	movs	r3, #16
 800b97a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b97e:	e012      	b.n	800b9a6 <UART_SetConfig+0x2e6>
 800b980:	efff69f3 	.word	0xefff69f3
 800b984:	40008000 	.word	0x40008000
 800b988:	40013800 	.word	0x40013800
 800b98c:	40021000 	.word	0x40021000
 800b990:	40004400 	.word	0x40004400
 800b994:	40004800 	.word	0x40004800
 800b998:	40004c00 	.word	0x40004c00
 800b99c:	40005000 	.word	0x40005000
 800b9a0:	2310      	movs	r3, #16
 800b9a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a9f      	ldr	r2, [pc, #636]	@ (800bc28 <UART_SetConfig+0x568>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d17a      	bne.n	800baa6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b9b4:	2b08      	cmp	r3, #8
 800b9b6:	d824      	bhi.n	800ba02 <UART_SetConfig+0x342>
 800b9b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c0 <UART_SetConfig+0x300>)
 800b9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9be:	bf00      	nop
 800b9c0:	0800b9e5 	.word	0x0800b9e5
 800b9c4:	0800ba03 	.word	0x0800ba03
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800ba03 	.word	0x0800ba03
 800b9d0:	0800b9f3 	.word	0x0800b9f3
 800b9d4:	0800ba03 	.word	0x0800ba03
 800b9d8:	0800ba03 	.word	0x0800ba03
 800b9dc:	0800ba03 	.word	0x0800ba03
 800b9e0:	0800b9fb 	.word	0x0800b9fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e4:	f7fe fba4 	bl	800a130 <HAL_RCC_GetPCLK1Freq>
 800b9e8:	61f8      	str	r0, [r7, #28]
        break;
 800b9ea:	e010      	b.n	800ba0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9ec:	4b8f      	ldr	r3, [pc, #572]	@ (800bc2c <UART_SetConfig+0x56c>)
 800b9ee:	61fb      	str	r3, [r7, #28]
        break;
 800b9f0:	e00d      	b.n	800ba0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9f2:	f7fe fb05 	bl	800a000 <HAL_RCC_GetSysClockFreq>
 800b9f6:	61f8      	str	r0, [r7, #28]
        break;
 800b9f8:	e009      	b.n	800ba0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9fe:	61fb      	str	r3, [r7, #28]
        break;
 800ba00:	e005      	b.n	800ba0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ba0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80fb 	beq.w	800bc0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	4413      	add	r3, r2
 800ba20:	69fa      	ldr	r2, [r7, #28]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d305      	bcc.n	800ba32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ba2c:	69fa      	ldr	r2, [r7, #28]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d903      	bls.n	800ba3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ba38:	e0e8      	b.n	800bc0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	461c      	mov	r4, r3
 800ba40:	4615      	mov	r5, r2
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	022b      	lsls	r3, r5, #8
 800ba4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ba50:	0222      	lsls	r2, r4, #8
 800ba52:	68f9      	ldr	r1, [r7, #12]
 800ba54:	6849      	ldr	r1, [r1, #4]
 800ba56:	0849      	lsrs	r1, r1, #1
 800ba58:	2000      	movs	r0, #0
 800ba5a:	4688      	mov	r8, r1
 800ba5c:	4681      	mov	r9, r0
 800ba5e:	eb12 0a08 	adds.w	sl, r2, r8
 800ba62:	eb43 0b09 	adc.w	fp, r3, r9
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	603b      	str	r3, [r7, #0]
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba74:	4650      	mov	r0, sl
 800ba76:	4659      	mov	r1, fp
 800ba78:	f7fc fc12 	bl	80082a0 <__aeabi_uldivmod>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4613      	mov	r3, r2
 800ba82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba8a:	d308      	bcc.n	800ba9e <UART_SetConfig+0x3de>
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba92:	d204      	bcs.n	800ba9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	69ba      	ldr	r2, [r7, #24]
 800ba9a:	60da      	str	r2, [r3, #12]
 800ba9c:	e0b6      	b.n	800bc0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800baa4:	e0b2      	b.n	800bc0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baae:	d15e      	bne.n	800bb6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800bab0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d828      	bhi.n	800bb0a <UART_SetConfig+0x44a>
 800bab8:	a201      	add	r2, pc, #4	@ (adr r2, 800bac0 <UART_SetConfig+0x400>)
 800baba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babe:	bf00      	nop
 800bac0:	0800bae5 	.word	0x0800bae5
 800bac4:	0800baed 	.word	0x0800baed
 800bac8:	0800baf5 	.word	0x0800baf5
 800bacc:	0800bb0b 	.word	0x0800bb0b
 800bad0:	0800bafb 	.word	0x0800bafb
 800bad4:	0800bb0b 	.word	0x0800bb0b
 800bad8:	0800bb0b 	.word	0x0800bb0b
 800badc:	0800bb0b 	.word	0x0800bb0b
 800bae0:	0800bb03 	.word	0x0800bb03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bae4:	f7fe fb24 	bl	800a130 <HAL_RCC_GetPCLK1Freq>
 800bae8:	61f8      	str	r0, [r7, #28]
        break;
 800baea:	e014      	b.n	800bb16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800baec:	f7fe fb36 	bl	800a15c <HAL_RCC_GetPCLK2Freq>
 800baf0:	61f8      	str	r0, [r7, #28]
        break;
 800baf2:	e010      	b.n	800bb16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800baf4:	4b4d      	ldr	r3, [pc, #308]	@ (800bc2c <UART_SetConfig+0x56c>)
 800baf6:	61fb      	str	r3, [r7, #28]
        break;
 800baf8:	e00d      	b.n	800bb16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bafa:	f7fe fa81 	bl	800a000 <HAL_RCC_GetSysClockFreq>
 800bafe:	61f8      	str	r0, [r7, #28]
        break;
 800bb00:	e009      	b.n	800bb16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb06:	61fb      	str	r3, [r7, #28]
        break;
 800bb08:	e005      	b.n	800bb16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800bb14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d077      	beq.n	800bc0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	005a      	lsls	r2, r3, #1
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	085b      	lsrs	r3, r3, #1
 800bb26:	441a      	add	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	2b0f      	cmp	r3, #15
 800bb36:	d916      	bls.n	800bb66 <UART_SetConfig+0x4a6>
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb3e:	d212      	bcs.n	800bb66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	f023 030f 	bic.w	r3, r3, #15
 800bb48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	085b      	lsrs	r3, r3, #1
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f003 0307 	and.w	r3, r3, #7
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	8afb      	ldrh	r3, [r7, #22]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	8afa      	ldrh	r2, [r7, #22]
 800bb62:	60da      	str	r2, [r3, #12]
 800bb64:	e052      	b.n	800bc0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800bb6c:	e04e      	b.n	800bc0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bb72:	2b08      	cmp	r3, #8
 800bb74:	d827      	bhi.n	800bbc6 <UART_SetConfig+0x506>
 800bb76:	a201      	add	r2, pc, #4	@ (adr r2, 800bb7c <UART_SetConfig+0x4bc>)
 800bb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7c:	0800bba1 	.word	0x0800bba1
 800bb80:	0800bba9 	.word	0x0800bba9
 800bb84:	0800bbb1 	.word	0x0800bbb1
 800bb88:	0800bbc7 	.word	0x0800bbc7
 800bb8c:	0800bbb7 	.word	0x0800bbb7
 800bb90:	0800bbc7 	.word	0x0800bbc7
 800bb94:	0800bbc7 	.word	0x0800bbc7
 800bb98:	0800bbc7 	.word	0x0800bbc7
 800bb9c:	0800bbbf 	.word	0x0800bbbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bba0:	f7fe fac6 	bl	800a130 <HAL_RCC_GetPCLK1Freq>
 800bba4:	61f8      	str	r0, [r7, #28]
        break;
 800bba6:	e014      	b.n	800bbd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bba8:	f7fe fad8 	bl	800a15c <HAL_RCC_GetPCLK2Freq>
 800bbac:	61f8      	str	r0, [r7, #28]
        break;
 800bbae:	e010      	b.n	800bbd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbb0:	4b1e      	ldr	r3, [pc, #120]	@ (800bc2c <UART_SetConfig+0x56c>)
 800bbb2:	61fb      	str	r3, [r7, #28]
        break;
 800bbb4:	e00d      	b.n	800bbd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbb6:	f7fe fa23 	bl	800a000 <HAL_RCC_GetSysClockFreq>
 800bbba:	61f8      	str	r0, [r7, #28]
        break;
 800bbbc:	e009      	b.n	800bbd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbc2:	61fb      	str	r3, [r7, #28]
        break;
 800bbc4:	e005      	b.n	800bbd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800bbd0:	bf00      	nop
    }

    if (pclk != 0U)
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d019      	beq.n	800bc0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	085a      	lsrs	r2, r3, #1
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	441a      	add	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	2b0f      	cmp	r3, #15
 800bbf0:	d909      	bls.n	800bc06 <UART_SetConfig+0x546>
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbf8:	d205      	bcs.n	800bc06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	60da      	str	r2, [r3, #12]
 800bc04:	e002      	b.n	800bc0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bc18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3728      	adds	r7, #40	@ 0x28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc26:	bf00      	nop
 800bc28:	40008000 	.word	0x40008000
 800bc2c:	00f42400 	.word	0x00f42400

0800bc30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	f003 0308 	and.w	r3, r3, #8
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00a      	beq.n	800bce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	430a      	orrs	r2, r1
 800bce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce6:	f003 0320 	and.w	r3, r3, #32
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00a      	beq.n	800bd04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	430a      	orrs	r2, r1
 800bd02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d01a      	beq.n	800bd46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	430a      	orrs	r2, r1
 800bd24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd2e:	d10a      	bne.n	800bd46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00a      	beq.n	800bd68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	605a      	str	r2, [r3, #4]
  }
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b098      	sub	sp, #96	@ 0x60
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd84:	f7fd f88e 	bl	8008ea4 <HAL_GetTick>
 800bd88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b08      	cmp	r3, #8
 800bd96:	d12e      	bne.n	800bdf6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bda0:	2200      	movs	r2, #0
 800bda2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f88c 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d021      	beq.n	800bdf6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e6      	bne.n	800bdb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2220      	movs	r2, #32
 800bde8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e062      	b.n	800bebc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 0304 	and.w	r3, r3, #4
 800be00:	2b04      	cmp	r3, #4
 800be02:	d149      	bne.n	800be98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be0c:	2200      	movs	r2, #0
 800be0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f856 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d03c      	beq.n	800be98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	e853 3f00 	ldrex	r3, [r3]
 800be2a:	623b      	str	r3, [r7, #32]
   return(result);
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	461a      	mov	r2, r3
 800be3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800be3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be44:	e841 2300 	strex	r3, r2, [r1]
 800be48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1e6      	bne.n	800be1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3308      	adds	r3, #8
 800be56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	e853 3f00 	ldrex	r3, [r3]
 800be5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f023 0301 	bic.w	r3, r3, #1
 800be66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be70:	61fa      	str	r2, [r7, #28]
 800be72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be74:	69b9      	ldr	r1, [r7, #24]
 800be76:	69fa      	ldr	r2, [r7, #28]
 800be78:	e841 2300 	strex	r3, r2, [r1]
 800be7c:	617b      	str	r3, [r7, #20]
   return(result);
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e5      	bne.n	800be50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2220      	movs	r2, #32
 800be88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	e011      	b.n	800bebc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2220      	movs	r2, #32
 800be9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2220      	movs	r2, #32
 800bea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3758      	adds	r7, #88	@ 0x58
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bed4:	e04f      	b.n	800bf76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d04b      	beq.n	800bf76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bede:	f7fc ffe1 	bl	8008ea4 <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	429a      	cmp	r2, r3
 800beec:	d302      	bcc.n	800bef4 <UART_WaitOnFlagUntilTimeout+0x30>
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bef4:	2303      	movs	r3, #3
 800bef6:	e04e      	b.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0304 	and.w	r3, r3, #4
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d037      	beq.n	800bf76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2b80      	cmp	r3, #128	@ 0x80
 800bf0a:	d034      	beq.n	800bf76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b40      	cmp	r3, #64	@ 0x40
 800bf10:	d031      	beq.n	800bf76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	f003 0308 	and.w	r3, r3, #8
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d110      	bne.n	800bf42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2208      	movs	r2, #8
 800bf26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 f8ff 	bl	800c12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2208      	movs	r2, #8
 800bf32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e029      	b.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf50:	d111      	bne.n	800bf76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 f8e5 	bl	800c12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2220      	movs	r2, #32
 800bf66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bf72:	2303      	movs	r3, #3
 800bf74:	e00f      	b.n	800bf96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	69da      	ldr	r2, [r3, #28]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	bf0c      	ite	eq
 800bf86:	2301      	moveq	r3, #1
 800bf88:	2300      	movne	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d0a0      	beq.n	800bed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b097      	sub	sp, #92	@ 0x5c
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	88fa      	ldrh	r2, [r7, #6]
 800bfb8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	88fa      	ldrh	r2, [r7, #6]
 800bfc0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfd2:	d10e      	bne.n	800bff2 <UART_Start_Receive_IT+0x52>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d105      	bne.n	800bfe8 <UART_Start_Receive_IT+0x48>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bfe2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bfe6:	e02d      	b.n	800c044 <UART_Start_Receive_IT+0xa4>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	22ff      	movs	r2, #255	@ 0xff
 800bfec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bff0:	e028      	b.n	800c044 <UART_Start_Receive_IT+0xa4>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10d      	bne.n	800c016 <UART_Start_Receive_IT+0x76>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d104      	bne.n	800c00c <UART_Start_Receive_IT+0x6c>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	22ff      	movs	r2, #255	@ 0xff
 800c006:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c00a:	e01b      	b.n	800c044 <UART_Start_Receive_IT+0xa4>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	227f      	movs	r2, #127	@ 0x7f
 800c010:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c014:	e016      	b.n	800c044 <UART_Start_Receive_IT+0xa4>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c01e:	d10d      	bne.n	800c03c <UART_Start_Receive_IT+0x9c>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d104      	bne.n	800c032 <UART_Start_Receive_IT+0x92>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	227f      	movs	r2, #127	@ 0x7f
 800c02c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c030:	e008      	b.n	800c044 <UART_Start_Receive_IT+0xa4>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	223f      	movs	r2, #63	@ 0x3f
 800c036:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c03a:	e003      	b.n	800c044 <UART_Start_Receive_IT+0xa4>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2222      	movs	r2, #34	@ 0x22
 800c050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3308      	adds	r3, #8
 800c05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05e:	e853 3f00 	ldrex	r3, [r3]
 800c062:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c066:	f043 0301 	orr.w	r3, r3, #1
 800c06a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3308      	adds	r3, #8
 800c072:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c074:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c076:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c07a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c07c:	e841 2300 	strex	r3, r2, [r1]
 800c080:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e5      	bne.n	800c054 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c090:	d107      	bne.n	800c0a2 <UART_Start_Receive_IT+0x102>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d103      	bne.n	800c0a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	4a21      	ldr	r2, [pc, #132]	@ (800c124 <UART_Start_Receive_IT+0x184>)
 800c09e:	669a      	str	r2, [r3, #104]	@ 0x68
 800c0a0:	e002      	b.n	800c0a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	4a20      	ldr	r2, [pc, #128]	@ (800c128 <UART_Start_Receive_IT+0x188>)
 800c0a6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d019      	beq.n	800c0e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c0c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0d0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c0d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0d6:	e841 2300 	strex	r3, r2, [r1]
 800c0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1e6      	bne.n	800c0b0 <UART_Start_Receive_IT+0x110>
 800c0e2:	e018      	b.n	800c116 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f043 0320 	orr.w	r3, r3, #32
 800c0f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c102:	623b      	str	r3, [r7, #32]
 800c104:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	69f9      	ldr	r1, [r7, #28]
 800c108:	6a3a      	ldr	r2, [r7, #32]
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e6      	bne.n	800c0e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	375c      	adds	r7, #92	@ 0x5c
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	0800c431 	.word	0x0800c431
 800c128:	0800c275 	.word	0x0800c275

0800c12c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b095      	sub	sp, #84	@ 0x54
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c13c:	e853 3f00 	ldrex	r3, [r3]
 800c140:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c152:	643b      	str	r3, [r7, #64]	@ 0x40
 800c154:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c15a:	e841 2300 	strex	r3, r2, [r1]
 800c15e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e6      	bne.n	800c134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3308      	adds	r3, #8
 800c16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	61fb      	str	r3, [r7, #28]
   return(result);
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	f023 0301 	bic.w	r3, r3, #1
 800c17c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3308      	adds	r3, #8
 800c184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c18c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e5      	bne.n	800c166 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d118      	bne.n	800c1d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	e853 3f00 	ldrex	r3, [r3]
 800c1ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f023 0310 	bic.w	r3, r3, #16
 800c1b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c0:	61bb      	str	r3, [r7, #24]
 800c1c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c4:	6979      	ldr	r1, [r7, #20]
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	e841 2300 	strex	r3, r2, [r1]
 800c1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1e6      	bne.n	800c1a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c1e8:	bf00      	nop
 800c1ea:	3754      	adds	r7, #84	@ 0x54
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff fa3e 	bl	800b694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c218:	bf00      	nop
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	e853 3f00 	ldrex	r3, [r3]
 800c234:	60bb      	str	r3, [r7, #8]
   return(result);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c23c:	61fb      	str	r3, [r7, #28]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	61bb      	str	r3, [r7, #24]
 800c248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24a:	6979      	ldr	r1, [r7, #20]
 800c24c:	69ba      	ldr	r2, [r7, #24]
 800c24e:	e841 2300 	strex	r3, r2, [r1]
 800c252:	613b      	str	r3, [r7, #16]
   return(result);
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1e6      	bne.n	800c228 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2220      	movs	r2, #32
 800c25e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff fa0a 	bl	800b680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c26c:	bf00      	nop
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b09c      	sub	sp, #112	@ 0x70
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c282:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c28c:	2b22      	cmp	r3, #34	@ 0x22
 800c28e:	f040 80be 	bne.w	800c40e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c298:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c29c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c2a0:	b2d9      	uxtb	r1, r3
 800c2a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ac:	400a      	ands	r2, r1
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f040 80a3 	bne.w	800c422 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c2ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e6      	bne.n	800c2dc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c318:	e853 3f00 	ldrex	r3, [r3]
 800c31c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c320:	f023 0301 	bic.w	r3, r3, #1
 800c324:	667b      	str	r3, [r7, #100]	@ 0x64
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3308      	adds	r3, #8
 800c32c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c32e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c330:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c336:	e841 2300 	strex	r3, r2, [r1]
 800c33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1e5      	bne.n	800c30e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2220      	movs	r2, #32
 800c346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a34      	ldr	r2, [pc, #208]	@ (800c42c <UART_RxISR_8BIT+0x1b8>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d01f      	beq.n	800c3a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d018      	beq.n	800c3a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c376:	e853 3f00 	ldrex	r3, [r3]
 800c37a:	623b      	str	r3, [r7, #32]
   return(result);
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c382:	663b      	str	r3, [r7, #96]	@ 0x60
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c38c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c38e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c394:	e841 2300 	strex	r3, r2, [r1]
 800c398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e6      	bne.n	800c36e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d12e      	bne.n	800c406 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	e853 3f00 	ldrex	r3, [r3]
 800c3ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f023 0310 	bic.w	r3, r3, #16
 800c3c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3cc:	61fb      	str	r3, [r7, #28]
 800c3ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d0:	69b9      	ldr	r1, [r7, #24]
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	e841 2300 	strex	r3, r2, [r1]
 800c3d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e6      	bne.n	800c3ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	69db      	ldr	r3, [r3, #28]
 800c3e6:	f003 0310 	and.w	r3, r3, #16
 800c3ea:	2b10      	cmp	r3, #16
 800c3ec:	d103      	bne.n	800c3f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2210      	movs	r2, #16
 800c3f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff f952 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c404:	e00d      	b.n	800c422 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7fc f9dc 	bl	80087c4 <HAL_UART_RxCpltCallback>
}
 800c40c:	e009      	b.n	800c422 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	8b1b      	ldrh	r3, [r3, #24]
 800c414:	b29a      	uxth	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0208 	orr.w	r2, r2, #8
 800c41e:	b292      	uxth	r2, r2
 800c420:	831a      	strh	r2, [r3, #24]
}
 800c422:	bf00      	nop
 800c424:	3770      	adds	r7, #112	@ 0x70
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	40008000 	.word	0x40008000

0800c430 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b09c      	sub	sp, #112	@ 0x70
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c43e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c448:	2b22      	cmp	r3, #34	@ 0x22
 800c44a:	f040 80be 	bne.w	800c5ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c454:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c45e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c462:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c466:	4013      	ands	r3, r2
 800c468:	b29a      	uxth	r2, r3
 800c46a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c46c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c472:	1c9a      	adds	r2, r3, #2
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c47e:	b29b      	uxth	r3, r3
 800c480:	3b01      	subs	r3, #1
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c490:	b29b      	uxth	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 80a3 	bne.w	800c5de <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4a0:	e853 3f00 	ldrex	r3, [r3]
 800c4a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c4a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4be:	e841 2300 	strex	r3, r2, [r1]
 800c4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1e6      	bne.n	800c498 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d4:	e853 3f00 	ldrex	r3, [r3]
 800c4d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	f023 0301 	bic.w	r3, r3, #1
 800c4e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4f2:	e841 2300 	strex	r3, r2, [r1]
 800c4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1e5      	bne.n	800c4ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2220      	movs	r2, #32
 800c502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a34      	ldr	r2, [pc, #208]	@ (800c5e8 <UART_RxISR_16BIT+0x1b8>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d01f      	beq.n	800c55c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d018      	beq.n	800c55c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	e853 3f00 	ldrex	r3, [r3]
 800c536:	61fb      	str	r3, [r7, #28]
   return(result);
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c53e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c54a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c54e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c550:	e841 2300 	strex	r3, r2, [r1]
 800c554:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1e6      	bne.n	800c52a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c560:	2b01      	cmp	r3, #1
 800c562:	d12e      	bne.n	800c5c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	e853 3f00 	ldrex	r3, [r3]
 800c576:	60bb      	str	r3, [r7, #8]
   return(result);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f023 0310 	bic.w	r3, r3, #16
 800c57e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	461a      	mov	r2, r3
 800c586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c588:	61bb      	str	r3, [r7, #24]
 800c58a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58c:	6979      	ldr	r1, [r7, #20]
 800c58e:	69ba      	ldr	r2, [r7, #24]
 800c590:	e841 2300 	strex	r3, r2, [r1]
 800c594:	613b      	str	r3, [r7, #16]
   return(result);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e6      	bne.n	800c56a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	f003 0310 	and.w	r3, r3, #16
 800c5a6:	2b10      	cmp	r3, #16
 800c5a8:	d103      	bne.n	800c5b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2210      	movs	r2, #16
 800c5b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff f874 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5c0:	e00d      	b.n	800c5de <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7fc f8fe 	bl	80087c4 <HAL_UART_RxCpltCallback>
}
 800c5c8:	e009      	b.n	800c5de <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	8b1b      	ldrh	r3, [r3, #24]
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f042 0208 	orr.w	r2, r2, #8
 800c5da:	b292      	uxth	r2, r2
 800c5dc:	831a      	strh	r2, [r3, #24]
}
 800c5de:	bf00      	nop
 800c5e0:	3770      	adds	r7, #112	@ 0x70
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	40008000 	.word	0x40008000

0800c5ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <sniprintf>:
 800c600:	b40c      	push	{r2, r3}
 800c602:	b530      	push	{r4, r5, lr}
 800c604:	4b18      	ldr	r3, [pc, #96]	@ (800c668 <sniprintf+0x68>)
 800c606:	1e0c      	subs	r4, r1, #0
 800c608:	681d      	ldr	r5, [r3, #0]
 800c60a:	b09d      	sub	sp, #116	@ 0x74
 800c60c:	da08      	bge.n	800c620 <sniprintf+0x20>
 800c60e:	238b      	movs	r3, #139	@ 0x8b
 800c610:	602b      	str	r3, [r5, #0]
 800c612:	f04f 30ff 	mov.w	r0, #4294967295
 800c616:	b01d      	add	sp, #116	@ 0x74
 800c618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c61c:	b002      	add	sp, #8
 800c61e:	4770      	bx	lr
 800c620:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c624:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c628:	f04f 0300 	mov.w	r3, #0
 800c62c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c62e:	bf14      	ite	ne
 800c630:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c634:	4623      	moveq	r3, r4
 800c636:	9304      	str	r3, [sp, #16]
 800c638:	9307      	str	r3, [sp, #28]
 800c63a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c63e:	9002      	str	r0, [sp, #8]
 800c640:	9006      	str	r0, [sp, #24]
 800c642:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c646:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c648:	ab21      	add	r3, sp, #132	@ 0x84
 800c64a:	a902      	add	r1, sp, #8
 800c64c:	4628      	mov	r0, r5
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	f000 f994 	bl	800c97c <_svfiprintf_r>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	bfbc      	itt	lt
 800c658:	238b      	movlt	r3, #139	@ 0x8b
 800c65a:	602b      	strlt	r3, [r5, #0]
 800c65c:	2c00      	cmp	r4, #0
 800c65e:	d0da      	beq.n	800c616 <sniprintf+0x16>
 800c660:	9b02      	ldr	r3, [sp, #8]
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	e7d6      	b.n	800c616 <sniprintf+0x16>
 800c668:	2000000c 	.word	0x2000000c

0800c66c <memset>:
 800c66c:	4402      	add	r2, r0
 800c66e:	4603      	mov	r3, r0
 800c670:	4293      	cmp	r3, r2
 800c672:	d100      	bne.n	800c676 <memset+0xa>
 800c674:	4770      	bx	lr
 800c676:	f803 1b01 	strb.w	r1, [r3], #1
 800c67a:	e7f9      	b.n	800c670 <memset+0x4>

0800c67c <__errno>:
 800c67c:	4b01      	ldr	r3, [pc, #4]	@ (800c684 <__errno+0x8>)
 800c67e:	6818      	ldr	r0, [r3, #0]
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	2000000c 	.word	0x2000000c

0800c688 <__libc_init_array>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	4d0d      	ldr	r5, [pc, #52]	@ (800c6c0 <__libc_init_array+0x38>)
 800c68c:	4c0d      	ldr	r4, [pc, #52]	@ (800c6c4 <__libc_init_array+0x3c>)
 800c68e:	1b64      	subs	r4, r4, r5
 800c690:	10a4      	asrs	r4, r4, #2
 800c692:	2600      	movs	r6, #0
 800c694:	42a6      	cmp	r6, r4
 800c696:	d109      	bne.n	800c6ac <__libc_init_array+0x24>
 800c698:	4d0b      	ldr	r5, [pc, #44]	@ (800c6c8 <__libc_init_array+0x40>)
 800c69a:	4c0c      	ldr	r4, [pc, #48]	@ (800c6cc <__libc_init_array+0x44>)
 800c69c:	f000 fc64 	bl	800cf68 <_init>
 800c6a0:	1b64      	subs	r4, r4, r5
 800c6a2:	10a4      	asrs	r4, r4, #2
 800c6a4:	2600      	movs	r6, #0
 800c6a6:	42a6      	cmp	r6, r4
 800c6a8:	d105      	bne.n	800c6b6 <__libc_init_array+0x2e>
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b0:	4798      	blx	r3
 800c6b2:	3601      	adds	r6, #1
 800c6b4:	e7ee      	b.n	800c694 <__libc_init_array+0xc>
 800c6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ba:	4798      	blx	r3
 800c6bc:	3601      	adds	r6, #1
 800c6be:	e7f2      	b.n	800c6a6 <__libc_init_array+0x1e>
 800c6c0:	0800d094 	.word	0x0800d094
 800c6c4:	0800d094 	.word	0x0800d094
 800c6c8:	0800d094 	.word	0x0800d094
 800c6cc:	0800d098 	.word	0x0800d098

0800c6d0 <__retarget_lock_acquire_recursive>:
 800c6d0:	4770      	bx	lr

0800c6d2 <__retarget_lock_release_recursive>:
 800c6d2:	4770      	bx	lr

0800c6d4 <_free_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	d041      	beq.n	800c760 <_free_r+0x8c>
 800c6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e0:	1f0c      	subs	r4, r1, #4
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bfb8      	it	lt
 800c6e6:	18e4      	addlt	r4, r4, r3
 800c6e8:	f000 f8e0 	bl	800c8ac <__malloc_lock>
 800c6ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c764 <_free_r+0x90>)
 800c6ee:	6813      	ldr	r3, [r2, #0]
 800c6f0:	b933      	cbnz	r3, 800c700 <_free_r+0x2c>
 800c6f2:	6063      	str	r3, [r4, #4]
 800c6f4:	6014      	str	r4, [r2, #0]
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6fc:	f000 b8dc 	b.w	800c8b8 <__malloc_unlock>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d908      	bls.n	800c716 <_free_r+0x42>
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	1821      	adds	r1, r4, r0
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf01      	itttt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	1809      	addeq	r1, r1, r0
 800c712:	6021      	streq	r1, [r4, #0]
 800c714:	e7ed      	b.n	800c6f2 <_free_r+0x1e>
 800c716:	461a      	mov	r2, r3
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	b10b      	cbz	r3, 800c720 <_free_r+0x4c>
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	d9fa      	bls.n	800c716 <_free_r+0x42>
 800c720:	6811      	ldr	r1, [r2, #0]
 800c722:	1850      	adds	r0, r2, r1
 800c724:	42a0      	cmp	r0, r4
 800c726:	d10b      	bne.n	800c740 <_free_r+0x6c>
 800c728:	6820      	ldr	r0, [r4, #0]
 800c72a:	4401      	add	r1, r0
 800c72c:	1850      	adds	r0, r2, r1
 800c72e:	4283      	cmp	r3, r0
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	d1e0      	bne.n	800c6f6 <_free_r+0x22>
 800c734:	6818      	ldr	r0, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	6053      	str	r3, [r2, #4]
 800c73a:	4408      	add	r0, r1
 800c73c:	6010      	str	r0, [r2, #0]
 800c73e:	e7da      	b.n	800c6f6 <_free_r+0x22>
 800c740:	d902      	bls.n	800c748 <_free_r+0x74>
 800c742:	230c      	movs	r3, #12
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	e7d6      	b.n	800c6f6 <_free_r+0x22>
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	1821      	adds	r1, r4, r0
 800c74c:	428b      	cmp	r3, r1
 800c74e:	bf04      	itt	eq
 800c750:	6819      	ldreq	r1, [r3, #0]
 800c752:	685b      	ldreq	r3, [r3, #4]
 800c754:	6063      	str	r3, [r4, #4]
 800c756:	bf04      	itt	eq
 800c758:	1809      	addeq	r1, r1, r0
 800c75a:	6021      	streq	r1, [r4, #0]
 800c75c:	6054      	str	r4, [r2, #4]
 800c75e:	e7ca      	b.n	800c6f6 <_free_r+0x22>
 800c760:	bd38      	pop	{r3, r4, r5, pc}
 800c762:	bf00      	nop
 800c764:	200002b8 	.word	0x200002b8

0800c768 <sbrk_aligned>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	4e0f      	ldr	r6, [pc, #60]	@ (800c7a8 <sbrk_aligned+0x40>)
 800c76c:	460c      	mov	r4, r1
 800c76e:	6831      	ldr	r1, [r6, #0]
 800c770:	4605      	mov	r5, r0
 800c772:	b911      	cbnz	r1, 800c77a <sbrk_aligned+0x12>
 800c774:	f000 fba4 	bl	800cec0 <_sbrk_r>
 800c778:	6030      	str	r0, [r6, #0]
 800c77a:	4621      	mov	r1, r4
 800c77c:	4628      	mov	r0, r5
 800c77e:	f000 fb9f 	bl	800cec0 <_sbrk_r>
 800c782:	1c43      	adds	r3, r0, #1
 800c784:	d103      	bne.n	800c78e <sbrk_aligned+0x26>
 800c786:	f04f 34ff 	mov.w	r4, #4294967295
 800c78a:	4620      	mov	r0, r4
 800c78c:	bd70      	pop	{r4, r5, r6, pc}
 800c78e:	1cc4      	adds	r4, r0, #3
 800c790:	f024 0403 	bic.w	r4, r4, #3
 800c794:	42a0      	cmp	r0, r4
 800c796:	d0f8      	beq.n	800c78a <sbrk_aligned+0x22>
 800c798:	1a21      	subs	r1, r4, r0
 800c79a:	4628      	mov	r0, r5
 800c79c:	f000 fb90 	bl	800cec0 <_sbrk_r>
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	d1f2      	bne.n	800c78a <sbrk_aligned+0x22>
 800c7a4:	e7ef      	b.n	800c786 <sbrk_aligned+0x1e>
 800c7a6:	bf00      	nop
 800c7a8:	200002b4 	.word	0x200002b4

0800c7ac <_malloc_r>:
 800c7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b0:	1ccd      	adds	r5, r1, #3
 800c7b2:	f025 0503 	bic.w	r5, r5, #3
 800c7b6:	3508      	adds	r5, #8
 800c7b8:	2d0c      	cmp	r5, #12
 800c7ba:	bf38      	it	cc
 800c7bc:	250c      	movcc	r5, #12
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	db01      	blt.n	800c7c8 <_malloc_r+0x1c>
 800c7c4:	42a9      	cmp	r1, r5
 800c7c6:	d904      	bls.n	800c7d2 <_malloc_r+0x26>
 800c7c8:	230c      	movs	r3, #12
 800c7ca:	6033      	str	r3, [r6, #0]
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8a8 <_malloc_r+0xfc>
 800c7d6:	f000 f869 	bl	800c8ac <__malloc_lock>
 800c7da:	f8d8 3000 	ldr.w	r3, [r8]
 800c7de:	461c      	mov	r4, r3
 800c7e0:	bb44      	cbnz	r4, 800c834 <_malloc_r+0x88>
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f7ff ffbf 	bl	800c768 <sbrk_aligned>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	d158      	bne.n	800c8a2 <_malloc_r+0xf6>
 800c7f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c7f4:	4627      	mov	r7, r4
 800c7f6:	2f00      	cmp	r7, #0
 800c7f8:	d143      	bne.n	800c882 <_malloc_r+0xd6>
 800c7fa:	2c00      	cmp	r4, #0
 800c7fc:	d04b      	beq.n	800c896 <_malloc_r+0xea>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	4639      	mov	r1, r7
 800c802:	4630      	mov	r0, r6
 800c804:	eb04 0903 	add.w	r9, r4, r3
 800c808:	f000 fb5a 	bl	800cec0 <_sbrk_r>
 800c80c:	4581      	cmp	r9, r0
 800c80e:	d142      	bne.n	800c896 <_malloc_r+0xea>
 800c810:	6821      	ldr	r1, [r4, #0]
 800c812:	1a6d      	subs	r5, r5, r1
 800c814:	4629      	mov	r1, r5
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff ffa6 	bl	800c768 <sbrk_aligned>
 800c81c:	3001      	adds	r0, #1
 800c81e:	d03a      	beq.n	800c896 <_malloc_r+0xea>
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	442b      	add	r3, r5
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	f8d8 3000 	ldr.w	r3, [r8]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	bb62      	cbnz	r2, 800c888 <_malloc_r+0xdc>
 800c82e:	f8c8 7000 	str.w	r7, [r8]
 800c832:	e00f      	b.n	800c854 <_malloc_r+0xa8>
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	1b52      	subs	r2, r2, r5
 800c838:	d420      	bmi.n	800c87c <_malloc_r+0xd0>
 800c83a:	2a0b      	cmp	r2, #11
 800c83c:	d917      	bls.n	800c86e <_malloc_r+0xc2>
 800c83e:	1961      	adds	r1, r4, r5
 800c840:	42a3      	cmp	r3, r4
 800c842:	6025      	str	r5, [r4, #0]
 800c844:	bf18      	it	ne
 800c846:	6059      	strne	r1, [r3, #4]
 800c848:	6863      	ldr	r3, [r4, #4]
 800c84a:	bf08      	it	eq
 800c84c:	f8c8 1000 	streq.w	r1, [r8]
 800c850:	5162      	str	r2, [r4, r5]
 800c852:	604b      	str	r3, [r1, #4]
 800c854:	4630      	mov	r0, r6
 800c856:	f000 f82f 	bl	800c8b8 <__malloc_unlock>
 800c85a:	f104 000b 	add.w	r0, r4, #11
 800c85e:	1d23      	adds	r3, r4, #4
 800c860:	f020 0007 	bic.w	r0, r0, #7
 800c864:	1ac2      	subs	r2, r0, r3
 800c866:	bf1c      	itt	ne
 800c868:	1a1b      	subne	r3, r3, r0
 800c86a:	50a3      	strne	r3, [r4, r2]
 800c86c:	e7af      	b.n	800c7ce <_malloc_r+0x22>
 800c86e:	6862      	ldr	r2, [r4, #4]
 800c870:	42a3      	cmp	r3, r4
 800c872:	bf0c      	ite	eq
 800c874:	f8c8 2000 	streq.w	r2, [r8]
 800c878:	605a      	strne	r2, [r3, #4]
 800c87a:	e7eb      	b.n	800c854 <_malloc_r+0xa8>
 800c87c:	4623      	mov	r3, r4
 800c87e:	6864      	ldr	r4, [r4, #4]
 800c880:	e7ae      	b.n	800c7e0 <_malloc_r+0x34>
 800c882:	463c      	mov	r4, r7
 800c884:	687f      	ldr	r7, [r7, #4]
 800c886:	e7b6      	b.n	800c7f6 <_malloc_r+0x4a>
 800c888:	461a      	mov	r2, r3
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	d1fb      	bne.n	800c888 <_malloc_r+0xdc>
 800c890:	2300      	movs	r3, #0
 800c892:	6053      	str	r3, [r2, #4]
 800c894:	e7de      	b.n	800c854 <_malloc_r+0xa8>
 800c896:	230c      	movs	r3, #12
 800c898:	6033      	str	r3, [r6, #0]
 800c89a:	4630      	mov	r0, r6
 800c89c:	f000 f80c 	bl	800c8b8 <__malloc_unlock>
 800c8a0:	e794      	b.n	800c7cc <_malloc_r+0x20>
 800c8a2:	6005      	str	r5, [r0, #0]
 800c8a4:	e7d6      	b.n	800c854 <_malloc_r+0xa8>
 800c8a6:	bf00      	nop
 800c8a8:	200002b8 	.word	0x200002b8

0800c8ac <__malloc_lock>:
 800c8ac:	4801      	ldr	r0, [pc, #4]	@ (800c8b4 <__malloc_lock+0x8>)
 800c8ae:	f7ff bf0f 	b.w	800c6d0 <__retarget_lock_acquire_recursive>
 800c8b2:	bf00      	nop
 800c8b4:	200002b0 	.word	0x200002b0

0800c8b8 <__malloc_unlock>:
 800c8b8:	4801      	ldr	r0, [pc, #4]	@ (800c8c0 <__malloc_unlock+0x8>)
 800c8ba:	f7ff bf0a 	b.w	800c6d2 <__retarget_lock_release_recursive>
 800c8be:	bf00      	nop
 800c8c0:	200002b0 	.word	0x200002b0

0800c8c4 <__ssputs_r>:
 800c8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c8:	688e      	ldr	r6, [r1, #8]
 800c8ca:	461f      	mov	r7, r3
 800c8cc:	42be      	cmp	r6, r7
 800c8ce:	680b      	ldr	r3, [r1, #0]
 800c8d0:	4682      	mov	sl, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	4690      	mov	r8, r2
 800c8d6:	d82d      	bhi.n	800c934 <__ssputs_r+0x70>
 800c8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8e0:	d026      	beq.n	800c930 <__ssputs_r+0x6c>
 800c8e2:	6965      	ldr	r5, [r4, #20]
 800c8e4:	6909      	ldr	r1, [r1, #16]
 800c8e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ea:	eba3 0901 	sub.w	r9, r3, r1
 800c8ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8f2:	1c7b      	adds	r3, r7, #1
 800c8f4:	444b      	add	r3, r9
 800c8f6:	106d      	asrs	r5, r5, #1
 800c8f8:	429d      	cmp	r5, r3
 800c8fa:	bf38      	it	cc
 800c8fc:	461d      	movcc	r5, r3
 800c8fe:	0553      	lsls	r3, r2, #21
 800c900:	d527      	bpl.n	800c952 <__ssputs_r+0x8e>
 800c902:	4629      	mov	r1, r5
 800c904:	f7ff ff52 	bl	800c7ac <_malloc_r>
 800c908:	4606      	mov	r6, r0
 800c90a:	b360      	cbz	r0, 800c966 <__ssputs_r+0xa2>
 800c90c:	6921      	ldr	r1, [r4, #16]
 800c90e:	464a      	mov	r2, r9
 800c910:	f000 fae6 	bl	800cee0 <memcpy>
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	6126      	str	r6, [r4, #16]
 800c922:	6165      	str	r5, [r4, #20]
 800c924:	444e      	add	r6, r9
 800c926:	eba5 0509 	sub.w	r5, r5, r9
 800c92a:	6026      	str	r6, [r4, #0]
 800c92c:	60a5      	str	r5, [r4, #8]
 800c92e:	463e      	mov	r6, r7
 800c930:	42be      	cmp	r6, r7
 800c932:	d900      	bls.n	800c936 <__ssputs_r+0x72>
 800c934:	463e      	mov	r6, r7
 800c936:	6820      	ldr	r0, [r4, #0]
 800c938:	4632      	mov	r2, r6
 800c93a:	4641      	mov	r1, r8
 800c93c:	f000 faa6 	bl	800ce8c <memmove>
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	1b9b      	subs	r3, r3, r6
 800c944:	60a3      	str	r3, [r4, #8]
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	4433      	add	r3, r6
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	2000      	movs	r0, #0
 800c94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c952:	462a      	mov	r2, r5
 800c954:	f000 fad2 	bl	800cefc <_realloc_r>
 800c958:	4606      	mov	r6, r0
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d1e0      	bne.n	800c920 <__ssputs_r+0x5c>
 800c95e:	6921      	ldr	r1, [r4, #16]
 800c960:	4650      	mov	r0, sl
 800c962:	f7ff feb7 	bl	800c6d4 <_free_r>
 800c966:	230c      	movs	r3, #12
 800c968:	f8ca 3000 	str.w	r3, [sl]
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c972:	81a3      	strh	r3, [r4, #12]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	e7e9      	b.n	800c94e <__ssputs_r+0x8a>
	...

0800c97c <_svfiprintf_r>:
 800c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	4698      	mov	r8, r3
 800c982:	898b      	ldrh	r3, [r1, #12]
 800c984:	061b      	lsls	r3, r3, #24
 800c986:	b09d      	sub	sp, #116	@ 0x74
 800c988:	4607      	mov	r7, r0
 800c98a:	460d      	mov	r5, r1
 800c98c:	4614      	mov	r4, r2
 800c98e:	d510      	bpl.n	800c9b2 <_svfiprintf_r+0x36>
 800c990:	690b      	ldr	r3, [r1, #16]
 800c992:	b973      	cbnz	r3, 800c9b2 <_svfiprintf_r+0x36>
 800c994:	2140      	movs	r1, #64	@ 0x40
 800c996:	f7ff ff09 	bl	800c7ac <_malloc_r>
 800c99a:	6028      	str	r0, [r5, #0]
 800c99c:	6128      	str	r0, [r5, #16]
 800c99e:	b930      	cbnz	r0, 800c9ae <_svfiprintf_r+0x32>
 800c9a0:	230c      	movs	r3, #12
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a8:	b01d      	add	sp, #116	@ 0x74
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	2340      	movs	r3, #64	@ 0x40
 800c9b0:	616b      	str	r3, [r5, #20]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9b6:	2320      	movs	r3, #32
 800c9b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9c0:	2330      	movs	r3, #48	@ 0x30
 800c9c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb60 <_svfiprintf_r+0x1e4>
 800c9c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9ca:	f04f 0901 	mov.w	r9, #1
 800c9ce:	4623      	mov	r3, r4
 800c9d0:	469a      	mov	sl, r3
 800c9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9d6:	b10a      	cbz	r2, 800c9dc <_svfiprintf_r+0x60>
 800c9d8:	2a25      	cmp	r2, #37	@ 0x25
 800c9da:	d1f9      	bne.n	800c9d0 <_svfiprintf_r+0x54>
 800c9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c9e0:	d00b      	beq.n	800c9fa <_svfiprintf_r+0x7e>
 800c9e2:	465b      	mov	r3, fp
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f7ff ff6b 	bl	800c8c4 <__ssputs_r>
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	f000 80a7 	beq.w	800cb42 <_svfiprintf_r+0x1c6>
 800c9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9f6:	445a      	add	r2, fp
 800c9f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 809f 	beq.w	800cb42 <_svfiprintf_r+0x1c6>
 800ca04:	2300      	movs	r3, #0
 800ca06:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca0e:	f10a 0a01 	add.w	sl, sl, #1
 800ca12:	9304      	str	r3, [sp, #16]
 800ca14:	9307      	str	r3, [sp, #28]
 800ca16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca1c:	4654      	mov	r4, sl
 800ca1e:	2205      	movs	r2, #5
 800ca20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca24:	484e      	ldr	r0, [pc, #312]	@ (800cb60 <_svfiprintf_r+0x1e4>)
 800ca26:	f7fb fbeb 	bl	8008200 <memchr>
 800ca2a:	9a04      	ldr	r2, [sp, #16]
 800ca2c:	b9d8      	cbnz	r0, 800ca66 <_svfiprintf_r+0xea>
 800ca2e:	06d0      	lsls	r0, r2, #27
 800ca30:	bf44      	itt	mi
 800ca32:	2320      	movmi	r3, #32
 800ca34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca38:	0711      	lsls	r1, r2, #28
 800ca3a:	bf44      	itt	mi
 800ca3c:	232b      	movmi	r3, #43	@ 0x2b
 800ca3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca42:	f89a 3000 	ldrb.w	r3, [sl]
 800ca46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca48:	d015      	beq.n	800ca76 <_svfiprintf_r+0xfa>
 800ca4a:	9a07      	ldr	r2, [sp, #28]
 800ca4c:	4654      	mov	r4, sl
 800ca4e:	2000      	movs	r0, #0
 800ca50:	f04f 0c0a 	mov.w	ip, #10
 800ca54:	4621      	mov	r1, r4
 800ca56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca5a:	3b30      	subs	r3, #48	@ 0x30
 800ca5c:	2b09      	cmp	r3, #9
 800ca5e:	d94b      	bls.n	800caf8 <_svfiprintf_r+0x17c>
 800ca60:	b1b0      	cbz	r0, 800ca90 <_svfiprintf_r+0x114>
 800ca62:	9207      	str	r2, [sp, #28]
 800ca64:	e014      	b.n	800ca90 <_svfiprintf_r+0x114>
 800ca66:	eba0 0308 	sub.w	r3, r0, r8
 800ca6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	46a2      	mov	sl, r4
 800ca74:	e7d2      	b.n	800ca1c <_svfiprintf_r+0xa0>
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	1d19      	adds	r1, r3, #4
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	9103      	str	r1, [sp, #12]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	bfbb      	ittet	lt
 800ca82:	425b      	neglt	r3, r3
 800ca84:	f042 0202 	orrlt.w	r2, r2, #2
 800ca88:	9307      	strge	r3, [sp, #28]
 800ca8a:	9307      	strlt	r3, [sp, #28]
 800ca8c:	bfb8      	it	lt
 800ca8e:	9204      	strlt	r2, [sp, #16]
 800ca90:	7823      	ldrb	r3, [r4, #0]
 800ca92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca94:	d10a      	bne.n	800caac <_svfiprintf_r+0x130>
 800ca96:	7863      	ldrb	r3, [r4, #1]
 800ca98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca9a:	d132      	bne.n	800cb02 <_svfiprintf_r+0x186>
 800ca9c:	9b03      	ldr	r3, [sp, #12]
 800ca9e:	1d1a      	adds	r2, r3, #4
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	9203      	str	r2, [sp, #12]
 800caa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caa8:	3402      	adds	r4, #2
 800caaa:	9305      	str	r3, [sp, #20]
 800caac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb70 <_svfiprintf_r+0x1f4>
 800cab0:	7821      	ldrb	r1, [r4, #0]
 800cab2:	2203      	movs	r2, #3
 800cab4:	4650      	mov	r0, sl
 800cab6:	f7fb fba3 	bl	8008200 <memchr>
 800caba:	b138      	cbz	r0, 800cacc <_svfiprintf_r+0x150>
 800cabc:	9b04      	ldr	r3, [sp, #16]
 800cabe:	eba0 000a 	sub.w	r0, r0, sl
 800cac2:	2240      	movs	r2, #64	@ 0x40
 800cac4:	4082      	lsls	r2, r0
 800cac6:	4313      	orrs	r3, r2
 800cac8:	3401      	adds	r4, #1
 800caca:	9304      	str	r3, [sp, #16]
 800cacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad0:	4824      	ldr	r0, [pc, #144]	@ (800cb64 <_svfiprintf_r+0x1e8>)
 800cad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cad6:	2206      	movs	r2, #6
 800cad8:	f7fb fb92 	bl	8008200 <memchr>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d036      	beq.n	800cb4e <_svfiprintf_r+0x1d2>
 800cae0:	4b21      	ldr	r3, [pc, #132]	@ (800cb68 <_svfiprintf_r+0x1ec>)
 800cae2:	bb1b      	cbnz	r3, 800cb2c <_svfiprintf_r+0x1b0>
 800cae4:	9b03      	ldr	r3, [sp, #12]
 800cae6:	3307      	adds	r3, #7
 800cae8:	f023 0307 	bic.w	r3, r3, #7
 800caec:	3308      	adds	r3, #8
 800caee:	9303      	str	r3, [sp, #12]
 800caf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf2:	4433      	add	r3, r6
 800caf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf6:	e76a      	b.n	800c9ce <_svfiprintf_r+0x52>
 800caf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cafc:	460c      	mov	r4, r1
 800cafe:	2001      	movs	r0, #1
 800cb00:	e7a8      	b.n	800ca54 <_svfiprintf_r+0xd8>
 800cb02:	2300      	movs	r3, #0
 800cb04:	3401      	adds	r4, #1
 800cb06:	9305      	str	r3, [sp, #20]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f04f 0c0a 	mov.w	ip, #10
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb14:	3a30      	subs	r2, #48	@ 0x30
 800cb16:	2a09      	cmp	r2, #9
 800cb18:	d903      	bls.n	800cb22 <_svfiprintf_r+0x1a6>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0c6      	beq.n	800caac <_svfiprintf_r+0x130>
 800cb1e:	9105      	str	r1, [sp, #20]
 800cb20:	e7c4      	b.n	800caac <_svfiprintf_r+0x130>
 800cb22:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb26:	4604      	mov	r4, r0
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e7f0      	b.n	800cb0e <_svfiprintf_r+0x192>
 800cb2c:	ab03      	add	r3, sp, #12
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	462a      	mov	r2, r5
 800cb32:	4b0e      	ldr	r3, [pc, #56]	@ (800cb6c <_svfiprintf_r+0x1f0>)
 800cb34:	a904      	add	r1, sp, #16
 800cb36:	4638      	mov	r0, r7
 800cb38:	f3af 8000 	nop.w
 800cb3c:	1c42      	adds	r2, r0, #1
 800cb3e:	4606      	mov	r6, r0
 800cb40:	d1d6      	bne.n	800caf0 <_svfiprintf_r+0x174>
 800cb42:	89ab      	ldrh	r3, [r5, #12]
 800cb44:	065b      	lsls	r3, r3, #25
 800cb46:	f53f af2d 	bmi.w	800c9a4 <_svfiprintf_r+0x28>
 800cb4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb4c:	e72c      	b.n	800c9a8 <_svfiprintf_r+0x2c>
 800cb4e:	ab03      	add	r3, sp, #12
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	462a      	mov	r2, r5
 800cb54:	4b05      	ldr	r3, [pc, #20]	@ (800cb6c <_svfiprintf_r+0x1f0>)
 800cb56:	a904      	add	r1, sp, #16
 800cb58:	4638      	mov	r0, r7
 800cb5a:	f000 f879 	bl	800cc50 <_printf_i>
 800cb5e:	e7ed      	b.n	800cb3c <_svfiprintf_r+0x1c0>
 800cb60:	0800d058 	.word	0x0800d058
 800cb64:	0800d062 	.word	0x0800d062
 800cb68:	00000000 	.word	0x00000000
 800cb6c:	0800c8c5 	.word	0x0800c8c5
 800cb70:	0800d05e 	.word	0x0800d05e

0800cb74 <_printf_common>:
 800cb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb78:	4616      	mov	r6, r2
 800cb7a:	4698      	mov	r8, r3
 800cb7c:	688a      	ldr	r2, [r1, #8]
 800cb7e:	690b      	ldr	r3, [r1, #16]
 800cb80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb84:	4293      	cmp	r3, r2
 800cb86:	bfb8      	it	lt
 800cb88:	4613      	movlt	r3, r2
 800cb8a:	6033      	str	r3, [r6, #0]
 800cb8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb90:	4607      	mov	r7, r0
 800cb92:	460c      	mov	r4, r1
 800cb94:	b10a      	cbz	r2, 800cb9a <_printf_common+0x26>
 800cb96:	3301      	adds	r3, #1
 800cb98:	6033      	str	r3, [r6, #0]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	0699      	lsls	r1, r3, #26
 800cb9e:	bf42      	ittt	mi
 800cba0:	6833      	ldrmi	r3, [r6, #0]
 800cba2:	3302      	addmi	r3, #2
 800cba4:	6033      	strmi	r3, [r6, #0]
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	f015 0506 	ands.w	r5, r5, #6
 800cbac:	d106      	bne.n	800cbbc <_printf_common+0x48>
 800cbae:	f104 0a19 	add.w	sl, r4, #25
 800cbb2:	68e3      	ldr	r3, [r4, #12]
 800cbb4:	6832      	ldr	r2, [r6, #0]
 800cbb6:	1a9b      	subs	r3, r3, r2
 800cbb8:	42ab      	cmp	r3, r5
 800cbba:	dc26      	bgt.n	800cc0a <_printf_common+0x96>
 800cbbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbc0:	6822      	ldr	r2, [r4, #0]
 800cbc2:	3b00      	subs	r3, #0
 800cbc4:	bf18      	it	ne
 800cbc6:	2301      	movne	r3, #1
 800cbc8:	0692      	lsls	r2, r2, #26
 800cbca:	d42b      	bmi.n	800cc24 <_printf_common+0xb0>
 800cbcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	47c8      	blx	r9
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d01e      	beq.n	800cc18 <_printf_common+0xa4>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	6922      	ldr	r2, [r4, #16]
 800cbde:	f003 0306 	and.w	r3, r3, #6
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	bf02      	ittt	eq
 800cbe6:	68e5      	ldreq	r5, [r4, #12]
 800cbe8:	6833      	ldreq	r3, [r6, #0]
 800cbea:	1aed      	subeq	r5, r5, r3
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	bf0c      	ite	eq
 800cbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbf4:	2500      	movne	r5, #0
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	bfc4      	itt	gt
 800cbfa:	1a9b      	subgt	r3, r3, r2
 800cbfc:	18ed      	addgt	r5, r5, r3
 800cbfe:	2600      	movs	r6, #0
 800cc00:	341a      	adds	r4, #26
 800cc02:	42b5      	cmp	r5, r6
 800cc04:	d11a      	bne.n	800cc3c <_printf_common+0xc8>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e008      	b.n	800cc1c <_printf_common+0xa8>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4652      	mov	r2, sl
 800cc0e:	4641      	mov	r1, r8
 800cc10:	4638      	mov	r0, r7
 800cc12:	47c8      	blx	r9
 800cc14:	3001      	adds	r0, #1
 800cc16:	d103      	bne.n	800cc20 <_printf_common+0xac>
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc20:	3501      	adds	r5, #1
 800cc22:	e7c6      	b.n	800cbb2 <_printf_common+0x3e>
 800cc24:	18e1      	adds	r1, r4, r3
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	2030      	movs	r0, #48	@ 0x30
 800cc2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc2e:	4422      	add	r2, r4
 800cc30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc38:	3302      	adds	r3, #2
 800cc3a:	e7c7      	b.n	800cbcc <_printf_common+0x58>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	4622      	mov	r2, r4
 800cc40:	4641      	mov	r1, r8
 800cc42:	4638      	mov	r0, r7
 800cc44:	47c8      	blx	r9
 800cc46:	3001      	adds	r0, #1
 800cc48:	d0e6      	beq.n	800cc18 <_printf_common+0xa4>
 800cc4a:	3601      	adds	r6, #1
 800cc4c:	e7d9      	b.n	800cc02 <_printf_common+0x8e>
	...

0800cc50 <_printf_i>:
 800cc50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc54:	7e0f      	ldrb	r7, [r1, #24]
 800cc56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc58:	2f78      	cmp	r7, #120	@ 0x78
 800cc5a:	4691      	mov	r9, r2
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	469a      	mov	sl, r3
 800cc62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc66:	d807      	bhi.n	800cc78 <_printf_i+0x28>
 800cc68:	2f62      	cmp	r7, #98	@ 0x62
 800cc6a:	d80a      	bhi.n	800cc82 <_printf_i+0x32>
 800cc6c:	2f00      	cmp	r7, #0
 800cc6e:	f000 80d1 	beq.w	800ce14 <_printf_i+0x1c4>
 800cc72:	2f58      	cmp	r7, #88	@ 0x58
 800cc74:	f000 80b8 	beq.w	800cde8 <_printf_i+0x198>
 800cc78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc80:	e03a      	b.n	800ccf8 <_printf_i+0xa8>
 800cc82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc86:	2b15      	cmp	r3, #21
 800cc88:	d8f6      	bhi.n	800cc78 <_printf_i+0x28>
 800cc8a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc90 <_printf_i+0x40>)
 800cc8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc90:	0800cce9 	.word	0x0800cce9
 800cc94:	0800ccfd 	.word	0x0800ccfd
 800cc98:	0800cc79 	.word	0x0800cc79
 800cc9c:	0800cc79 	.word	0x0800cc79
 800cca0:	0800cc79 	.word	0x0800cc79
 800cca4:	0800cc79 	.word	0x0800cc79
 800cca8:	0800ccfd 	.word	0x0800ccfd
 800ccac:	0800cc79 	.word	0x0800cc79
 800ccb0:	0800cc79 	.word	0x0800cc79
 800ccb4:	0800cc79 	.word	0x0800cc79
 800ccb8:	0800cc79 	.word	0x0800cc79
 800ccbc:	0800cdfb 	.word	0x0800cdfb
 800ccc0:	0800cd27 	.word	0x0800cd27
 800ccc4:	0800cdb5 	.word	0x0800cdb5
 800ccc8:	0800cc79 	.word	0x0800cc79
 800cccc:	0800cc79 	.word	0x0800cc79
 800ccd0:	0800ce1d 	.word	0x0800ce1d
 800ccd4:	0800cc79 	.word	0x0800cc79
 800ccd8:	0800cd27 	.word	0x0800cd27
 800ccdc:	0800cc79 	.word	0x0800cc79
 800cce0:	0800cc79 	.word	0x0800cc79
 800cce4:	0800cdbd 	.word	0x0800cdbd
 800cce8:	6833      	ldr	r3, [r6, #0]
 800ccea:	1d1a      	adds	r2, r3, #4
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6032      	str	r2, [r6, #0]
 800ccf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e09c      	b.n	800ce36 <_printf_i+0x1e6>
 800ccfc:	6833      	ldr	r3, [r6, #0]
 800ccfe:	6820      	ldr	r0, [r4, #0]
 800cd00:	1d19      	adds	r1, r3, #4
 800cd02:	6031      	str	r1, [r6, #0]
 800cd04:	0606      	lsls	r6, r0, #24
 800cd06:	d501      	bpl.n	800cd0c <_printf_i+0xbc>
 800cd08:	681d      	ldr	r5, [r3, #0]
 800cd0a:	e003      	b.n	800cd14 <_printf_i+0xc4>
 800cd0c:	0645      	lsls	r5, r0, #25
 800cd0e:	d5fb      	bpl.n	800cd08 <_printf_i+0xb8>
 800cd10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd14:	2d00      	cmp	r5, #0
 800cd16:	da03      	bge.n	800cd20 <_printf_i+0xd0>
 800cd18:	232d      	movs	r3, #45	@ 0x2d
 800cd1a:	426d      	negs	r5, r5
 800cd1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd20:	4858      	ldr	r0, [pc, #352]	@ (800ce84 <_printf_i+0x234>)
 800cd22:	230a      	movs	r3, #10
 800cd24:	e011      	b.n	800cd4a <_printf_i+0xfa>
 800cd26:	6821      	ldr	r1, [r4, #0]
 800cd28:	6833      	ldr	r3, [r6, #0]
 800cd2a:	0608      	lsls	r0, r1, #24
 800cd2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd30:	d402      	bmi.n	800cd38 <_printf_i+0xe8>
 800cd32:	0649      	lsls	r1, r1, #25
 800cd34:	bf48      	it	mi
 800cd36:	b2ad      	uxthmi	r5, r5
 800cd38:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd3a:	4852      	ldr	r0, [pc, #328]	@ (800ce84 <_printf_i+0x234>)
 800cd3c:	6033      	str	r3, [r6, #0]
 800cd3e:	bf14      	ite	ne
 800cd40:	230a      	movne	r3, #10
 800cd42:	2308      	moveq	r3, #8
 800cd44:	2100      	movs	r1, #0
 800cd46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd4a:	6866      	ldr	r6, [r4, #4]
 800cd4c:	60a6      	str	r6, [r4, #8]
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	db05      	blt.n	800cd5e <_printf_i+0x10e>
 800cd52:	6821      	ldr	r1, [r4, #0]
 800cd54:	432e      	orrs	r6, r5
 800cd56:	f021 0104 	bic.w	r1, r1, #4
 800cd5a:	6021      	str	r1, [r4, #0]
 800cd5c:	d04b      	beq.n	800cdf6 <_printf_i+0x1a6>
 800cd5e:	4616      	mov	r6, r2
 800cd60:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd64:	fb03 5711 	mls	r7, r3, r1, r5
 800cd68:	5dc7      	ldrb	r7, [r0, r7]
 800cd6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd6e:	462f      	mov	r7, r5
 800cd70:	42bb      	cmp	r3, r7
 800cd72:	460d      	mov	r5, r1
 800cd74:	d9f4      	bls.n	800cd60 <_printf_i+0x110>
 800cd76:	2b08      	cmp	r3, #8
 800cd78:	d10b      	bne.n	800cd92 <_printf_i+0x142>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	07df      	lsls	r7, r3, #31
 800cd7e:	d508      	bpl.n	800cd92 <_printf_i+0x142>
 800cd80:	6923      	ldr	r3, [r4, #16]
 800cd82:	6861      	ldr	r1, [r4, #4]
 800cd84:	4299      	cmp	r1, r3
 800cd86:	bfde      	ittt	le
 800cd88:	2330      	movle	r3, #48	@ 0x30
 800cd8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd92:	1b92      	subs	r2, r2, r6
 800cd94:	6122      	str	r2, [r4, #16]
 800cd96:	f8cd a000 	str.w	sl, [sp]
 800cd9a:	464b      	mov	r3, r9
 800cd9c:	aa03      	add	r2, sp, #12
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4640      	mov	r0, r8
 800cda2:	f7ff fee7 	bl	800cb74 <_printf_common>
 800cda6:	3001      	adds	r0, #1
 800cda8:	d14a      	bne.n	800ce40 <_printf_i+0x1f0>
 800cdaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cdae:	b004      	add	sp, #16
 800cdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	f043 0320 	orr.w	r3, r3, #32
 800cdba:	6023      	str	r3, [r4, #0]
 800cdbc:	4832      	ldr	r0, [pc, #200]	@ (800ce88 <_printf_i+0x238>)
 800cdbe:	2778      	movs	r7, #120	@ 0x78
 800cdc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	6831      	ldr	r1, [r6, #0]
 800cdc8:	061f      	lsls	r7, r3, #24
 800cdca:	f851 5b04 	ldr.w	r5, [r1], #4
 800cdce:	d402      	bmi.n	800cdd6 <_printf_i+0x186>
 800cdd0:	065f      	lsls	r7, r3, #25
 800cdd2:	bf48      	it	mi
 800cdd4:	b2ad      	uxthmi	r5, r5
 800cdd6:	6031      	str	r1, [r6, #0]
 800cdd8:	07d9      	lsls	r1, r3, #31
 800cdda:	bf44      	itt	mi
 800cddc:	f043 0320 	orrmi.w	r3, r3, #32
 800cde0:	6023      	strmi	r3, [r4, #0]
 800cde2:	b11d      	cbz	r5, 800cdec <_printf_i+0x19c>
 800cde4:	2310      	movs	r3, #16
 800cde6:	e7ad      	b.n	800cd44 <_printf_i+0xf4>
 800cde8:	4826      	ldr	r0, [pc, #152]	@ (800ce84 <_printf_i+0x234>)
 800cdea:	e7e9      	b.n	800cdc0 <_printf_i+0x170>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	f023 0320 	bic.w	r3, r3, #32
 800cdf2:	6023      	str	r3, [r4, #0]
 800cdf4:	e7f6      	b.n	800cde4 <_printf_i+0x194>
 800cdf6:	4616      	mov	r6, r2
 800cdf8:	e7bd      	b.n	800cd76 <_printf_i+0x126>
 800cdfa:	6833      	ldr	r3, [r6, #0]
 800cdfc:	6825      	ldr	r5, [r4, #0]
 800cdfe:	6961      	ldr	r1, [r4, #20]
 800ce00:	1d18      	adds	r0, r3, #4
 800ce02:	6030      	str	r0, [r6, #0]
 800ce04:	062e      	lsls	r6, r5, #24
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	d501      	bpl.n	800ce0e <_printf_i+0x1be>
 800ce0a:	6019      	str	r1, [r3, #0]
 800ce0c:	e002      	b.n	800ce14 <_printf_i+0x1c4>
 800ce0e:	0668      	lsls	r0, r5, #25
 800ce10:	d5fb      	bpl.n	800ce0a <_printf_i+0x1ba>
 800ce12:	8019      	strh	r1, [r3, #0]
 800ce14:	2300      	movs	r3, #0
 800ce16:	6123      	str	r3, [r4, #16]
 800ce18:	4616      	mov	r6, r2
 800ce1a:	e7bc      	b.n	800cd96 <_printf_i+0x146>
 800ce1c:	6833      	ldr	r3, [r6, #0]
 800ce1e:	1d1a      	adds	r2, r3, #4
 800ce20:	6032      	str	r2, [r6, #0]
 800ce22:	681e      	ldr	r6, [r3, #0]
 800ce24:	6862      	ldr	r2, [r4, #4]
 800ce26:	2100      	movs	r1, #0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7fb f9e9 	bl	8008200 <memchr>
 800ce2e:	b108      	cbz	r0, 800ce34 <_printf_i+0x1e4>
 800ce30:	1b80      	subs	r0, r0, r6
 800ce32:	6060      	str	r0, [r4, #4]
 800ce34:	6863      	ldr	r3, [r4, #4]
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce3e:	e7aa      	b.n	800cd96 <_printf_i+0x146>
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	4632      	mov	r2, r6
 800ce44:	4649      	mov	r1, r9
 800ce46:	4640      	mov	r0, r8
 800ce48:	47d0      	blx	sl
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	d0ad      	beq.n	800cdaa <_printf_i+0x15a>
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	079b      	lsls	r3, r3, #30
 800ce52:	d413      	bmi.n	800ce7c <_printf_i+0x22c>
 800ce54:	68e0      	ldr	r0, [r4, #12]
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	4298      	cmp	r0, r3
 800ce5a:	bfb8      	it	lt
 800ce5c:	4618      	movlt	r0, r3
 800ce5e:	e7a6      	b.n	800cdae <_printf_i+0x15e>
 800ce60:	2301      	movs	r3, #1
 800ce62:	4632      	mov	r2, r6
 800ce64:	4649      	mov	r1, r9
 800ce66:	4640      	mov	r0, r8
 800ce68:	47d0      	blx	sl
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	d09d      	beq.n	800cdaa <_printf_i+0x15a>
 800ce6e:	3501      	adds	r5, #1
 800ce70:	68e3      	ldr	r3, [r4, #12]
 800ce72:	9903      	ldr	r1, [sp, #12]
 800ce74:	1a5b      	subs	r3, r3, r1
 800ce76:	42ab      	cmp	r3, r5
 800ce78:	dcf2      	bgt.n	800ce60 <_printf_i+0x210>
 800ce7a:	e7eb      	b.n	800ce54 <_printf_i+0x204>
 800ce7c:	2500      	movs	r5, #0
 800ce7e:	f104 0619 	add.w	r6, r4, #25
 800ce82:	e7f5      	b.n	800ce70 <_printf_i+0x220>
 800ce84:	0800d069 	.word	0x0800d069
 800ce88:	0800d07a 	.word	0x0800d07a

0800ce8c <memmove>:
 800ce8c:	4288      	cmp	r0, r1
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	eb01 0402 	add.w	r4, r1, r2
 800ce94:	d902      	bls.n	800ce9c <memmove+0x10>
 800ce96:	4284      	cmp	r4, r0
 800ce98:	4623      	mov	r3, r4
 800ce9a:	d807      	bhi.n	800ceac <memmove+0x20>
 800ce9c:	1e43      	subs	r3, r0, #1
 800ce9e:	42a1      	cmp	r1, r4
 800cea0:	d008      	beq.n	800ceb4 <memmove+0x28>
 800cea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceaa:	e7f8      	b.n	800ce9e <memmove+0x12>
 800ceac:	4402      	add	r2, r0
 800ceae:	4601      	mov	r1, r0
 800ceb0:	428a      	cmp	r2, r1
 800ceb2:	d100      	bne.n	800ceb6 <memmove+0x2a>
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cebe:	e7f7      	b.n	800ceb0 <memmove+0x24>

0800cec0 <_sbrk_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d06      	ldr	r5, [pc, #24]	@ (800cedc <_sbrk_r+0x1c>)
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	f7fb fe4c 	bl	8008b68 <_sbrk>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_sbrk_r+0x1a>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_sbrk_r+0x1a>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	200002ac 	.word	0x200002ac

0800cee0 <memcpy>:
 800cee0:	440a      	add	r2, r1
 800cee2:	4291      	cmp	r1, r2
 800cee4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cee8:	d100      	bne.n	800ceec <memcpy+0xc>
 800ceea:	4770      	bx	lr
 800ceec:	b510      	push	{r4, lr}
 800ceee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cef6:	4291      	cmp	r1, r2
 800cef8:	d1f9      	bne.n	800ceee <memcpy+0xe>
 800cefa:	bd10      	pop	{r4, pc}

0800cefc <_realloc_r>:
 800cefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf00:	4607      	mov	r7, r0
 800cf02:	4614      	mov	r4, r2
 800cf04:	460d      	mov	r5, r1
 800cf06:	b921      	cbnz	r1, 800cf12 <_realloc_r+0x16>
 800cf08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	f7ff bc4d 	b.w	800c7ac <_malloc_r>
 800cf12:	b92a      	cbnz	r2, 800cf20 <_realloc_r+0x24>
 800cf14:	f7ff fbde 	bl	800c6d4 <_free_r>
 800cf18:	4625      	mov	r5, r4
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf20:	f000 f81a 	bl	800cf58 <_malloc_usable_size_r>
 800cf24:	4284      	cmp	r4, r0
 800cf26:	4606      	mov	r6, r0
 800cf28:	d802      	bhi.n	800cf30 <_realloc_r+0x34>
 800cf2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf2e:	d8f4      	bhi.n	800cf1a <_realloc_r+0x1e>
 800cf30:	4621      	mov	r1, r4
 800cf32:	4638      	mov	r0, r7
 800cf34:	f7ff fc3a 	bl	800c7ac <_malloc_r>
 800cf38:	4680      	mov	r8, r0
 800cf3a:	b908      	cbnz	r0, 800cf40 <_realloc_r+0x44>
 800cf3c:	4645      	mov	r5, r8
 800cf3e:	e7ec      	b.n	800cf1a <_realloc_r+0x1e>
 800cf40:	42b4      	cmp	r4, r6
 800cf42:	4622      	mov	r2, r4
 800cf44:	4629      	mov	r1, r5
 800cf46:	bf28      	it	cs
 800cf48:	4632      	movcs	r2, r6
 800cf4a:	f7ff ffc9 	bl	800cee0 <memcpy>
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff fbbf 	bl	800c6d4 <_free_r>
 800cf56:	e7f1      	b.n	800cf3c <_realloc_r+0x40>

0800cf58 <_malloc_usable_size_r>:
 800cf58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf5c:	1f18      	subs	r0, r3, #4
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	bfbc      	itt	lt
 800cf62:	580b      	ldrlt	r3, [r1, r0]
 800cf64:	18c0      	addlt	r0, r0, r3
 800cf66:	4770      	bx	lr

0800cf68 <_init>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr

0800cf74 <_fini>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr
